{"version":3,"sources":["tileImages_white/1m.png","tileImages_white/2m.png","tileImages_white/3m.png","tileImages_white/4m.png","tileImages_white/5m.png","tileImages_white/0m.png","tileImages_white/6m.png","tileImages_white/7m.png","tileImages_white/8m.png","tileImages_white/9m.png","tileImages_white/1s.png","tileImages_white/2s.png","tileImages_white/3s.png","tileImages_white/4s.png","tileImages_white/5s.png","tileImages_white/0s.png","tileImages_white/6s.png","tileImages_white/7s.png","tileImages_white/8s.png","tileImages_white/9s.png","tileImages_white/1p.png","tileImages_white/2p.png","tileImages_white/3p.png","tileImages_white/4p.png","tileImages_white/5p.png","tileImages_white/0p.png","tileImages_white/6p.png","tileImages_white/7p.png","tileImages_white/8p.png","tileImages_white/9p.png","tileImages_white/1z.png","tileImages_white/2z.png","tileImages_white/3z.png","tileImages_white/4z.png","tileImages_white/5z.png","tileImages_white/6z.png","tileImages_white/7z.png","tileImages_white/back.png","serviceWorker.js","i18n.js","translations/en.js","translations/ja.js","translations/fr.js","translations/pl.js","translations/ru.js","translations/chs.js","Constants.js","scripts/HandConversions.js","scripts/Utils.js","scripts/TileConversions.js","components/Tile.js","components/Hand.js","components/HistoryMessage.js","components/History.js","components/ukeire-quiz/Settings.js","components/CopyButton.js","components/LoadButton.js","components/DiscardPool.js","components/ValueTileDisplay.js","components/ukeire-quiz/StatsDisplay.js","scripts/GenerateHand.js","scripts/Evaluations.js","scripts/UkeireCalculator.js","scripts/ShantenCalculator.js","components/SortedHand.js","models/Player.js","models/LocalizedMessage.js","models/HistoryData.js","components/ukeire-quiz/UkeireHistoryData.js","states/UkeireQuiz.js","models/LocalizedMessageChain.js","models/ReplayTurn.js","scripts/ParseTenhouReplay.js","scripts/ParseMajsoulReplay.js","states/ReplayAnalysis.js","components/utils/RandomGameState.js","components/utils/ConvertHand.js","components/utils/RCalculation.js","states/UtilsState.js","components/hand-explorer/ResultingHandInfo.js","components/hand-explorer/HandFutures.js","states/HandExplorer.js","scripts/ScoreCalculation.js","components/south-four-quiz/ScoreInput.js","components/south-four-quiz/GyakutenQuestion.js","models/SouthFourResultMessage.js","states/SouthFourQuiz.js","components/defense-trainer/SafetyHistoryData.js","components/defense-trainer/DefenseSettings.js","states/DefenseState.js","states/MainMenu.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","i18n","use","LanguageDetector","initReactI18next","init","resources","en","translations","values","one","two","three","four","five","six","seven","eight","nine","redFive","east","south","west","north","white","green","red","hidden","suits","characters","circles","bamboo","shuupai","winds","roundName","trainer","disclaimer","instructions","start","complete","newHandButtonLabel","loadButtonLabel","roundWind","seatWind","doraIndicator","copyHand","copied","load","wallEmpty","wallEmptyShuffle","playerNames","you","right","across","left","history","label","tenhouLinkText","concise","discard","acceptance","acceptance_plural","loweredShanten","optimal","optimalSpoiler","best","exceptionalNoten","furiten","furitenWarning","exhausted","draw","verbose","discards","discardCount","discardCount_plural","tilesLeft","tilesLeft_plural","settings","buttonLabel","tilesAllowed","honors","sanma","redFives","spoilers","shuffle","simulate","exceptions","minShanten","minShantenLimit","sort","blind","stats","info","ready","ready_plural","discards_plural","average","optimal_plural","optimalRate","efficiency","efficiency_plural","possible","possible_plural","overall","reset","confirmation","yes","no","credits","tilesPreLink","tilesLinkText","tilesPostLink","ccLinkText","shantenPreLink","shantenLinkText","shantenPostLink","menu","analyzer","allLast","explorer","utils","language","defense","placements","first","second","third","fourth","title","maxFu","showDifferences","loadInstructions","loadLabel","newLabel","escapeHeader","riichiHeader","higherHeader","question","riichiQuestion","ron","tsumo","han","fu","submit","wrong","tooMuch","correct","score","results","few","NaN","instructions1","instructions2","instructions3","instructions4","instructions5","instructions6","instructions7","instructions8","instructions9","URLplaceholder","invalidURL","downloadInstructions","roundSelect","playerSelect","previousTurn","nextTurn","nextIssue","turn","calls","callsSeparator","replayError","noName","startingHand","startingHand_plural","unknownAction","call","callSameShanten","ryuukyoku","playerRiichi","otherRiichi","fold","probablyFold","win","kandora","chosenSafety","correctSafety","bestSafety","safetyExplanations","zero","ten","eleven","twelve","thirteen","fourteen","fifteen","warning","shanten","ukeire","notableDiscards","allDiscards","discardInfo","expand","upgrades","expandUpgrades","finalHands","hand","safetyRatings","averagedSafetyRating","safetyRating","riichiCount","minTurns","tilesInHand","convertHeader","convertButtonLabel","ascii","emoji","stateHeader","playerLabel","points","stateButtonLabel","dora","ja","fr","pl","ru","chs","fallbackLng","ns","defaultNS","keySeparator","interpolation","defaultVariables","repeats","ALL_TILES_REMAINING","SUIT_CHARACTERS","ASCII_TILES","PLAYER_NAMES","SEAT_NAMES","SAFETY_RATING_EXPLANATIONS","ROUND_PARAMETERS","wind","number","RON_SCORES","nondealer","dealer","TSUMO_SCORES","PLACEMENTS","convertHandToTenhouString","handString","valuesInSuit","suit","i","value","j","convertHandToAsciiSymbols","result","length","convertHandToTileIndexArray","push","randomInt","max","min","arguments","undefined","Math","floor","random","getRandomItem","array","removeRandomItem","splice","shuffleArray","tmp","randomIndex","currentIndex","getShantenOffset","tiles","characterToSuit","character","images","redFiveMan","oneMan","twoMan","threeMan","fourMan","fiveMan","sixMan","sevenMan","eightMan","nineMan","redFivePin","onePin","twoPin","threePin","fourPin","fivePin","sixPin","sevenPin","eightPin","ninePin","redFiveSou","oneSou","twoSou","threeSou","fourSou","fiveSou","sixSou","sevenSou","eightSou","nineSou","back","haku","hatsu","chun","valueKeys","suitKeys","honorKeys","getTileAsText","t","index","concat","convertRedFives","slice","convertTilesToAsciiSymbols","convertIndexesToTenhouTiles","indexes","Array","fill","convertTenhouTilesToIndex","tenhouTiles","convertTenhouTileToIndex","map","tile","tenhouTile","base","tenhouToIndexLookup","convertStringTileToIndex","parseInt","charAt","Tile","props","useTranslation","displayTile","react_default","a","createElement","className","name","src","alt","onClick","Hand","Row","lastDraw","hasLastDraw","components_Tile","key","onTileClick","HistoryMessage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","collapsed","setState","data","ListGroupItem","messageRows","getMessage","split","message","Collapse","isOpen","getClassName","href","target","rel","React","Component","withTranslation","History","toggle","bind","assertThisInitialized","_this2","historyObject","components_HistoryMessage","Col","xs","sm","Button","color","ListGroup","Settings","threePlayer","extraConcise","reshuffle","onSettingChanged","Storage","savedSettings","localStorage","getItem","JSON","parse","onChange","event","numberString","numberInput","id","setItem","stringify","Container","Card","CardBody","Input","type","checked","Label","for","react_numeric_input_default","step","CopyButton","lastCopy","el","document","setAttribute","style","position","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","hasCopied","md","lg","LoadButton","getElementById","toLowerCase","offset","tryRegex","reverse","isNaN","ret","callback","regex","string","exec","InputGroup","placeholder","InputGroupAddon","addonType","DiscardPool","players","pools","_loop","seat","xl","riichiIndex","backgroundColor","count","wallCount","ValueTileDisplay","textAlign","StatsDisplay","toggleStats","toggleConfirm","statsCollapsed","confirmCollapsed","optimalDiscardRate","totalOptimalDiscards","totalDiscards","round","totalEfficiency","totalPossibleEfficiency","averageDiscards","totalTenpai","percent","achieved","total","onReset","generateHand","remainingTiles","availableTiles","tilePool","fillHand","tilesToFill","evaluateBestDiscard","ukeireObjects","o","bestUkeire","apply","toConsumableArray","bests","indexOf","evaluateDiscardSafety","opponentDiscards","tilesDiscardedAfterRiichi","riichiTile","safetyRanks","checkIfIsSuji","sujiA","sujiB","sujiAPassed","sujiBPassed","calculateDiscardUkeire","shantenFunction","baseShanten","convertedHand","handIndex","calculateUkeire","convertedTiles","addedTile","calculateUkeireUpgrades","baseUkeire","bestDiscard","newUkeire","resultingUkeire","calculateUkeireFromOnlyHand","existingTiles","completeSets","pair","partialSets","bestShanten","mininumShanten","calculateMinimumShanten","handToCheck","standardShanten","calculateStandardShanten","chiitoiShanten","pairCount","uniqueTiles","calculateChiitoitsuShanten","kokushiShanten","hasPair","calculateKokushiShanten","mininumShanten_","removeCompletedSets","removePotentialSets","currentShanten","SortedHand","Player","calledTiles","discardsAfterRiichi","player","LocalizedMessage","params","HistoryData","generateString","UkeireHistoryData","chosenTile","chosenUkeire","bestTile","handUkeire","drawnTile","mode","isFuriten","get","prototype","some","includes","UkeireQuiz","onSettingsChanged","onTileClicked","loadHand","onHandLoaded","optimalCount","achievedTotal","possibleTotal","isComplete","disclaimerSeen","savedStats","onNewHand","possibilities","unshift","numberOfPlayers","pickSeatWind","pop","pickRoundWind","allowedSuits","discardHand","generationResult","setNewHandState","getStartingTiles","_this3","historyData","simulatedDiscard","saveStats","loadData","_fillHand","logToHistory","text","_this4","ukeire_quiz_Settings","ukeire_quiz_StatsDisplay","resetStats","components_ValueTileDisplay","components_Hand","components_SortedHand","components_CopyButton","components_LoadButton","components_History","components_DiscardPool","LocalizedMessageChain","messages","appendMessage","prependMessage","getLineBreakString","generateArray","join","ReplayTurn","who","playerShanten","appendLocalizedMessage","appendLineBreak","rating","explanation","parseName","replayText","RegExp","decodeURIComponent","parseRound","roundText","parseStartingHand","whoRegex","turns","currentTurn","actionInfo","parseActionType","debugInfo","doraMatch","newDoraIndicator","discardIndex","analyzeDiscardEfficiency","analyzeDiscardSafety","copyFrom","discardTile","isInRiichi","tileDrawn","getTilesFromCall","callTiles","meld","padHand","riichi","paddedHand","riichiDeclared","end","disconnect","playerHand","riichis","totalSafety","safety","bestChoice","addSafetyMessage","addEfficiencyMessage","tenhouHand","convertTenhouHandToHand","letter","meldBinary","toString","padStart","substr","order","lines","shift","callRegex","discardRegex","drawRegex","winRegex","closedKanRegex","ryuukyokuRegex","currentPlayer","shantens","l","line","unescape","discardMatch","drawMatch","callMatch","closedKanMatch","tileRegexes","ReplayAnalysis","fileName","rounds","roundDropdownOpen","playerDropdownOpen","currentRound","URLfeedback","tenhou","onURLChanged","onFileChanged","onFileLoaded","toggleRoundDropdown","togglePlayerDropdown","URL","uuid","files","file","reader","FileReader","onload","readAsText","e","trim","games","ParseTenhouReplay","ParseMajsoulReplay","roundItems","playerItems","roundNames","roundTexts","DropdownItem","disabled","onRoundChoice","onPlayerChoice","messageArray","row","Dropdown","DropdownToggle","caret","DropdownMenu","Fragment","block","onPreviousTurn","onNextTurn","onNextIssue","symbols","RandomGameState","userSeat","generateState","maxPoints","pointsRemaining","ConvertHand","convertHandToDiscordEmoji","UtilsState","utils_ConvertHand","utils_RandomGameState","ResultingHandInfo","toggleUpgrades","toggleShanten","upgradesCollapsed","shantenCollapsed","upgradeTiles","reduce","upgradeResults","b","shantenResults","totalShantenUkeire","resultHand","HandFutures","u","infoObjects","newHand","showAll","filter","obj","find","other","handInfos","hand_explorer_ResultingHandInfo","HandExplorer","onShowToggled","hand_explorer_HandFutures","calculateBasicPoints","yakuman","pow","getPoints","basicPoints","roundPoints","ceil","ScoreInput","onHanChanged","onFuChanged","validateHan","maxHan","validateFu","onScoreSubmit","ronTarget","placementTarget","focus","blur","onBlur","onNumberChanged","GyakutenQuestion","action","placement","south_four_quiz_ScoreInput","generateJSX","SouthFourResultMessage","playerSeats","scores","feedback","requiredScore","SouthFourQuiz","loadErrorMessage","onSubmit","savedFu","generateNewQuiz","converted","seats","required","canBeEqual","newScores","sortedScores","lastIndexOf","findMinimumTsumoValue","findMinimumRonValue","previousFu","ListGroupItemHeading","onToggleDifferences","onLoadSituation","south_four_quiz_GyakutenQuestion","SafetyHistoryData","numberOfRiichis","minimumTurnsBeforeRiichi","DefenseState","chartCollapsed","riichiPlayers","playerSeat","finishResult","finishHand","minDiscards","maxDiscards","k","otherPlayer","takesTurnBefore","forEach","drawTilesToFourteen","discardSafestTile","discardMostEfficientTile","tileDiscardedAfterRiichi","tileCount","averageSafety","getAverageSafety","getTilesHiddenFromPlayer","visibleTiles","x","uselessTurns","hands","DefenseSettings","toggleChart","MainMenu","active","dropdownOpen","newLanguage","changeLanguage","page","states_UkeireQuiz","states_ReplayAnalysis","states_UtilsState","states_HandExplorer","states_SouthFourQuiz","states_DefenseState","onSetActivePage","toggleDropdown","ReactDOM","render","states_MainMenu","process","origin","addEventListener","fetch","response","contentType","headers","status","unregister","reload","checkValidServiceWorker"],"mappings":"0FAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC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","file":"static/js/main.2bec91af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1m.c081314e.png\";","module.exports = __webpack_public_path__ + \"static/media/2m.d00b1df2.png\";","module.exports = __webpack_public_path__ + \"static/media/3m.c3b75a41.png\";","module.exports = __webpack_public_path__ + \"static/media/4m.51005bb0.png\";","module.exports = __webpack_public_path__ + \"static/media/5m.00d81a73.png\";","module.exports = __webpack_public_path__ + \"static/media/0m.d35f5238.png\";","module.exports = __webpack_public_path__ + \"static/media/6m.83e712d4.png\";","module.exports = __webpack_public_path__ + \"static/media/7m.6a540b11.png\";","module.exports = __webpack_public_path__ + \"static/media/8m.6af317af.png\";","module.exports = __webpack_public_path__ + \"static/media/9m.0412dc6f.png\";","module.exports = __webpack_public_path__ + \"static/media/1s.5aeae6d9.png\";","module.exports = __webpack_public_path__ + \"static/media/2s.596f756e.png\";","module.exports = __webpack_public_path__ + \"static/media/3s.1c6169a8.png\";","module.exports = __webpack_public_path__ + \"static/media/4s.0cf383e1.png\";","module.exports = __webpack_public_path__ + \"static/media/5s.09e39568.png\";","module.exports = __webpack_public_path__ + \"static/media/0s.2f89f2f6.png\";","module.exports = __webpack_public_path__ + \"static/media/6s.910715ad.png\";","module.exports = __webpack_public_path__ + \"static/media/7s.c77ed1c4.png\";","module.exports = __webpack_public_path__ + \"static/media/8s.51023136.png\";","module.exports = __webpack_public_path__ + \"static/media/9s.06e7af9a.png\";","module.exports = __webpack_public_path__ + \"static/media/1p.fd6f688d.png\";","module.exports = __webpack_public_path__ + \"static/media/2p.6d548130.png\";","module.exports = __webpack_public_path__ + \"static/media/3p.888b5156.png\";","module.exports = __webpack_public_path__ + \"static/media/4p.b17495ea.png\";","module.exports = __webpack_public_path__ + \"static/media/5p.667eb58c.png\";","module.exports = __webpack_public_path__ + \"static/media/0p.7628416e.png\";","module.exports = __webpack_public_path__ + \"static/media/6p.0489204b.png\";","module.exports = __webpack_public_path__ + \"static/media/7p.0564992d.png\";","module.exports = __webpack_public_path__ + \"static/media/8p.ebeb61db.png\";","module.exports = __webpack_public_path__ + \"static/media/9p.e5f2b0e3.png\";","module.exports = __webpack_public_path__ + \"static/media/1z.0a542c2e.png\";","module.exports = __webpack_public_path__ + \"static/media/2z.208eca78.png\";","module.exports = __webpack_public_path__ + \"static/media/3z.9de55ea9.png\";","module.exports = __webpack_public_path__ + \"static/media/4z.13f1fb7d.png\";","module.exports = __webpack_public_path__ + \"static/media/5z.d15c0599.png\";","module.exports = __webpack_public_path__ + \"static/media/6z.076fcbd1.png\";","module.exports = __webpack_public_path__ + \"static/media/7z.58ef028c.png\";","module.exports = __webpack_public_path__ + \"static/media/back.bb753554.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import i18n from \"i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { en } from \"./translations/en\";\r\nimport { ja } from \"./translations/ja\";\r\nimport { fr } from \"./translations/fr\";\r\nimport { pl } from \"./translations/pl\";\r\nimport { ru } from \"./translations/ru\";\r\nimport { chs } from \"./translations/chs\";\r\n\r\ni18n\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    resources: {\r\n      en: en,\r\n      ja: ja,\r\n      fr: fr,\r\n      pl: pl,\r\n      ru: ru,\r\n      chs: chs\r\n    },\r\n    fallbackLng: \"en\",\r\n\r\n    ns: [\"translations\"],\r\n    defaultNS: \"translations\",\r\n    keySeparator: '.',\r\n    interpolation: {\r\n      defaultVariables: { repeats: \"0\" }\r\n    }\r\n  });\r\n\r\nexport default i18n;\r\n","export const en = {\r\n    translations: {\r\n        values: {\r\n            one: \"one\",\r\n            two: \"two\",\r\n            three: \"three\",\r\n            four: \"four\",\r\n            five: \"five\",\r\n            six: \"six\",\r\n            seven: \"seven\",\r\n            eight: \"eight\",\r\n            nine: \"nine\",\r\n            redFive: \"red five\",\r\n            east: \"east wind\",\r\n            south: \"south wind\",\r\n            west: \"west wind\",\r\n            north: \"north wind\",\r\n            white: \"white dragon\",\r\n            green: \"green dragon\",\r\n            red: \"red dragon\",\r\n            hidden: \"hidden tile\",\r\n        },\r\n        suits: {\r\n            characters: \"characters\",\r\n            circles: \"circles\",\r\n            bamboo: \"bamboo\"\r\n        },\r\n        shuupai: \"{{value}} of {{suit}}\",\r\n        winds: {\r\n            east: \"East\",\r\n            south: \"South\",\r\n            west: \"West\",\r\n            north: \"North\"\r\n        },\r\n        roundName: \"{{wind}} {{number}}-{{repeats}}\",\r\n        trainer: {\r\n            disclaimer: \"Disclaimer: This trainer will train your ability to maximize your hand's efficiency in the current turn. It won't help you maximize efficiency in future turns, or to learn when it's proper to ignore efficiency, or how to build value. Playing the way this trainer suggests in every hand is not the optimal way to play mahjong, but the are hands where you want to play this way. High level players don't always play like this, but all high level players CAN play like this. Make sure to supplement this training with further reading to learn when it might not be the best line of play, and check the settings for more targeted training.\",\r\n            instructions: \"Click the tile you want to discard.\",\r\n            start: \"Started a new hand: {{hand}}\",\r\n            complete: \"Your hand is now ready. Congratulations! Your efficiency was {{achieved}}/{{total}}, or {{percent}}%.\",\r\n            newHandButtonLabel: \"New Hand\",\r\n            loadButtonLabel: \"Load Hand\",\r\n            roundWind: \"Round Wind:\",\r\n            seatWind: \"Seat Wind:\",\r\n            doraIndicator: \"Dora Indicator:\",\r\n            copyHand: \"Copy Hand\",\r\n            copied: \"Copied!\",\r\n            error: {\r\n                load: \"Error: Couldn't understand provided hand\",\r\n                wallEmpty: \"Error: Not enough tiles to make a hand.\",\r\n                wallEmptyShuffle: \"There aren't enough tiles left in the wall to make a new hand. Shuffling.\"\r\n            },\r\n            playerNames: {\r\n                you: \"You\",\r\n                right: \"Shimocha\",\r\n                across: \"Toimen\",\r\n                left: \"Kamicha\"\r\n            }\r\n        },\r\n        history: {\r\n            label: \"Hand History\",\r\n            tenhouLinkText: \"[Accepted Tiles]\",\r\n            concise: {\r\n                discard: \"Discard: {{tile}}\",\r\n                acceptance: \" ({{count}} tile).\",\r\n                acceptance_plural: \" ({{count}} tiles).\",\r\n                loweredShanten: \" (went back in shanten).\",\r\n                optimal: \" Best:\",\r\n                optimalSpoiler: \" {{tile}}\",\r\n                best: \" That was the best choice!\",\r\n                exceptionalNoten: \" All of your winning tiles are in your hand, so you aren't tenpai yet.\",\r\n                furiten: \" Furiten.\",\r\n                furitenWarning: \" Be careful of future furiten.\",\r\n                exhausted: \" There are no tiles left in the wall. Better luck next time! \",\r\n                draw: \" Draw: {{tile}}. \"\r\n            },\r\n            verbose: {\r\n                discard: \"You chose to discard the {{tile}}, which\",\r\n                acceptance: \" results in {{count}} tile that can improve the hand.\",\r\n                acceptance_plural: \" results in {{count}} tiles that can improve the hand.\",\r\n                loweredShanten: \" increases your shanten - you are now further from ready.\",\r\n                optimal: \" The most efficient tile to discard\",\r\n                optimalSpoiler: \", the {{tile}}, \",\r\n                best: \" That was the best choice!\",\r\n                exceptionalNoten: \" Your hand is ready, but all of your winning tiles are in your hand. This doesn't count as ready in almost all rulesets, so you'll need to change your hand.\",\r\n                furiten: \" You are in furiten. You cannot win this hand by ron, because you have a winning tile in your discards.\",\r\n                furitenWarning: \" Be careful of future furiten. Some of the tiles that improve your hand are in your discards.\",\r\n                exhausted: \" There are no tiles left in the wall. Better luck next time! \",\r\n                draw: \" You drew the {{tile}}. \"\r\n            }\r\n        },\r\n        discards: {\r\n            label: \"Discard Pool\",\r\n            discardCount: \"You've discarded {{count}} tile.\",\r\n            discardCount_plural: \"You've discarded {{count}} tiles.\",\r\n            tilesLeft: \"There is {{count}} tile left in the wall.\",\r\n            tilesLeft_plural: \"There are {{count}} tiles left in the wall.\"\r\n        },\r\n        settings: {\r\n            buttonLabel: \"Settings\",\r\n            tilesAllowed: \"Tiles Allowed:\",\r\n            characters: \"Characters\",\r\n            circles: \"Circles\",\r\n            bamboo: \"Bamboo\",\r\n            honors: \"Honors\",\r\n            sanma: \"Three player rules\",\r\n            redFives: \"Number of Red Fives:\",\r\n            verbose: \"Verbose tile names (\\\"one of bamboo\\\" vs \\\"1s\\\")\",\r\n            concise: \"Concise history\",\r\n            spoilers: \"Show what the best option was\",\r\n            shuffle: \"Shuffle discarded tiles back into the wall after starting a new hand\",\r\n            simulate: \"Simulate other players discarding tiles\",\r\n            exceptions: \"Consider exception hands (Kokushi/Thirteen Orphans and Chiitoitsu/Seven Pairs)\",\r\n            minShanten: \"Minimum starting hand shanten:\",\r\n            minShantenLimit: \"(up to the number of allowed suits)\",\r\n            sort: \"Sort hand\",\r\n            blind: \"Conceal hand tiles\"\r\n        },\r\n        stats: {\r\n            buttonLabel: \"Statistics\",\r\n            info: \"These stats update every time you bring a hand to ready.\",\r\n            ready: \"Ready Hands: {{count}} hand\",\r\n            ready_plural: \"Ready Hands: {{count}} hands\",\r\n            discards: \"Tiles Discarded: {{count}} tile\",\r\n            discards_plural: \"Tiles Discarded: {{count}} tiles\",\r\n            average: \"Average Discards Until Ready: {{average}} discards\",\r\n            optimal: \"Optimal Discards: {{count}} discard\",\r\n            optimal_plural: \"Optimal Discards: {{count}} discards\",\r\n            optimalRate: \"Optimal Discard Rate: {{percent}}% ({{achieved}}/{{total}})\",\r\n            efficiency: \"Efficiency Acquired: {{count}} tile\",\r\n            efficiency_plural: \"Efficiency Acquired: {{count}} tiles\",\r\n            possible: \"Potential Efficiency Aquirable: {{count}} tile\",\r\n            possible_plural: \"Potential Efficiency Aquirable: {{count}} tiles\",\r\n            overall: \"Overall Efficiency: {{percent}}% ({{achieved}}/{{total}})\",\r\n            reset: \"Reset Stats\",\r\n            confirmation: \"Are you sure you want to reset all of your stats to zero? You cannot undo this action.\",\r\n            yes: \"Yes, reset!\",\r\n            no: \"No, don't reset!\"\r\n        },\r\n        credits: {\r\n            label: \"Credits\",\r\n            tilesPreLink: \"Tile images combined from \",\r\n            tilesLinkText: \"riichi-mahjong-tiles by FluffyStuff on Github\",\r\n            tilesPostLink: \", licensed under the \",\r\n            ccLinkText: \"Creative Commons Attribution 4.0 International License.\",\r\n            shantenPreLink: \"Shanten calculation algorithm adapted from \",\r\n            shantenLinkText: \"this C program collection.\",\r\n            shantenPostLink: \"\",\r\n        },\r\n        menu: {\r\n            trainer: \"Trainer\",\r\n            analyzer: \"Analyzer\",\r\n            allLast: \"All Last Trainer\",\r\n            explorer: \"Explorer\",\r\n            utils: \"Misc. Utils\",\r\n            language: \"Language\",\r\n            defense: \"Folding\"\r\n        },\r\n        allLast: {\r\n            placements: {\r\n                first: \"first\",\r\n                second: \"second\",\r\n                third: \"third\",\r\n                fourth: \"fourth\"\r\n            },\r\n            title: \"All Last Trainer\",\r\n            maxFu: \"Maximum Fu\",\r\n            showDifferences: \"Show Point Differences\",\r\n            loadInstructions: \"Enter comma-separated scores for East, South, West, and North, in that order, to load a situation.\",\r\n            loadLabel: \"Load Situation\",\r\n            newLabel: \"New Random Situation\",\r\n            info: \"It's currently All Last, the last hand in the match. You are in fourth. The scores are as follows:\",\r\n            escapeHeader: \"Escaping Fourth\",\r\n            riichiHeader: \"Riichi Declarations\",\r\n            higherHeader: \"Higher Placements\",\r\n            question: \"What is the minimum score you can {{action}} to get {{placement}}?\",\r\n            riichiQuestion: \"If {{player}} declares riichi, what is the minimum score you can {{action}} to get {{placement}}?\",\r\n            ron: \"ron {{target}} with \",\r\n            tsumo: \"tsumo\",\r\n            han: \"Han\",\r\n            fu: \"Fu\",\r\n            submit: \"Submit\",\r\n            wrong: \"Wrong! That score doesn't get you to {{placement}}! Highlight for the answer: \",\r\n            tooMuch: \"That score gets you to {{placement}}, but it's not the lowest possible. Highlight for the answer: \",\r\n            correct: \"Correct! That's the lowest score that gets you to {{placement}}!\",\r\n            score: \"{{han}} han {{fu}} fu\",\r\n            results: \"Results:\",\r\n            you: \"YOU\",\r\n            error: {\r\n                few: \"Error: Not enough scores provided.\",\r\n                NaN: \"Error: Could not understand the score for {{seat}}.\"\r\n            }\r\n        },\r\n        analyzer: {\r\n            instructions1: \"Instructions:\",\r\n            instructions2: \"Paste the URL for your replay into the text box.\",\r\n            instructions3: 'Then, right click the link that appears and choose \"Save As\" or \"Save Link As\".',\r\n            instructions4: 'Finally, click \"Browse...\" and upload the file you saved.',\r\n            instructions5: \"Alternatively, if you have a mjlog file on your computer, you can rename it to end in .zip.\",\r\n            instructions6: \"Then, upload the file contained within that zip.\",\r\n            instructions7: \"You can also just upload replay XML files directly if you have a program that fetches them for you.\",\r\n            instructions8: \"The disclaimer from the efficiency trainer applies here as well.\",\r\n            instructions9: \"For safety ratings, higher is better. 1 is the worst, and 15 is the best.\",\r\n            URLplaceholder: \"Replay URL\",\r\n            invalidURL: \"Invalid URL\",\r\n            downloadInstructions: \"Right click this link and choose Save As!\",\r\n            roundSelect: \"Select a Round\",\r\n            playerSelect: \"Change Player\",\r\n            previousTurn: \"Previous Turn\",\r\n            nextTurn: \"Next Turn\",\r\n            nextIssue: \"Next Issue\",\r\n            turn: \"{{round}}, Turn {{turn}}\",\r\n            discards: \"Tiles in your discards: {{symbols}} ({{tiles}})\",\r\n            calls: \"Your Calls: {{calls}}\",\r\n            callsSeparator: \", \",\r\n            tenhouLinkText: \"[Tenhou Ukeire Analysis]\",\r\n            replayError: \"Send me this replay, something broke.\",\r\n            noName: \"Unknown\",\r\n            startingHand: \"Your starting hand is {{hand}}. It's {{count}} tile from ready. The dora indicator is {{dora}}.\",\r\n            startingHand_plural: \"Your starting hand is {{hand}}. It's {{count}} tiles from ready. The dora indicator is {{dora}}.\",\r\n            unknownAction: \"Hey, this replay has something I don't account for. Please send me this replay so I can add it. {{debugInfo}}\",\r\n            call: \"You called the {{tile}} to complete {{meld}}. ({{hand}})\",\r\n            callSameShanten: \"That call didn't bring you closer to ready.\",\r\n            ryuukyoku: \"The round ended in a draw.\",\r\n            playerRiichi: \"You declared riichi. Ending analysis.\",\r\n            otherRiichi: \"Player {{number}} declared riichi. \",\r\n            fold: \"You are still {{shanten}} tiles from ready, so you should fold.\",\r\n            probablyFold: \"You are one tile from ready. You should consider folding.\",\r\n            win: \"Player {{number}} won the round.\",\r\n            kandora: \"The new dora indicator is the {{tile}}.\",\r\n            draw: \"You drew the {{tile}}. ({{hand}})\",\r\n            chosenSafety: \"The {{tile}}'s safety rating is {{rating}}. ({{- explanation}}) \",\r\n            correctSafety: \"That was the safest tile.\",\r\n            bestSafety: \"Safest tile: {{tile}}, with a safety rating of {{rating}}. ({{- explanation}})\",\r\n            safetyExplanations: {\r\n                zero: \"You shouldn't see this message. Tell me if you do.\",\r\n                one: \"non-suji 4/5/6\",\r\n                two: \"non-suji 3/7\",\r\n                three: \"non-suji 2/8\",\r\n                four: \"one-chance\",\r\n                five: \"non-suji 1/9\",\r\n                six: \"first honor tile\",\r\n                seven: \"suji 3/7\",\r\n                eight: \"suji 2/8\",\r\n                nine: \"suji 4/5/6\",\r\n                ten: \"second honor tile\",\r\n                eleven: \"first suji terminal\",\r\n                twelve: \"second suji terminal\",\r\n                thirteen: \"third suji terminal / third honor\",\r\n                fourteen: \"fourth suji terminal / fourth honor\",\r\n                fifteen: \"genbutsu, 100% safe\"\r\n            }\r\n        },\r\n        explorer: {\r\n            warning: \"Warning: Loading a hand may cause the page to hang for 5-10 seconds, or more if you have an older computer, depending on the complexity of the hand. Loading a hand will show all of the ukeire and upgrade possibilities for each discard, even ones that go back in shanten. By default, options that are strictly worse than another option won't be displayed, but you can press the button below to change that. If you only need ukeire information, tenhou.net/2/ will suffice.\",\r\n            shanten: \"Shanten: The number of tiles away from ready your hand is.\",\r\n            ukeire: \"Ukeire: The number of tiles that reduce your shanten.\",\r\n            notableDiscards: \"Show Only Notable Discards\",\r\n            allDiscards: \"Show All Possible Discards\",\r\n            discardInfo: {\r\n                discard: \"Discarding the {{tile}}:\",\r\n                shanten: \"Shanten: {{count}}\",\r\n                ukeire: \"Ukeire: {{count}} ({{tiles}})\",\r\n                expand: \"Show Next Shanten's Ukeire\",\r\n                draw: \"Draw {{draw}}, discard {{discard}}: {{count}} ukeire\",\r\n                average: \"Average: {{average}}\",\r\n                upgrades: \"Tiles that increase ukeire: {{count}} ({{tiles}})\",\r\n                expandUpgrades: \"Show Upgrade Results\"\r\n            }\r\n        },\r\n        defense: {\r\n            instructions: \"Discard the safest tile.\",\r\n            finalHands: \"Final Hands:\",\r\n            hand: \"{{player}}: {{hand}}\",\r\n            safetyRatings: \"Safety Ratings\",\r\n            averagedSafetyRating: \"Against multiple riichis, the safety ratings will be averaged together, and the highest chosen as best.\",\r\n            safetyRating: \"{{rating}}: {{- explanation}}\",\r\n            riichiCount: \"Number of riichis: \",\r\n            minTurns: \"Minimum turns before a riichi is declared: \",\r\n            tilesInHand: \"Number of tiles in hand: \"\r\n        },\r\n        utils: {\r\n            convertHeader: \"Hand Conversion\",\r\n            convertButtonLabel: \"Convert Hand\",\r\n            ascii: \"ASCII:\",\r\n            emoji: \"Emoji:\",\r\n            stateHeader: \"Random Game State Generator\",\r\n            playerLabel: \"{{seat}} Player {{you}}\",\r\n            points: \"Points:\",\r\n            discards: \"Discards:\",\r\n            stateButtonLabel: \"Generate New State\",\r\n            info: \"It's turn {{turn}} in {{round}}. You are the {{seat}} player.\",\r\n            dora: \"The dora indicator is the {{tile}}.\"\r\n        }\r\n    }\r\n}","export const ja = {\r\n    translations: {\r\n        values: {\r\n            one: \"一\",\r\n            two: \"二\",\r\n            three: \"三\",\r\n            four: \"四\",\r\n            five: \"五\",\r\n            six: \"六\",\r\n            seven: \"七\",\r\n            eight: \"八\",\r\n            nine: \"九\",\r\n            redFive: \"赤五\",\r\n            east: \"東\",\r\n            south: \"南\",\r\n            west: \"西\",\r\n            north: \"北\",\r\n            white: \"白\",\r\n            green: \"發\",\r\n            red: \"中\",\r\n            hidden: \"hidden tile\",\r\n        },\r\n        suits: {\r\n            characters: \"萬\",\r\n            circles: \"筒\",\r\n            bamboo: \"索\"\r\n        },\r\n        shuupai: \"{{value}}{{suit}}\",\r\n        winds: {\r\n            east: \"東\",\r\n            south: \"南\",\r\n            west: \"西\",\r\n            north: \"北\"\r\n        },\r\n        roundName: \"{{wind}}{{number}}局{{repeats}}本場\",\r\n        trainer: {\r\n            disclaimer: \"Disclaimer: This trainer will train your ability to maximize your hand's efficiency in the current turn. It won't help you maximize efficiency in future turns, or to learn when it's proper to ignore efficiency, or how to build value. Playing the way this trainer suggests in every hand is not the optimal way to play mahjong, but the are hands where you want to play this way. High level players don't always play like this, but all high level players CAN play like this. Make sure to supplement this training with further reading to learn when it might not be the best line of play, and check the settings for more targeted training.\",\r\n            instructions: \"打ちたいの牌をクリックしてください。\",\r\n            start: \"新し手牌を始まりました： {{hand}}\",\r\n            complete: \"手が聴牌になりました。おめでとう！あなたの効率は{{achieved}}/{{total}}か{{percent}}%。\",\r\n            newHandButtonLabel: \"新し手牌\",\r\n            loadButtonLabel: \"手牌をロード\",\r\n            roundWind: \"場風:\",\r\n            seatWind: \"自風:\",\r\n            doraIndicator: \"ドラ表示:\",\r\n            copyHand: \"手牌をコピー\",\r\n            copied: \"コピーしました！\",\r\n            error: {\r\n                load: \"Error: Couldn't understand provided hand\",\r\n                wallEmpty: \"Error: Not enough tiles to make a hand.\",\r\n                wallEmptyShuffle: \"There aren't enough tiles left in the wall to make a new hand. Shuffling.\"\r\n            },\r\n            playerNames: {\r\n                you: \"私\",\r\n                right: \"下家\",\r\n                across: \"対面\",\r\n                left: \"上家\"\r\n            }\r\n        },\r\n        history: {\r\n            label: \"Hand History\",\r\n            tenhouLinkText: \"[Accepted Tiles]\",\r\n            concise: {\r\n                discard: \"　捨て牌: {{tile}}\",\r\n                acceptance: \" ({{count}} tile).\",\r\n                loweredShanten: \" (went back in shanten).\",\r\n                optimal: \" 最高捨て牌:\",\r\n                optimalSpoiler: \" {{tile}}\",\r\n                best: \"　それは一番いい選択でした！\",\r\n                exceptionalNoten: \" All of your winning tiles are in your hand, so you aren't tenpai yet.\",\r\n                furiten: \" フリテン.\",\r\n                furitenWarning: \"フリテンをきを付けてください。\",\r\n                exhausted: \" There are no tiles left in the wall. Better luck next time! \",\r\n                draw: \" ツモ: {{tile}}. \"\r\n            },\r\n            verbose: {\r\n                discard: \"You chose to discard the {{tile}}, which\",\r\n                acceptance: \" results in {{count}} tile that can improve the hand.\",\r\n                loweredShanten: \" increases your shanten - you are now further from ready.\",\r\n                optimal: \" The most efficient tile to discard\",\r\n                optimalSpoiler: \", the {{tile}}, \",\r\n                best: \" That was the best choice!\",\r\n                exceptionalNoten: \" Your hand is ready, but all of your winning tiles are in your hand. This doesn't count as ready in almost all rulesets, so you'll need to change your hand.\",\r\n                furiten: \" You are in furiten. You cannot win this hand by ron, because you have a winning tile in your discards.\",\r\n                furitenWarning: \" Be careful of future furiten. Some of the tiles that improve your hand are in your discards.\",\r\n                exhausted: \" There are no tiles left in the wall. Better luck next time! \",\r\n                draw: \" You drew the {{tile}}. \"\r\n            }\r\n        },\r\n        discards: {\r\n            label: \"河\",\r\n            discardCount: \"You've discarded {{count}} tile.\",\r\n            tilesLeft: \"山に{{count}}枚残ります。\",\r\n        },\r\n        settings: {\r\n            buttonLabel: \"設定\",\r\n            tilesAllowed: \"Tiles Allowed:\",\r\n            characters: \"萬子\",\r\n            circles: \"筒子\",\r\n            bamboo: \"索子\",\r\n            honors: \"字牌\",\r\n            sanma: \"三麻\",\r\n            redFives: \"Number of Red Fives:\",\r\n            verbose: \"Verbose tile names (\\\"one of bamboo\\\" vs \\\"1s\\\")\",\r\n            concise: \"Concise history\",\r\n            spoilers: \"Show what the best option was\",\r\n            shuffle: \"Shuffle discarded tiles back into the wall after starting a new hand\",\r\n            simulate: \"Simulate other players discarding tiles\",\r\n            exceptions: \"Consider exception hands (Kokushi/Thirteen Orphans and Chiitoitsu/Seven Pairs)\",\r\n            minShanten: \"Minimum starting hand shanten:\",\r\n            minShantenLimit: \"(up to the number of allowed suits)\",\r\n            sort: \"自動理牌\",\r\n            blind: \"Conceal hand tiles\"\r\n        },\r\n        stats: {\r\n            buttonLabel: \"統計\",\r\n            info: \"These stats update every time you bring a hand to ready.\",\r\n            ready: \"Ready Hands: {{count}} hand\",\r\n            discards: \"Tiles Discarded: {{count}} tile\",\r\n            average: \"Average Discards Until Ready: {{average}} discards\",\r\n            optimal: \"Optimal Discards: {{count}} discard\",\r\n            optimalRate: \"Optimal Discard Rate: {{percent}}% ({{achieved}}/{{total}})\",\r\n            efficiency: \"Efficiency Acquired: {{count}} tile\",\r\n            possible: \"Potential Efficiency Aquirable: {{count}} tile\",\r\n            overall: \"Overall Efficiency: {{percent}}% ({{achieved}}/{{total}})\",\r\n            reset: \"Reset Stats\",\r\n            confirmation: \"Are you sure you want to reset all of your stats to zero? You cannot undo this action.\",\r\n            yes: \"はい、リセットをして下さい！\",\r\n            no: \"いいえ、リセットをしてないで下さい！\"\r\n        },\r\n        credits: {\r\n            label: \"Credits\",\r\n            tilesPreLink: \"Tile images combined from \",\r\n            tilesLinkText: \"riichi-mahjong-tiles by FluffyStuff on Github\",\r\n            tilesPostLink: \", licensed under the \",\r\n            ccLinkText: \"Creative Commons Attribution 4.0 International License.\",\r\n            shantenPreLink: \"Shanten calculation algorithm adapted from \",\r\n            shantenLinkText: \"this C program collection.\",\r\n            shantenPostLink: \"\",\r\n        },\r\n        menu: {\r\n            trainer: \"Trainer\",\r\n            analyzer: \"Analyzer\",\r\n            allLast: \"All Last Trainer\",\r\n            explorer: \"Explorer\",\r\n            utils: \"Misc. Utils\",\r\n            language: \"言語\",\r\n            defense: \"ベタ降り\"\r\n        },\r\n        allLast: {\r\n            placements: {\r\n                first: \"一位\",\r\n                second: \"二位\",\r\n                third: \"三位\",\r\n                fourth: \"四位\"\r\n            },\r\n            title: \"All Last Trainer\",\r\n            maxFu: \"Maximum Fu\",\r\n            showDifferences: \"Show Point Differences\",\r\n            loadInstructions: \"Enter comma-separated scores for East, South, West, and North, in that order, to load a situation.\",\r\n            loadLabel: \"Load Situation\",\r\n            newLabel: \"New Random Situation\",\r\n            info: \"It's currently All Last, the last hand in the match. You are in fourth. The scores are as follows:\",\r\n            escapeHeader: \"Escaping Fourth\",\r\n            riichiHeader: \"Riichi Declarations\",\r\n            higherHeader: \"Higher Placements\",\r\n            question: \"What is the minimum score you can {{action}} to get {{placement}}?\",\r\n            riichiQuestion: \"If {{player}} declares riichi, what is the minimum score you can {{action}} to get {{placement}}?\",\r\n            ron: \"ron {{target}} with \",\r\n            tsumo: \"tsumo\",\r\n            han: \"飜\",\r\n            fu: \"符\",\r\n            submit: \"Submit\",\r\n            wrong: \"Wrong! That score doesn't get you to {{placement}}! Highlight for the answer: \",\r\n            tooMuch: \"That score gets you to {{placement}}, but it's not the lowest possible. Highlight for the answer: \",\r\n            correct: \"Correct! That's the lowest score that gets you to {{placement}}!\",\r\n            score: \"{{fu}}符{{han}}飜\",\r\n            results: \"Results:\",\r\n            you: \"YOU\",\r\n            error: {\r\n                few: \"Error: Not enough scores provided.\",\r\n                NaN: \"Error: Could not understand the score for {{seat}}.\"\r\n            }\r\n        },\r\n        analyzer: {\r\n            instructions1: \"Instructions:\",\r\n            instructions2: \"Paste the URL for your replay into the text box.\",\r\n            instructions3: 'Then, right click the link that appears and choose \"Save As\" or \"Save Link As\".',\r\n            instructions4: 'Finally, click \"Browse...\" and upload the file you saved.',\r\n            instructions5: \"Alternatively, if you have a mjlog file on your computer, you can rename it to end in .zip.\",\r\n            instructions6: \"Then, upload the file contained within that zip.\",\r\n            instructions7: \"You can also just upload replay XML files directly if you have a program that fetches them for you.\",\r\n            instructions8: \"The disclaimer from the efficiency trainer applies here as well.\",\r\n            instructions9: \"For safety ratings, higher is better. 1 is the worst, and 15 is the best.\",\r\n            URLplaceholder: \"Tenhou Replay URL\",\r\n            invalidURL: \"Invalid URL\",\r\n            downloadInstructions: \"Right click this link and choose Save As!\",\r\n            roundSelect: \"Select a Round\",\r\n            playerSelect: \"Change Player\",\r\n            previousTurn: \"Previous Turn\",\r\n            nextTurn: \"Next Turn\",\r\n            nextIssue: \"Next Issue\",\r\n            turn: \"{{round}}, Turn {{turn}}\",\r\n            discards: \"Tiles in your discards: {{symbols}} ({{tiles}})\",\r\n            calls: \"Your Calls: {{calls}}\",\r\n            callsSeparator: \", \",\r\n            tenhouLinkText: \"[Tenhou Ukeire Analysis]\",\r\n            replayError: \"Send me this replay, something broke.\",\r\n            noName: \"Unknown\",\r\n            startingHand: \"Your starting hand is {{hand}}. It's {{count}} tile from ready. The dora indicator is {{dora}}.\",\r\n            unknownAction: \"Hey, this replay has something I don't account for. Please send me this replay so I can add it. {{debugInfo}}\",\r\n            call: \"You called the {{tile}} to complete {{meld}}. ({{hand}})\",\r\n            callSameShanten: \"That call didn't bring you closer to ready.\",\r\n            ryuukyoku: \"The round ended in a draw.\",\r\n            playerRiichi: \"You declared riichi. Ending analysis.\",\r\n            otherRiichi: \"Player {{number}} declared riichi. \",\r\n            fold: \"You are still {{shanten}} tiles from ready, so you should fold.\",\r\n            probablyFold: \"You are one tile from ready. You should consider folding.\",\r\n            win: \"Player {{number}} won the round.\",\r\n            kandora: \"The new dora indicator is the {{tile}}.\",\r\n            draw: \"You drew the {{tile}}. ({{hand}})\",\r\n            chosenSafety: \"The {{tile}}'s safety rating is {{rating}}. ({{- explanation}}) \",\r\n            correctSafety: \"That was the safest tile.\",\r\n            bestSafety: \"Safest tile: {{tile}}, with a safety rating of {{rating}}. ({{- explanation}})\",\r\n            safetyExplanations: {\r\n                zero: \"You shouldn't see this message. Tell me if you do.\",\r\n                one: \"無スジ4/5/6\",\r\n                two: \"無スジ3/7\",\r\n                three: \"無スジ2/8\",\r\n                four: \"one-chance\",\r\n                five: \"無スジ1/9\",\r\n                six: \"first 字牌\",\r\n                seven: \"筋3/7\",\r\n                eight: \"筋2/8\",\r\n                nine: \"筋4/5/6\",\r\n                ten: \"second 字牌\",\r\n                eleven: \"first suji 老頭牌\",\r\n                twelve: \"second suji 老頭牌\",\r\n                thirteen: \"third suji 老頭牌 / third 字牌\",\r\n                fourteen: \"fourth suji 老頭牌 / fourth 字牌\",\r\n                fifteen: \"現物\"\r\n            }\r\n        },\r\n        explorer: {\r\n            warning: \"Warning: Loading a hand may cause the page to hang for 5-10 seconds, or more if you have an older computer, depending on the complexity of the hand. Loading a hand will show all of the ukeire and upgrade possibilities for each discard, even ones that go back in shanten. By default, options that are strictly worse than another option won't be displayed, but you can press the button below to change that. If you only need ukeire information, tenhou.net/2/ will suffice.\",\r\n            shanten: \"向聴：　聴牌までの近さを数える単位。\",\r\n            ukeire: \"Ukeire: The number of tiles that reduce your shanten.\",\r\n            notableDiscards: \"Show Only Notable Discards\",\r\n            allDiscards: \"Show All Possible Discards\",\r\n            discardInfo: {\r\n                discard: \"Discarding the {{tile}}:\",\r\n                shanten: \"{{count}}向聴\",\r\n                ukeire: \"Ukeire: {{count}} ({{tiles}})\",\r\n                expand: \"Show Next Shanten's Ukeire\",\r\n                draw: \"Draw {{draw}}, discard {{discard}}: {{count}} ukeire\",\r\n                average: \"Average: {{average}}\",\r\n                upgrades: \"Tiles that increase ukeire: {{count}} ({{tiles}})\",\r\n                expandUpgrades: \"Show Upgrade Results\"\r\n            }\r\n        },\r\n        defense: {\r\n            instructions: \"Discard the safest tile.\",\r\n            finalHands: \"Final Hands:\",\r\n            hand: \"{{player}}: {{hand}}\",\r\n            safetyRatings: \"Safety Ratings\",\r\n            averagedSafetyRating: \"Against multiple riichis, the safety ratings will be averaged together, and the highest chosen as best.\",\r\n            safetyRating: \"{{rating}}: {{- explanation}}\",\r\n            riichiCount: \"Number of riichis: \",\r\n            minTurns: \"Minimum turns before a riichi is declared: \",\r\n            tilesInHand: \"Number of tiles in hand: \"\r\n        },\r\n        utils: {\r\n            convertHeader: \"Hand Conversion\",\r\n            convertButtonLabel: \"Convert Hand\",\r\n            ascii: \"ASCII:\",\r\n            emoji: \"Emoji:\",\r\n            stateHeader: \"Random Game State Generator\",\r\n            playerLabel: \"{{seat}} Player {{you}}\",\r\n            points: \"Points:\",\r\n            discards: \"Discards:\",\r\n            stateButtonLabel: \"Generate New State\",\r\n            info: \"It's turn {{turn}} in {{round}}. You are the {{seat}} player.\",\r\n            dora: \"The dora indicator is the {{tile}}.\"\r\n        }\r\n    }\r\n}\r\n","export const fr = {\r\n    translations: {\r\n        values: {\r\n            one: \"un\",\r\n            two: \"deux\",\r\n            three: \"trois\",\r\n            four: \"quatre\",\r\n            five: \"cinq\",\r\n            six: \"six\",\r\n            seven: \"sept\",\r\n            eight: \"huit\",\r\n            nine: \"neuf\",\r\n            redFive: \"cinq rouge\",\r\n            east: \"vent est\",\r\n            south: \"vent sud\",\r\n            west: \"vent ouest\",\r\n            north: \"vent nord\",\r\n            white: \"dragon blanc\",\r\n            green: \"dragon vert\",\r\n            red: \"dragon rouge\",\r\n            hidden: \"tuile cachée\",\r\n        },\r\n        suits: {\r\n            characters: \"caractères\",\r\n            circles: \"cercles\",\r\n            bamboo: \"bambous\"\r\n        },\r\n        shuupai: \"{{value}} de {{suit}}\",\r\n        winds: {\r\n            east: \"Est\",\r\n            south: \"Sud\",\r\n            west: \"Ouest\",\r\n            north: \"Nord\"\r\n        },\r\n        roundName: \"{{wind}} {{number}}-{{repeats}}\",\r\n        trainer: {\r\n            disclaimer: \"Avertissement : Ce programme sert à entraîner votre capacité à maximiser l'efficacité de votre main dans une main. Cela ne vous aidera pas à maximiser votre efficacité dans les mains futures, ni à apprendre quand il convient d'ignorer l'efficacité ou comment créer de la valeur. Jouer comme ce programme le suggère dans chaque main n'est pas la meilleure façon de jouer au mahjong, mais certaines mains vous demanderons d'être capable de jouer de cette façon. Les joueurs de haut niveau ne jouent pas toujours comme ça, mais tous les joueurs de haut niveau PEUVENT jouer comme ça. Assurez-vous de compléter cette formation par une plus ample documentation pour savoir quand ce n'est pas la meilleure stratégie, et vérifiez les réglages pour un entraînement plus ciblé.\",\r\n            instructions: \"Cliquez sur la tuile que vous souhaitez défausser.\",\r\n            start: \"Vous avez débuté une nouvelle main : {{hand}}\",\r\n            complete: \"Votre main est maintenant prête. Félicitation ! Votre efficacité a été de {{achieved}}/{{total}}, soit {{percent}}%.\",\r\n            newHandButtonLabel: \"Nouvelle main\",\r\n            loadButtonLabel: \"Charger une main\",\r\n            roundWind: \"Vent du tour :\",\r\n            seatWind: \"Vent du joueur :\",\r\n            doraIndicator: \"Indicateur de dora :\",\r\n            copyHand: \"Copier la main\",\r\n            copied: \"Copié !\",\r\n            error: {\r\n                load: \"Erreur : Impossible de comprendre la main fournie.\",\r\n                wallEmpty: \"Erreur : Pas assez de tuiles pour former une main.\",\r\n                wallEmptyShuffle: \"Il ne reste plus assez de tuiles dans le mur pour former une main. Mélange en cours...\"\r\n            },\r\n            playerNames: {\r\n                you: \"Vous\",\r\n                right: \"Shimocha\",\r\n                across: \"Toimen\",\r\n                left: \"Kamicha\"\r\n            }\r\n        },\r\n        history: {\r\n            label: \"Historique des mains\",\r\n            tenhouLinkText: \"[Tuiles acceptées]\",\r\n            concise: {\r\n                discard: \"Défausse : {{tile}}\",\r\n                acceptance: \" ({{count}} tuile).\",\r\n                acceptance_plural: \" ({{count}} tuiles).\",\r\n                loweredShanten: \" (a abaissé le shanten).\",\r\n                optimal: \" Meilleur :\",\r\n                optimalSpoiler: \" {{tile}}\",\r\n                best: \" Il s'agissait du meilleur choix !\",\r\n                exceptionalNoten: \" Toutes vos tuiles gagnantes se trouvent dans votre main ; vous n'êtes donc pas encore tenpai.\",\r\n                furiten: \" Furiten.\",\r\n                furitenWarning: \" Méfiez-vous d'un furiten à venir.\",\r\n                exhausted: \" Il ne reste plus aucune tuile dans le mur. Vous aurez plus de chance la prochaine fois ! \",\r\n                draw: \" Pioche : {{tile}}. \"\r\n            },\r\n            verbose: {\r\n                discard: \"Vous avez choisi de défausser le {{tile}}, ce qui\",\r\n                acceptance: \" laisse {{count}} tuile pouvant améliorer votre main.\",\r\n                acceptance_plural: \" laisse {{count}} tuiles pouvant améliorer votre main.\",\r\n                loweredShanten: \" a abaissé votr shanten ; votre main est maintenant plus loin d'être prête.\",\r\n                optimal: \" La tuile la plus efficace à défausser\",\r\n                optimalSpoiler: \", le {{tile}}, \",\r\n                best: \" Il s'agissait du meilleur choix !\",\r\n                exceptionalNoten: \" Votre main est prête, mais toutes vos tuiles gagnantes sont dans votre main. Cela ne compte pas comme prêt dans presque toutes les règles, vous devrez donc changer votre main.\",\r\n                furiten: \" Vous êtes en état de furiten. Vous ne pouvez pas gagner cette main par ron, car l'une de vos tuiles gagnantes se trouve dans votre défausse.\",\r\n                furitenWarning: \" Méfiez-vous d'un futur furiten. Certaines tuiles qui amélioreraient votre main sont déjà dans votre défausse.\",\r\n                exhausted: \" Il ne reste plus aucune tuile dans le mur. Vous aurez plus de chance la prochaine fois ! \",\r\n                draw: \" Vous avez pioché un {{tile}}. \"\r\n            }\r\n        },\r\n        discards: {\r\n            label: \"Défausse\",\r\n            discardCount: \"Vous avez défaussé {{count}} tuile.\",\r\n            discardCount_plural: \"Vous avez défaussé {{count}} tuiles.\",\r\n            tilesLeft: \"Il reste {{count}} tuile dans le mur.\",\r\n            tilesLeft_plural: \"Il reste {{count}} tuiles dans le mur.\"\r\n        },\r\n        settings: {\r\n            buttonLabel: \"Réglages\",\r\n            tilesAllowed: \"Tuiles autorisées :\",\r\n            characters: \"Caractères\",\r\n            circles: \"Cercles\",\r\n            bamboo: \"Bambous\",\r\n            honors: \"Honneurs\",\r\n            sanma: \"Règles du mahjong à 3 joueurs\",\r\n            redFives: \"Nombre de cinq rouges:\",\r\n            verbose: \"Nom complet des tuiles (\\\"un de bambou\\\" ou \\\"1s\\\")\",\r\n            concise: \"Historique abrégé\",\r\n            spoilers: \"Montrer quelle était la meilleure option\",\r\n            shuffle: \"Remélanger les tuiles défaussées dans le mur avant de commencer une nouvelle main\",\r\n            simulate: \"Simuler les défausses d'autres joueurs\",\r\n            exceptions: \"Prendre en compte les exceptions (Kokushi/Treize Orphelins et Chiitoitsu/Sept Paires)\",\r\n            minShanten: \"Shanten minimal de départ :\",\r\n            minShantenLimit: \"(maximum : nombre de familles autorisées)\",\r\n            sort: \"Trier la main\",\r\n            blind: \"Cacher les tuiles de la main\"\r\n        },\r\n        stats: {\r\n            buttonLabel: \"Statistiques\",\r\n            info: \"Ces statistiques sont mises à jour à chaque fois que vous formez une main prête\",\r\n            ready: \"Mains prêtes : {{count}} main\",\r\n            ready_plural: \"Mains prêtes : {{count}} mains\",\r\n            discards: \"Tuiles défaussées : {{count}} tuile\",\r\n            discards_plural: \"Tuiles défaussées : {{count}} tuiles\",\r\n            average: \"Moyenne de défausses avant tenpai : {{average}} défausses\",\r\n            optimal: \"Défausses optimales : {{count}} défausse\",\r\n            optimal_plural: \"Défausses optimales : {{count}} défausses\",\r\n            optimalRate: \"Taux de défausses optimales : {{percent}}% ({{achieved}}/{{total}})\",\r\n            efficiency: \"Éfficacité acquise: {{count}} tuile\",\r\n            efficiency_plural: \"Éfficacité acquise: {{count}} tuiles\",\r\n            possible: \"Éfficacité potentiellement acquérable : {{count}} tuile\",\r\n            possible_plural: \"Éfficacité potentiellement acquérable : {{count}} tuiles\",\r\n            overall: \"Éfficacité globale : {{percent}}% ({{achieved}}/{{total}})\",\r\n            reset: \"Réinitialiser les statistiques\",\r\n            confirmation: \"Êtes-vous certain de vouloir remettre les statistiques à zéro ? Cette action est irréversible.\",\r\n            yes: \"Oui, réinitialiser !\",\r\n            no: \"Non, ne pas réinitialiser !\"\r\n        },\r\n        credits: {\r\n            label: \"Crédits\",\r\n            tilesPreLink: \"Les images des tuiles proviennent de \",\r\n            tilesLinkText: \"riichi-mahjong-tiles par FluffyStuff sur Github\",\r\n            tilesPostLink: \", sous licence \",\r\n            ccLinkText: \"Creative Commons Attribution 4.0 International License.\",\r\n            shantenPreLink: \"Algorithme de calcul de shanten adapté d'après \",\r\n            shantenLinkText: \"cet ensemble de programmes C.\",\r\n            shantenPostLink: \"\",\r\n        },\r\n        menu: {\r\n            trainer: \"Entraînement\",\r\n            analyzer: \"Analyse\",\r\n            allLast: \"Entraînement Oorasu\",\r\n            explorer: \"Explorateur\",\r\n            utils: \"Utilitaires\",\r\n            language: \"Langue\",\r\n            defense: \"Betaori\"\r\n        },\r\n        allLast: {\r\n            placements: {\r\n                first: \"premier\",\r\n                second: \"deuxième\",\r\n                third: \"troisième\",\r\n                fourth: \"quatrième\"\r\n            },\r\n            title: \"Entraînement Oorasu\",\r\n            maxFu: \"Fu maximal\",\r\n            showDifferences: \"Montrer les différences de points\",\r\n            loadInstructions: \"Entrez les scores de Est, Sud, Ouest et Nord, dans cet ordre, séparés par des virgules pour initialiser une situation.\",\r\n            loadLabel: \"Charger une situation\",\r\n            newLabel: \"Nouvelle situation aléatoire\",\r\n            info: \"C'est le Oorasu, la dernière main de la partie. Vous êtes à la quatrième place. Les scores sont comme suit :\",\r\n            escapeHeader: \"Éviter la quatrième place\",\r\n            riichiHeader: \"Déclarations de riichi\",\r\n            higherHeader: \"Bonnes positions\",\r\n            question: \"Quel est le score minimum que vous devez marquer par {{action}} afin de vous placer en {{placement}} ?\",\r\n            riichiQuestion: \"Si {{player}} déclare riichi, quel est le score minimum que vous devez marquer par {{action}} afin de vous placer en {{placement}} position ?\",\r\n            ron: \"ron {{target}} avec \",\r\n            tsumo: \"tsumo\",\r\n            han: \"Han\",\r\n            fu: \"Fu\",\r\n            submit: \"Vérifier\",\r\n            wrong: \"Faux ! Ce score ne vous amène pas en {{placement}} position ! Surlignez pour avoir la réponse : \",\r\n            tooMuch: \"Ce score vous amène en {{placement}} position, mais ce n'est pas le plus bas possible. Surlignez pour avoir la réponse : \",\r\n            correct: \"Correct ! Il s'agit du score le plus bas qui vous amène en {{placement}} position !\",\r\n            score: \"{{han}} han {{fu}} fu\",\r\n            results: \"Résultats :\",\r\n            you: \"VOUS\",\r\n            error: {\r\n                few: \"Erreur : Il n'y a pas assez de scores.\",\r\n                NaN: \"Erreur : Impossible de comprendre le score de {{seat}}.\"\r\n            }\r\n        },\r\n        analyzer: {\r\n            instructions1: \"Instructions :\",\r\n            instructions2: \"Copiez l'URL de votre replay dans le champ.\",\r\n            instructions3: 'Puis, faites un clic droit sur le lien qui apparaît et choisissez \"Enregistrer sous...\" ou \"Enregistrer la cible du lien sous...\".',\r\n            instructions4: 'Enfin, cliquez sur \"Parcourir...\" pour charger le fichier qui vous avez enregistré.',\r\n            instructions5: \"Alternativement, si vous avez un fichier mjlog sur votre ordinateur, vous pouvez le renommer pour remplacer son extension par.zip\",\r\n            instructions6: \"Puis, chargez le fichier contenu dans cette archive ZIP.\",\r\n            instructions7: \"Vous pouvez également charger directement les fichiers XML de replay si vous avez un programme qui les récupère pour vous.\",\r\n            instructions8: \"L'avertissement de l'entraînement à l'efficacité s'appique aussi ici\",\r\n            instructions9: \"Pour les évaluations de sécurité, plus la cote est élevée, mieux c'est. 1 est le pire, et 15 est le meilleur.\",\r\n            URLplaceholder: \"URL de replay\",\r\n            invalidURL: \"URL invalide\",\r\n            downloadInstructions: \"Faites un clic droit sur ce lien et sélectionnez \\\"Enregistrer sous...\\\" !\",\r\n            roundSelect: \"Sélectionner une main\",\r\n            playerSelect: \"Changer de joueur\",\r\n            previousTurn: \"Tour précédent\",\r\n            nextTurn: \"Tour suivant\",\r\n            nextIssue: \"Prochain point\",\r\n            turn: \"{{round}}, Tour {{turn}}\",\r\n            discards: \"Tuiles dans votre défausse : {{symbols}} ({{tiles}})\",\r\n            calls: \"Vos appels : {{calls}}\",\r\n            callsSeparator: \", \",\r\n            tenhouLinkText: \"[Analyse de l'ukeire par Tenhou]\",\r\n            replayError: \"Quelque chose s'est mal déroulé. Envoyez-moi ce replay.\",\r\n            noName: \"Inconnu\",\r\n            startingHand: \"Votre main de départ est {{hand}}. Elle est à {{count}} tuile d'être prête. L'indicateur de dora est {{dora}}.\",\r\n            startingHand_plural: \"Votre main de départ est {{hand}}. Elle est à {{count}} tuiles d'être prête. L'indicateur de dora est {{dora}}.\",\r\n            unknownAction: \"Hé ! Ce replay a quelque chose d'imprévu. Merci de me l'envoyer afin que je puisse y remédier. {{debugInfo}}\",\r\n            call: \"Vous avez appelé le {{tile}} pour compléter {{meld}}. ({{hand}})\",\r\n            callSameShanten: \"Cet appel ne vous a pas rapproché de tenpai.\",\r\n            ryuukyoku: \"La main est nulle.\",\r\n            playerRiichi: \"Vous avez déclaré riichi. Fin de l'analyse.\",\r\n            otherRiichi: \"Le joueur {{number}} a déclaré riichi. \",\r\n            fold: \"Vous êtes encore à {{shanten}} tuiles de tenpai. Vous devriez vous coucher.\",\r\n            probablyFold: \"Vous êtes à une tuile de tenpai. Vous devriez envisager de vous coucher.\",\r\n            win: \"Le joueur {{number}} a remporté la main.\",\r\n            kandora: \"Le nouvel indicateur de dora est le {{tile}}.\",\r\n            draw: \"Vous avez pioché le {{tile}}. ({{hand}})\",\r\n            chosenSafety: \"Le taux de sûreté du {{tile}} est de {{rating}}. ({{- explanation}}) \",\r\n            correctSafety: \"Il s'agissait de la tuile la plus sûre.\",\r\n            bestSafety: \"Tuile la plus sûre : {{tile}}, avec un taux de sûreté de {{rating}}. ({{- explanation}})\",\r\n            safetyExplanations: {\r\n                zero: \"Vous n'êtes pas censé voir ce message. Prévenez-moi, le cas échéant.\",\r\n                one: \"non-suji 4/5/6\",\r\n                two: \"non-suji 3/7\",\r\n                three: \"non-suji 2/8\",\r\n                four: \"une seule chance\",\r\n                five: \"non-suji 1/9\",\r\n                six: \"premier honneur\",\r\n                seven: \"suji 3/7\",\r\n                eight: \"suji 2/8\",\r\n                nine: \"suji 4/5/6\",\r\n                ten: \"deuxième honneur\",\r\n                eleven: \"première terminale suji\",\r\n                twelve: \"deuxième terminale suji\",\r\n                thirteen: \"troisième terminale suji / troisième honneur\",\r\n                fourteen: \"quatrième terminale suji / quatrième honneur\",\r\n                fifteen: \"genbutsu, 100% sûr\"\r\n            }\r\n        },\r\n        explorer: {\r\n            warning: \"Avertissement : Le chargement d'une main peut causer un ralentissement de la page de 5 à 10 secondes, voire plus si vous avez un ordinateur plus ancien, selon la complexité de la main. Charger une main montrera tous les ukeire et possibilités d'amélioration pour chaque défausse, y compris celles qui augmentent le shanten. Par défaut, les options qui sont plus mauvaises ne seront pas affichées, mais vous pouvez appuyer sur le bouton ci-dessous pour changer cela. Si vous n'avez besoin que de l'ukeire, tenhou.net/2/ suffit.\",\r\n            shanten: \"Shanten : Le nombre de tuiles qu'il vous manque pour être tenpai.\",\r\n            ukeire: \"Ukeire : Le nombre de tuiles qui réduisent votre shanten.\",\r\n            notableDiscards: \"Afficher uniquement les défausses significatives\",\r\n            allDiscards: \"Afficher toutes les défausses possibles\",\r\n            discardInfo: {\r\n                discard: \"Défausse du {{tile}} :\",\r\n                shanten: \"Shanten : {{count}}\",\r\n                ukeire: \"Ukeire : {{count}} ({{tiles}})\",\r\n                expand: \"Afficher l'ukeire du prochain shanten\",\r\n                draw: \"Piocher le {{draw}}, défausser le {{discard}}: {{count}} ukeire\",\r\n                average: \"Moyenne : {{average}}\",\r\n                upgrades: \"Tuiles qui augmentent l'ukeire : {{count}} ({{tiles}})\",\r\n                expandUpgrades: \"Afficher les améliorations\"\r\n            }\r\n        },\r\n        defense: {\r\n            instructions: \"Défausser la tuile la plus sûre.\",\r\n            finalHands: \"Dernières mains:\",\r\n            hand: \"{{player}}: {{hand}}\",\r\n            safetyRatings: \"Le taux de sûreté\",\r\n            averagedSafetyRating: \"Contre plusieurs riichis, les taux de sûreté seront moyennées, la plus haute étant choisie comme meilleure.\",\r\n            safetyRating: \"{{rating}}: {{- explanation}}\",\r\n            riichiCount: \"Nombre de riichis: \",\r\n            minTurns: \"Tours minimums avant qu'un riichi soit déclaré: \",\r\n            tilesInHand: \"Nombre de tuiles en main: \"\r\n        },\r\n        utils: {\r\n            convertHeader: \"Conversion de main\",\r\n            convertButtonLabel: \"Convertir une main\",\r\n            ascii: \"ASCII :\",\r\n            emoji: \"Emoji :\",\r\n            stateHeader: \"Générateur de situation de jeu aléatoire\",\r\n            playerLabel: \"{{seat}} Joueur {{you}}\",\r\n            points: \"Points :\",\r\n            discards: \"Défausses :\",\r\n            stateButtonLabel: \"Générer une nouvelle situation\",\r\n            info: \"C'est le tour {{turn}} de la manche {{round}}. Vous êtes le joueur {{seat}}.\",\r\n            dora: \"L'indicateur de dora est le {{tile}}.\"\r\n        }\r\n    }\r\n}\r\n","export const pl = {\r\n    translations: {\r\n        values: {\r\n            one: \"jeden\",\r\n            two: \"dwa\",\r\n            three: \"trzy\",\r\n            four: \"cztery\",\r\n            five: \"pięć\",\r\n            six: \"sześć\",\r\n            seven: \"siedem\",\r\n            eight: \"osiem\",\r\n            nine: \"dziewięć\",\r\n            redFive: \"czerwona piątka\",\r\n            east: \"Wschód\",\r\n            south: \"Południe\",\r\n            west: \"Zachód\",\r\n            north: \"Północ\",\r\n            white: \"Haku\",\r\n            green: \"Hatsu\",\r\n            red: \"Chun\",\r\n            hidden: \"zakryty kamień\",\r\n        },\r\n        suits: {\r\n            characters: \"Manzu\",\r\n            circles: \"Pinzu\",\r\n            bamboo: \"Souzu\"\r\n        },\r\n        shuupai: \"{{value}} {{suit}}\",\r\n        winds: {\r\n            east: \"Wschód\",\r\n            south: \"Południe\",\r\n            west: \"Zachód\",\r\n            north: \"Północ\"\r\n        },\r\n        roundName: \"{{wind}} {{number}}-{{repeats}}\",\r\n        trainer: {\r\n            disclaimer: \"Zastrzeżenie: przy pomocy tego narzędzia wyćwiczysz maksymalizowanie wydajności ręki w bieżącej kolejce. Nie pomoże Ci ono maksymalizować wydajności w nadchodzących kolejkach, ani nie wskaże, kiedy wydajność ignorować, czy jak zbudować wartość ręki. Granie zgodnie z podpowiedziami programu nie jest optymalnym sposobem gry w Mahjonga, ale niektóre ręce warto właśnie tak rozgrywać. Gracze zaawansowani nie zawsze grają w ten sposób, ale każdy z nich POTRAFI w ten sposób zagrać. Pamiętaj, by uzupełnić ćwiczenia o Madzianową lekturę, aby zrozumieć, kiedy taka gra może nie być wskazana. Sprawdź też opcje treningu nastawione na konkretne umiejętności.\",\r\n            instructions: \"Kliknij na kamień, który chcesz odrzucić!\",\r\n            start: \"Rozegraj nową rękę: {{hand}}\",\r\n            complete: \"Twoja ręka jest w tenpai. Gratulacje! Twoja wydajność to {{achieved}}/{{total}}, or {{percent}}%.\",\r\n            newHandButtonLabel: \"Nowa ręka\",\r\n            loadButtonLabel: \"Wczytaj rękę\",\r\n            roundWind: \"Wiatr Rundy:\",\r\n            seatWind: \"Wiatr Gracza:\",\r\n            doraIndicator: \"Wskaźnik Dory:\",\r\n            copyHand: \"Kopiuj rękę\",\r\n            copied: \"Skopiowano!\",\r\n            error: {\r\n                load: \"Błąd: Nie można odczytać ręki.\",\r\n                wallEmpty: \"Błąd: za mało kamieni.\",\r\n                wallEmptyShuffle: \"Za mało kamieni w murze by stworzyć nową rękę. Mieszanie.\"\r\n            },\r\n            playerNames: {\r\n                you: \"Ty\",\r\n                right: \"Shimocha\",\r\n                across: \"Toimen\",\r\n                left: \"Kamicha\"\r\n            }\r\n        },\r\n        history: {\r\n            label: \"Historia ręki\",\r\n            tenhouLinkText: \"[Ukeire]\",\r\n            concise: {\r\n                discard: \"Odrzut: {{tile}}\",\r\n                acceptance: \" ({{count}} kamieni).\",\r\n                acceptance_plural: \" ({{count}} kamieni).\",\r\n                loweredShanten: \" (cofnięcie shanten)\",\r\n                optimal: \" Najlepszy:\",\r\n                optimalSpoiler: \" {{tile}}\",\r\n                best: \" Najepszy wybór!\",\r\n                exceptionalNoten: \" Wszystkie zwycięskie kamienie są w Twojej ręce, więc nie masz jeszcze tenpai.\",\r\n                furiten: \" Furiten.\",\r\n                furitenWarning: \" Uważaj na możliwy furiten.\",\r\n                exhausted: \" Brak kamieni w murze. Następnym razem się uda! \",\r\n                draw: \" Dobrany kamień: {{tile}}. \"\r\n            },\r\n            verbose: {\r\n                discard: \"Wybierasz odrzut {{tile}}, który\",\r\n                acceptance: \" daje {{count}} kamień ulepszający rękę.\",\r\n                acceptance_plural: \" daje {{count}} kamieni ulepszających rękę.\",\r\n                loweredShanten: \" zwiększa shanten. Oddalasz się od tenpai.\",\r\n                optimal: \" Najlepszy odrzut\",\r\n                optimalSpoiler: \", {{tile}}, \",\r\n                best: \" Najlepszy wybór!\",\r\n                exceptionalNoten: \" Masz tenpai, ale wszystkie zwycięskie kamienie są w Twojej ręce. Większości odmian zasad nie uznaje takiego tenpai, więc musisz zmienić kształt ręki. \",\r\n                furiten: \" Masz furitena. Nie możesz wygrać przez Ron, bo masz swój zwycięski kamień w rzece.\",\r\n                furitenWarning: \" Uważaj na możliwy furiten. Niektóre kamienie ulepszające rękę są w Twojej rzece. \",\r\n                exhausted: \" Brak kamieni w murze. Następnym razem się uda! \",\r\n                draw: \" Dobierasz {{tile}}. \"\r\n            }\r\n        },\r\n        discards: {\r\n            label: \"Rzeka\",\r\n            discardCount: \"Odrzuciłeś {{count}} kamień.\",\r\n            discardCount_plural: \"Odrzuciłeś {{count}} kamieni.\",\r\n            tilesLeft: \"Pozostał {{count}} kamień w murze.\",\r\n            tilesLeft_plural: \"Pozostało {{count}} kamieni w murze.\"\r\n        },\r\n        settings: {\r\n            buttonLabel: \"Ustawienia\",\r\n            tilesAllowed: \"Dozwolone kamienie:\",\r\n            characters: \"Manzu\",\r\n            circles: \"Pinzu\",\r\n            bamboo: \"Souzu\",\r\n            honors: \"Honory\",\r\n            sanma: \"Zasady na 3 graczy\",\r\n            redFives: \"Liczba czerwonych piątek:\",\r\n            verbose: \"Pełne nazwy kamieni (\\\"jeden Souzu\\\" vs \\\"1s\\\")\",\r\n            concise: \"Skrócona historia\",\r\n            spoilers: \"Pokazuj najlepszą opcję\",\r\n            shuffle: \"Wmieszaj odrzucone kamienie z powrotem do muru po rozpoczęciu nowej ręki\",\r\n            simulate: \"Symuluj odrzuty innych graczy\",\r\n            exceptions: \"Rozpoznaj ręce specjalne (Kokushi/Trzynaście Sierot i Chiitoitsu/Siedem Par)\",\r\n            minShanten: \"Minimalny shanten nowej ręki:\",\r\n            minShantenLimit: \"(równy lub niższy liczbie dozwolonych Rodzin)\",\r\n            sort: \"Sortuj rękę\",\r\n            blind: \"Zakryj rękę\"\r\n        },\r\n        stats: {\r\n            buttonLabel: \"Statystyki\",\r\n            info: \"Statystyki są uaktualniane za każdym razem, gdy dojdziesz do tenpai.\",\r\n            ready: \"Ręce w tenpai: {{count}} ręka\",\r\n            ready_plural: \"Ręce w tenpai: {{count}} ręce\",\r\n            discards: \"Odrzucone kamieni: {{count}} kamieni\",\r\n            discards_plural: \"Odrzucone kamienie: {{count}} kamieni\",\r\n            average: \"Średnia liczba odrzutów do tenpai: {{average}} udrzutów\",\r\n            optimal: \"Optymalne odrzuty: {{count}} odrzut\",\r\n            optimal_plural: \"Optymalne odrzuty: {{count}} odrzutów\",\r\n            optimalRate: \"Współczynnik optymalnych odrzutów: {{percent}}% ({{achieved}}/{{total}})\",\r\n            efficiency: \"Zyskane ukeire: {{count}} kamień\",\r\n            efficiency_plural: \"Zyskane ukeire: {{count}} kamieni\",\r\n            possible: \"Potencjalne ukeire do uzyskania: {{count}} kamień\",\r\n            possible_plural: \"Potencjalne ukeire do uzyskania: {{count}} kamieni\",\r\n            overall: \"Ogólna wydajność: {{percent}}% ({{achieved}}/{{total}})\",\r\n            reset: \"Zresetuj statystyki\",\r\n            confirmation: \"Czy na pewno chcesz zresetować statystyki? Nie można tego cofnąć. \",\r\n            yes: \"Tak, reset!\",\r\n            no: \"Nie, nie resetuj!\"\r\n        },\r\n        credits: {\r\n            label: \"Credits\",\r\n            tilesPreLink: \"Tile images combined from \",\r\n            tilesLinkText: \"riichi-mahjong-tiles by FluffyStuff on Github\",\r\n            tilesPostLink: \", licensed under the \",\r\n            ccLinkText: \"Creative Commons Attribution 4.0 International License.\",\r\n            shantenPreLink: \"Shanten calculation algorithm adapted from \",\r\n            shantenLinkText: \"this C program collection.\",\r\n            shantenPostLink: \"\",\r\n        },\r\n        menu: {\r\n            trainer: \"Trener wydajności kamiennej\",\r\n            analyzer: \"Analizer logów\",\r\n            allLast: \"Trener oorasu\",\r\n            explorer: \"Eksplorator\",\r\n            utils: \"Inne narzędzia\",\r\n            language: \"Język\",\r\n            defense: \"Obrona\"\r\n        },\r\n        allLast: {\r\n            placements: {\r\n                first: \"pierwszy\",\r\n                second: \"drugi\",\r\n                third: \"trzeci\",\r\n                fourth: \"czwarty\"\r\n            },\r\n            title: \"Trener oorasu\",\r\n            maxFu: \"Maks. Fu\",\r\n            showDifferences: \"Pokaż różnice punktowe\",\r\n            loadInstructions: \"Wprowadź i oddziel przecinkiem wartości punktowe dla Wschodu, Południa, Zachodu i Północy, by wczytać sytuację.\",\r\n            loadLabel: \"Wczytaj sytuację\",\r\n            newLabel: \"Nowa losowa sytuacja\",\r\n            info: \"Ostatnia ręka w meczu. Jesteś na ostatnim miejscu. Punkty:\",\r\n            escapeHeader: \"Ucieczka z czwartego miejsca\",\r\n            riichiHeader: \"Zgłoszone Riichi\",\r\n            higherHeader: \"Pozostali gracze\",\r\n            question: \"Jaka jest minimalna wartość, z którą możesz wygrać na {{action}}, żeby być {{placement}}?\",\r\n            riichiQuestion: \"Jeśli {{player}} zgłosi Riichi, z jaką minimalną wartością będziesz mógł wygrać na {{action}}, żeby być {{placement}}?\",\r\n            ron: \"ron od {{target}}\",\r\n            tsumo: \"tsumo\",\r\n            han: \"Han\",\r\n            fu: \"Fu\",\r\n            submit: \"Podaj\",\r\n            wrong: \"Źle! Z tym wynikiem nie będziesz {{placement}}! Podświetl by zobaczyć odpowiedź:\",\r\n            tooMuch: \"Z tym wynikiem będziesz {{placement}}, ale nie jest to najniższy możliwy wynik. Podświetl by zobaczyć odpowiedź: \",\r\n            correct: \"Dobrze! Z tym wynikiem będziesz {{placement}}!\",\r\n            score: \"{{han}} han {{fu}} fu\",\r\n            results: \"Wyniki:\",\r\n            you: \"Gracz\",\r\n            error: {\r\n                few: \"Błąd: wprowadzono za mało wartości punktowych.\",\r\n                NaN: \"Błąd: niezrozumiała wartość dla {{seat}}.\"\r\n            }\r\n        },\r\n        analyzer: {\r\n            instructions1: \"Instrukcje:\",\r\n            instructions2: \"Wklej URL loga w polu tekstowym.\",\r\n            instructions3: 'Prawokliknij na wyświetlony link i wybierz \"Zapisz jako\" lub \"Zapisz link jako\".',\r\n            instructions4: 'Kliknij \"Przeglądaj...\" i załaduj zapisany plik.',\r\n            instructions5: \"Jeśli masz mjlog na komputerze, zmień jego rozszerzenie na .zip.\",\r\n            instructions6: \"Załaduj plik zawarty w tym zipie.\",\r\n            instructions7: \"Możesz też załadować logi XML bezpośrednio, o ile masz program, który je przeniesie.\",\r\n            instructions8: \"Zastrzeżenie z trenera wydajności obowiązuje też tutaj.\",\r\n            instructions9: \"Im wyższa liczba na skali bezpieczeństwa, tym bezpieczniejszy kamień: 1 jest najgorsza, 15 najlepsza.\",\r\n            URLplaceholder: \"URL loga Tenhou\",\r\n            invalidURL: \"Niepoprawny URL\",\r\n            downloadInstructions: \"Prawokliknij ten link i wybierz Zapisz jako!\",\r\n            roundSelect: \"Wybierz Rundę\",\r\n            playerSelect: \"Zmień gracza\",\r\n            previousTurn: \"Poprzednia kolejka\",\r\n            nextTurn: \"Następna kolejka\",\r\n            nextIssue: \"Next Issue\",\r\n            turn: \"{{round}}, kolejka {{turn}}\",\r\n            discards: \"Odrzucone kamienie: {{symbols}} ({{tiles}})\",\r\n            calls: \"Twoje meldunki: {{calls}}\",\r\n            callsSeparator: \", \",\r\n            tenhouLinkText: \"[Analiza ukeire na Tenhou]\",\r\n            replayError: \"Prześlij mi ten log, coś poszło nie tak.\",\r\n            noName: \"Nieznany\",\r\n            startingHand: \"Twoja ręka startowa to {{hand}}. Masz {{count}} do tenpai. Wskaźnik Dory to {{dora}}.\",\r\n            startingHand_plural: \"Twoja ręka startowa to {{hand}}. Masz {{count}} do tenpai. Wskaźnik Dory to {{dora}}.\",\r\n            unknownAction: \"Hej, ten log ma coś czego nie wziąłem pod uwagę. Prześlij mi go, bym mógł to dodać.{{debugInfo}}\",\r\n            call: \"Zameldowałeś {{tile}} żeby skompletować {{meld}}. ({{hand}})\",\r\n            callSameShanten: \"Ten meldunek nie przybliżył Cię do tenpai.\",\r\n            ryuukyoku: \"Rozdanie nierozstrzygnięte.\",\r\n            playerRiichi: \"Zgłosiłeś Riichi. Kończenie analizy.\",\r\n            otherRiichi: \"Gracz {{number}} zgłosił Riichi. \",\r\n            fold: \"Masz {{shanten}} do tenpai, powinieneś się bronić.\",\r\n            probablyFold: \"Masz jeden do tenpai. Rozważ obronę.\",\r\n            win: \"Gracz {{number}} wygrał rozdanie.\",\r\n            kandora: \"Nowy wskaźnik Dory to {{tile}}.\",\r\n            draw: \"Wyciąg: {{tile}}. ({{hand}})\",\r\n            chosenSafety: \"Skala bezpieczństwa {{tile}} to {{rating}}. ({{- explanation}}) \",\r\n            correctSafety: \"To jest najbezpieczniejszy kamień.\",\r\n            bestSafety: \"Najbezpieczniejszy kamień: {{tile}}, o skali bezpieczeństwa {{rating}}. ({{- explanation}})\",\r\n            safetyExplanations: {\r\n                zero: \"Nie powinieneś widzieć tej wiadomości. Daj mi znać, jeśli widzisz.\",\r\n                one: \"nie-suji 4/5/6\",\r\n                two: \"nie-suji 3/7\",\r\n                three: \"nie-suji 2/8\",\r\n                four: \"one-chance\",\r\n                five: \"nie-suji 1/9\",\r\n                six: \"pierwsza sztuka Honora\",\r\n                seven: \"suji 3/7\",\r\n                eight: \"suji 2/8\",\r\n                nine: \"suji 4/5/6\",\r\n                ten: \"druga szuka Honora\",\r\n                eleven: \"pierwsza sztuka skrajnego suji\",\r\n                twelve: \"druga sztuka skrajnego suji\",\r\n                thirteen: \"trzecia sztuka skrajnego suji / Honora\",\r\n                fourteen: \"czwarta sztuka skrajnego suji / Honora\",\r\n                fifteen: \"genbutsu, 100% bezpieczny\"\r\n            }\r\n        },\r\n        explorer: {\r\n            warning: \"Uwaga: wczytywanie może przywiesić stronę na 5-10 sekund lub dłużej, w zależności od skomplikowania ręki. Po wczytaniu ręki wyświetli się całe ukeire i możliwości ulepszenia przy każdym odrzucie, nawet takim, który zwiększa shanten. Wyświetlanie odrzutów, które są znacznie gorsze od innych jest domyślnie wyłączone, ale możesz to zmienić, naciskając przycisk poniżej. Jeśli potrzebujesz samego ukeire, tenhou.net/2/ wystarczy.\",\r\n            shanten: \"Shanten: liczba kamieni do tenpai.\",\r\n            ukeire: \"Ukeire: liczba kamieni, które przyjmie ręka.\",\r\n            notableDiscards: \"Pokaż tylko najlepsze odrzuty\",\r\n            allDiscards: \"Pokaż wszystkie możliwe odrzuty\",\r\n            discardInfo: {\r\n                discard: \"Odrzucając {{tile}}:\",\r\n                shanten: \"Shanten: {{count}}\",\r\n                ukeire: \"Ukeire: {{count}} ({{tiles}})\",\r\n                expand: \"Pokaż ukeire dla następnego shanten\",\r\n                draw: \"Wyciąg {{draw}}, odrzut {{discard}}: {{count}} ukeire\",\r\n                average: \"Średnia: {{average}}\",\r\n                upgrades: \"Kamienie zwiększające ukeire: {{count}} ({{tiles}})\",\r\n                expandUpgrades: \"Pokaż wynik ulepszenia\"\r\n            }\r\n        },\r\n        defense: {\r\n            instructions: \"Odrzuć najbezpieczniejszy kamień.\",\r\n            finalHands: \"Ręce przeciwników:\",\r\n            hand: \"{{player}}: {{hand}}\",\r\n            safetyRatings: \"Skala bezpieczeństwa\",\r\n            averagedSafetyRating: \"Przeciwko kilku Riichi, skala bezpieczeństwa będzie uśredniona i zostanie wybrana najlepsza opcja.\",\r\n            safetyRating: \"{{rating}}: {{- explanation}}\",\r\n            riichiCount: \"Liczba Riichi: \",\r\n            minTurns: \"Minimalna liczba kolejek przed zgłoszeniem Riichi: \",\r\n            tilesInHand: \"Liczba kamieni na ręce: \"\r\n        },\r\n        utils: {\r\n            convertHeader: \"Konwersja ręki\",\r\n            convertButtonLabel: \"Konwertuj rękę\",\r\n            ascii: \"ASCII:\",\r\n            emoji: \"Emoji:\",\r\n            stateHeader: \"Generator losowych sytuacji meczowych\",\r\n            playerLabel: \"{{seat}} Gracz {{you}}\",\r\n            points: \"Punkty:\",\r\n            discards: \"Odrzuty:\",\r\n            stateButtonLabel: \"Generuj nową sytuację\",\r\n            info: \"Jest kolejka {{turn}} w {{round}}. Jesteś {{seat}}.\",\r\n            dora: \"Wskaźnikiem Dory jest {{tile}}.\"\r\n        }\r\n    }\r\n}","export const ru = {\r\n    translations: {\r\n        values: {\r\n            one: \"единица\",\r\n            two: \"двойка\",\r\n            three: \"тройка\",\r\n            four: \"четверка\",\r\n            five: \"пятерка\",\r\n            six: \"шестерка\",\r\n            seven: \"семерка\",\r\n            eight: \"восьмерка\",\r\n            nine: \"девятка\",\r\n            redFive: \"red five\",\r\n            east: \"восточный ветер\",\r\n            south: \"южный ветер\",\r\n            west: \"западный ветер\",\r\n            north: \"северный ветер\",\r\n            white: \"белый дракон\",\r\n            green: \"зеленый дракон\",\r\n            red: \"красный дракон\",\r\n            hidden: \"скрытый тайл\",\r\n        },\r\n        suits: {\r\n            characters: \"символов\",\r\n            circles: \"точек\",\r\n            bamboo: \"бамбуков\"\r\n        },\r\n        shuupai: \"{{value}} {{suit}}\",\r\n        winds: {\r\n            east: \"Восток\",\r\n            south: \"Юг\",\r\n            west: \"Запад\",\r\n            north: \"Север\"\r\n        },\r\n        roundName: \"{{wind}} {{number}}-{{repeats}}\",\r\n        trainer: {\r\n            disclaimer: \"Предупреждение: Этот тренер поможет научиться находить самое эффективное по скорости решение на текущий ход, он не учитывает эффективность в последующих ходах. Также он не поможет научиться опознавать ситуации когда может быть выгодно принять не самое эффективное по скорости решение, или как повысить стоимость руки. Играть каждую руку согласно тому как подсказывает этот тренер не является лучшей стратегией, но порой будут руки где именно то что он предлагает является лучшим решением. Сильные игроки не всегда играют таким образом, но они умеют играть на максимальную эффективность и могут ответить верно на вопросы тренера. Не забудьте дополнить практику здесь чтением статей и источников по стратегии маджонга, чтобы узнать когда стоит отказаться от эффективности в пользу чего-то еще. В меню вы можете выбрать практику с более специфическими сценариями.\",\r\n            instructions: \"Кликните на тайл, который хотите сбросить.\",\r\n            start: \"Запущена новая рука: {{hand}}\",\r\n            complete: \"Ваша рука собрана. Поздравляем! Ваша эффективность была {{achieved}}/{{total}}, или {{percent}}%.\",\r\n            newHandButtonLabel: \"Новая рука\",\r\n            loadButtonLabel: \"Загрузить руку\",\r\n            roundWind: \"Ветер раунда:\",\r\n            seatWind: \"Ваш ветер:\",\r\n            doraIndicator: \"Индикатор доры:\",\r\n            copyHand: \"Скопировать руку\",\r\n            copied: \"Скопировано!\",\r\n            error: {\r\n                load: \"Ошибка: Не удалось загрузить руку\",\r\n                wallEmpty: \"Ошибка: Недостаточно тайлов чтобы завершить руку.\",\r\n                wallEmptyShuffle: \"В стене осталось недостаточно тайлов чтобы сделать новую руку. Перераздача.\"\r\n            },\r\n            playerNames: {\r\n                you: \"Вы\",\r\n                right: \"Шимоча\",\r\n                across: \"Тоймен\",\r\n                left: \"Камича\"\r\n            }\r\n        },\r\n        history: {\r\n            label: \"История руки\",\r\n            tenhouLinkText: \"[Улучшающие тайлы]\",\r\n            concise: {\r\n                discard: \"Сброс: {{tile}}\",\r\n                acceptance: \" (тайлов: {{count}}).\",\r\n                acceptance_plural: \" (тайлов: {{count}}).\",\r\n                loweredShanten: \" (ухудшение шантен).\",\r\n                optimal: \" Лучший:\",\r\n                optimalSpoiler: \" {{tile}}\",\r\n                best: \" Это был лучший выбор!\",\r\n                exceptionalNoten: \" Все выигрышные тайлы уже использованы в руке, так что это еще не тенпай.\",\r\n                furiten: \" Фуритен. \",\r\n                furitenWarning: \" Осторожно, ситуация может привести к фуритену.\",\r\n                exhausted: \" В стене не осталось тайлов. Попробуйте снова! \",\r\n                draw: \" Взятие: {{tile}}. \"\r\n            },\r\n            verbose: {\r\n                discard: \"Вы выбрали сбросить {{tile}}, и\",\r\n                acceptance: \" количество тайлов улучающих вашу руку теперь {{count}}.\",\r\n                acceptance_plural: \" количество тайлов улучающих вашу руку теперь {{count}}.\",\r\n                loweredShanten: \" увеличили свой шантен - до тенпая стало больше шагов.\",\r\n                optimal: \" Лучший выбор для сброса\",\r\n                optimalSpoiler: \" это {{tile}}, \",\r\n                best: \" Это был лучший выбор!\",\r\n                exceptionalNoten: \" Ваша рука готова, но все выигрышные тайлы уже использованы в ней. Это не считается тенпаем почти в любых правилах, поэтому руку придется поменять.\",\r\n                furiten: \" Вы в фуритене. Вы не можете выиграть по рону, потому что один или более выигрышных тайлов находятся в вашем сбросе.\",\r\n                furitenWarning: \" Есть опасность выйти в фуритен. Один или более тайлов необходимых для завершения руки находится в вашем сбросе.\",\r\n                exhausted: \" В стене не осталось тайлов. Попробуйте снова! \",\r\n                draw: \" Вы взяли {{tile}}. \"\r\n            }\r\n        },\r\n        discards: {\r\n            label: \"Сброс\",\r\n            discardCount: \"Сброшено тайлов: {{count}}.\",\r\n            discardCount_plural: \"Сброшено тайлов: {{count}}.\",\r\n            tilesLeft: \"Тайлов осталось в стене: {{count}}.\",\r\n            tilesLeft_plural: \"Тайлов осталось в стене: {{count}}.\"\r\n        },\r\n        settings: {\r\n            buttonLabel: \"Настройки\",\r\n            tilesAllowed: \"Разрешенные тайлы:\",\r\n            characters: \"Символы\",\r\n            circles: \"Точки\",\r\n            bamboo: \"Бамбуки\",\r\n            honors: \"Достоинства\",\r\n            sanma: \"Игра на троих (Хиросима)\",\r\n            redFives: \"Количество акадор:\",\r\n            verbose: \"Полные имена тайлов (\\\"единица бамбуков\\\" или \\\"1s\\\")\",\r\n            concise: \"Краткие объяснения\",\r\n            spoilers: \"Показывать что было лучшим выбором\",\r\n            shuffle: \"Замешивать использованные тайлы назад в стену когда начинается новая рука\",\r\n            simulate: \"Добавить виртуальных игроков сбрасывающих тайлы\",\r\n            exceptions: \"Учитывать нестандартные руки (Кокуши/Тринадцать сирот и Читойцу/Семь пар)\",\r\n            minShanten: \"Минимальный шантен стартовой руки:\",\r\n            minShantenLimit: \"(не больше количества включенных видов тайлов)\",\r\n            sort: \"Сортировать руку\",\r\n            blind: \"Скрыть тайлы в руке\"\r\n        },\r\n        stats: {\r\n            buttonLabel: \"Статистика\",\r\n            info: \"Статистика обновляется каждый раз когда вы завершаете руку.\",\r\n            ready: \"Завершено рук: {{count}}\",\r\n            ready_plural: \"Завершено рук: {{count}}\",\r\n            discards: \"Сброшено тайлов: {{count}}\",\r\n            discards_plural: \"Сброшено тайлов: {{count}}\",\r\n            average: \"Среднее количество сбросов до тенпая: {{average}}\",\r\n            optimal: \"Лучших выборов: {{count}}\",\r\n            optimal_plural: \"Лучших выборов: {{count}}\",\r\n            optimalRate: \"Процент лучшего выбора: {{percent}}% ({{achieved}}/{{total}})\",\r\n            efficiency: \"Тайлов улучающих шантен: {{count}}\",\r\n            efficiency_plural: \"Тайлов улучающих шантен: {{count}}\",\r\n            possible: \"Тайлов улучающих шантен, если бы все выборы были правильными: {{count}}\",\r\n            possible_plural: \"Тайлов улучающих шантен, если бы все выборы были правильными: {{count}}\",\r\n            overall: \"Общая эффективность: {{percent}}% ({{achieved}}/{{total}})\",\r\n            reset: \"Сбросить статистику\",\r\n            confirmation: \"Вы уверены, что хотите обнулить всю статистику? Это нельзя будет отменить.\",\r\n            yes: \"Да, обнулить!\",\r\n            no: \"Нет, оставить!\"\r\n        },\r\n        credits: {\r\n            label: \"Благодарности\",\r\n            tilesPreLink: \"Изображения тайлов взяты с \",\r\n            tilesLinkText: \"riichi-mahjong-tiles от FluffyStuff на Github\",\r\n            tilesPostLink: \", под лицензией \",\r\n            ccLinkText: \"Creative Commons Attribution 4.0 International License.\",\r\n            shantenPreLink: \"Алгоритм вычисления шантен адаптирован из \",\r\n            shantenLinkText: \"этого набора программ на C.\",\r\n            shantenPostLink: \"\",\r\n        },\r\n        menu: {\r\n            trainer: \"Тренер\",\r\n            analyzer: \"Анализатор\",\r\n            allLast: \"Тренер последнего раунда\",\r\n            explorer: \"Разбор вариантов\",\r\n            utils: \"Утилиты\",\r\n            language: \"Язык\",\r\n            defense: \"Защита\"\r\n        },\r\n        allLast: {\r\n            placements: {\r\n                first: \"первое\",\r\n                second: \"второе\",\r\n                third: \"третье\",\r\n                fourth: \"четвертое\"\r\n            },\r\n            title: \"Тренер последнего раунда\",\r\n            maxFu: \"Максимальные фу (минипоинты)\",\r\n            showDifferences: \"Показывать разницу в очках\",\r\n            loadInstructions: \"Введите очки через запятую для Востока, Юга, Запада и Севера, в таком порядке, чтобы сгенерировать ситуацию.\",\r\n            loadLabel: \"Сгенерировать ситуацию\",\r\n            newLabel: \"Новая случайная ситуация\",\r\n            info: \"Идет последний раунд игры. Вы на последнем месте. Очки игроков:\",\r\n            escapeHeader: \"Избежать последнего места\",\r\n            riichiHeader: \"Объявления ричи\",\r\n            higherHeader: \"Получить место выше третьего\",\r\n            question: \"При какой минимальной стоимости вашей руки, {{action}} даст вам {{placement}} место?\",\r\n            riichiQuestion: \"Если {{player}} объявит, при какой минимальной стоимости руки, {{action}} даст вам {{placement}} место?\",\r\n            ron: \"если {{target}} место накинет в рон то \",\r\n            tsumo: \"объявление цумо\",\r\n            han: \"Хан\",\r\n            fu: \"Фу\",\r\n            submit: \"Проверить\",\r\n            wrong: \"Неправильно! Такая стоимость не позволит занять {{placement}}! Выделите для ответа: \",\r\n            tooMuch: \"Эта стоимость позволит занять {{placement}}, но она не меньшая возможна. Выделите для ответа: \",\r\n            correct: \"Правильно! Это наименьшая стоимость которая позволит занять {{placement}}!\",\r\n            score: \"{{han}} хан {{fu}} фу\",\r\n            results: \"Результаты:\",\r\n            you: \"ВЫ\",\r\n            error: {\r\n                few: \"Ошибка: Очки предоставлены не для всех игроков.\",\r\n                NaN: \"Ошибка: Не удалось распарсить очки для: {{seat}}.\"\r\n            }\r\n        },\r\n        analyzer: {\r\n            instructions1: \"Инструкция:\",\r\n            instructions2: \"Скопируйте URL вашего реплея в текстовое поле.\",\r\n            instructions3: 'Затем, правый клик мышкой на появившуюся ссылку и сохраните её как файл.',\r\n            instructions4: 'Наконец, нажмите на загрузку файла и выберите сохраненный файл.',\r\n            instructions5: \"Как альтернатива, если у вас есть файл mjlog, вы можете переименовать его, чтобы он заканчивался на .zip.\",\r\n            instructions6: \"После этого нажмите на загрузку файла и загрузите файл внутри этого zip.\",\r\n            instructions7: \"Вы также можете загружать напрямую XML файлы реплеев, если у вас есть способ их достать.\",\r\n            instructions8: \"Предупреждение из основного тренера применимо здесь в не меньшей мере.\",\r\n            instructions9: \"Для рейтинга безопасности, чем больше тем лучше. 1 самый опасный тайл, а 15 самый безопасный.\",\r\n            URLplaceholder: \"URL Реплея\",\r\n            invalidURL: \"Некорректный URL\",\r\n            downloadInstructions: \"Правый клик мышкой на эту ссылку и сохраните как файл!\",\r\n            roundSelect: \"Выберите раунд\",\r\n            playerSelect: \"Сменить игрока\",\r\n            previousTurn: \"Предыдущий ход\",\r\n            nextTurn: \"Следующий ход\",\r\n            nextIssue: \"Следующее отклонение\",\r\n            turn: \"{{round}}, ход {{turn}}\",\r\n            discards: \"Тайлы в вашем сбросе: {{symbols}} ({{tiles}})\",\r\n            calls: \"Ваши объявления: {{calls}}\",\r\n            callsSeparator: \", \",\r\n            tenhouLinkText: \"[Анализ сбросов от Тенхо]\",\r\n            replayError: \"Пришлите мне этот реплей, что-то с ним не так.\",\r\n            noName: \"Анонимный игрок\",\r\n            startingHand: \"Ваша стартовая рука: {{hand}}. Улучшений до тенпая: {{count}}. Индикатор доры - {{dora}}.\",\r\n            startingHand_plural: \"Ваша стартовая рука: {{hand}}. Улучшений до тенпая: {{count}}. Индикатор доры - {{dora}}.\",\r\n            unknownAction: \"Извиняемся, на такой реплей мы не рассчитывали. Пожалуйста пришлите его разработчику чтобы его добавили. {{debugInfo}}\",\r\n            call: \"Вы объявили на {{tile}} чтобы закрыть {{meld}}. ({{hand}})\",\r\n            callSameShanten: \"Это объявление не привело вас ближе к тенпаю.\",\r\n            ryuukyoku: \"Раунд закончился вничью.\",\r\n            playerRiichi: \"Вы объявили ричи. Анализ окончен.\",\r\n            otherRiichi: \"Игрок {{number}} объвил ричи. \",\r\n            fold: \"Вы все еще в {{shanten}} тайлах от тенпая, поэтому надо уйти в защиту.\",\r\n            probablyFold: \"Вы в одном тайле от тенпая. Стоит подумать о защите.\",\r\n            win: \"Игрок {{number}} выиграл этот раунд.\",\r\n            kandora: \"Новый индикатор доры - {{tile}}.\",\r\n            draw: \"Вы взяли {{tile}}. ({{hand}})\",\r\n            chosenSafety: \"Тайл {{tile}} имел рейтинг безопасности {{rating}}. ({{- explanation}}) \",\r\n            correctSafety: \"Это был самый безопасный тайл.\",\r\n            bestSafety: \"Самый безопасный тайл: {{tile}}, рейтинг безопасности {{rating}}. ({{- explanation}})\",\r\n            safetyExplanations: {\r\n                zero: \"Это сообщение вы видеть не должны. Сообщите разработчикам\",\r\n                one: \"не суджи 4/5/6\",\r\n                two: \"не суджи 3/7\",\r\n                three: \"не суджи 2/8\",\r\n                four: \"единственный шанс\",\r\n                five: \"не суджи 1/9\",\r\n                six: \"первый тайл достоинства\",\r\n                seven: \"суджи 3/7\",\r\n                eight: \"суджи 2/8\",\r\n                nine: \"суджи 4/5/6\",\r\n                ten: \"второй тайл достоинства\",\r\n                eleven: \"первый суджи 1/9\",\r\n                twelve: \"второй суджи 1/9\",\r\n                thirteen: \"третий суджи 1/9 / третий тайл достоинства\",\r\n                fourteen: \"четвертый суджи 1/9 / четвертый тайл достоинства\",\r\n                fifteen: \"генбуцу, 100% безопасно\"\r\n            }\r\n        },\r\n        explorer: {\r\n            warning: \"Предупреждение: загрузка руки может стать причиной подвисания страницы на 5-10 секунд, или даже больше на старых компьютерах, в зависимости от сложности руки. Загрузка руки покажет все укеире и возможности улучшения на каждый вариант дискарда, включая возврат назад в шантене. По умолчанию варианты которые однозначно хуже других не будут показаны, но вы можете нажать кнопку снизу чтобы изменить это. Если вам нужно только укеире, tenhou.net/2/ может это сделать.\",\r\n            shanten: \"Шантен: минимальное количество улучшений необходимое для выхода в тенпай.\",\r\n            ukeire: \"Укеире: количество тайло которые улучшают ваш шантен.\",\r\n            notableDiscards: \"Показывать только значимые дискарды\",\r\n            allDiscards: \"Показывать все дискарды\",\r\n            discardInfo: {\r\n                discard: \"При сбросе {{tile}}:\",\r\n                shanten: \"Шантен: {{count}}\",\r\n                ukeire: \"Укеире: {{count}} ({{tiles}})\",\r\n                expand: \"Показать укеире при последующем улучшении\",\r\n                draw: \"Взятие {{draw}}, сброс {{discard}}: {{count}} укеире\",\r\n                average: \"Среднее укеире: {{average}}\",\r\n                upgrades: \"Тайлы улучшающие укеире: {{count}} ({{tiles}})\",\r\n                expandUpgrades: \"Показать возможные улучшения\"\r\n            }\r\n        },\r\n        defense: {\r\n            instructions: \"Сбросьте самый безопасный тайл.\",\r\n            finalHands: \"Руки в конце раздачи:\",\r\n            hand: \"{{player}}: {{hand}}\",\r\n            safetyRatings: \"Рейтинг безопасности\",\r\n            averagedSafetyRating: \"Против нескольких ричи, рейтинг безопасности будет подсчитываться по среднему, лучшим будет лучшее среднее.\",\r\n            safetyRating: \"{{rating}}: {{- explanation}}\",\r\n            riichiCount: \"Количество ричи: \",\r\n            minTurns: \"Минимальное число ходов до объявления ричи: \",\r\n            tilesInHand: \"Количество тайлов в руке: \"\r\n        },\r\n        utils: {\r\n            convertHeader: \"Преобразование руки\",\r\n            convertButtonLabel: \"Преобразовать руку\",\r\n            ascii: \"ASCII:\",\r\n            emoji: \"Эмоджи:\",\r\n            stateHeader: \"Генератор случайных состояний игры\",\r\n            playerLabel: \"{{seat}} {{you}}\",\r\n            points: \"Очки:\",\r\n            discards: \"Сброс:\",\r\n            stateButtonLabel: \"Сгенерировать новое состояние\",\r\n            info: \"Идет ход {{turn}}, {{round}}. Вы {{seat}}.\",\r\n            dora: \"Индикатор доры - {{tile}}.\"\r\n        }\r\n    }\r\n}","export const chs = {\r\n    translations: {\r\n        values: {\r\n            one: \"一\",\r\n            two: \"二\",\r\n            three: \"三\",\r\n            four: \"四\",\r\n            five: \"五\",\r\n            six: \"六\",\r\n            seven: \"七\",\r\n            eight: \"八\",\r\n            nine: \"九\",\r\n            redFive: \"赤五\",\r\n            east: \"东\",\r\n            south: \"南\",\r\n            west: \"西\",\r\n            north: \"北\",\r\n            white: \"白\",\r\n            green: \"发\",\r\n            red: \"中\",\r\n            hidden: \"hidden tile\",\r\n        },\r\n        suits: {\r\n            characters: \"万\",\r\n            circles: \"饼\",\r\n            bamboo: \"索\"\r\n        },\r\n        shuupai: \"{{value}}{{suit}}\",\r\n        winds: {\r\n            east: \"东\",\r\n            south: \"南\",\r\n            west: \"西\",\r\n            north: \"北\"\r\n        },\r\n        roundName: \"{{wind}}{{number}}句{{repeats}}本场\",\r\n        trainer: {\r\n            disclaimer: \"免责声明：这个工具将训练你在当前巡目中使手牌效率最大化的能力。它不会帮你在未来巡目最大化程度地提高效率，也无法了解何时应该忽略效率追求打点。训练工具所建议的方式并不是打麻将的最佳方法，但你会有想要这么打的地方。高手并非总是这么打，但是高手都可以这样玩。确保通过进一步阅读补充本训练内容，以了解何时这么打可能不是最佳玩法。此外，查看设置以进行更有针对性的培训。\",\r\n            instructions: \"请点击你要打的牌。\",\r\n            start: \"开始了一副新的手牌：{{hand}}\",\r\n            complete: \"恭喜你听牌了！你的效率是{{achieved}}/{{total}}或{{percent}}%.\",\r\n            newHandButtonLabel: \"新的手牌\",\r\n            loadButtonLabel: \"加载手牌\",\r\n            roundWind: \"场风：\",\r\n            seatWind: \"自风：\",\r\n            doraIndicator: \"宝牌指示牌：\",\r\n            copyHand: \"复制手牌\",\r\n            copied: \"复制成功！\",\r\n            error: {\r\n                load: \"错误：无法解析手牌\",\r\n                wallEmpty: \"错误：手牌牌数不足\",\r\n                wallEmptyShuffle: \"牌山存量不足，重新随机中。\"\r\n            },\r\n            playerNames: {\r\n                you: \"自家\",\r\n                right: \"下家\",\r\n                across: \"对家\",\r\n                left: \"上家\"\r\n            }\r\n        },\r\n        history: {\r\n            label: \"手牌历史\",\r\n            tenhouLinkText: \"【天凤牌理】\",\r\n            concise: {\r\n                discard: \"舍牌{{tile}}\",\r\n                acceptance: \"（{{count}}枚进张）。\",\r\n                acceptance_plural: \"（{{count}}枚进张）。\",\r\n                loweredShanten: \"（向听到退）。\",\r\n                optimal: \"最佳舍牌：\",\r\n                optimalSpoiler: \"{{tile}}\",\r\n                best: \"这是最佳的舍牌！\",\r\n                exceptionalNoten: \"你所听的牌都在手牌里，所以是空听。\",\r\n                furiten: \"振听。\",\r\n                furitenWarning: \"请注意可能会振听。\",\r\n                exhausted: \"牌山已经没有牌了，下次好运！\",\r\n                draw: \"你自摸：{{tile}}。\"\r\n            },\r\n            verbose: {\r\n                discard: \"你选择打{{tile}}，\",\r\n                acceptance: \"结果是有{{count}}张牌可以改善手牌向听数。\",\r\n                acceptance_plural: \"结果是有{{count}}张牌可以改善手牌向听数。\",\r\n                loweredShanten: \"向听数增加 - 你离听牌更远了。\",\r\n                optimal: \"最佳舍牌是\",\r\n                optimalSpoiler: \"{{tile}}。\",\r\n                best: \"这是最佳的舍牌！\",\r\n                exceptionalNoten: \"你听牌了，但是你所听的牌都在手牌里。大部分规则下都不算听牌，所以你需要改变你的手牌。\",\r\n                furiten: \"你现在处于振听状态。你不能荣和，因为你有一张要和的牌在你舍牌里。\",\r\n                furitenWarning: \"请注意可能会振听。能改善手牌的一些牌在你的舍牌里。\",\r\n                exhausted: \"牌山已经没有牌了，下次好运！\",\r\n                draw: \"你自摸{{tile}}。\"\r\n            }\r\n        },\r\n        discards: {\r\n            label: \"牌河\",\r\n            discardCount: \"你已经打了{{count}}张牌。\",\r\n            discardCount_plural: \"你已经打了{{count}}张牌。\",\r\n            tilesLeft: \"牌山还剩{{count}}张。\",\r\n            tilesLeft_plural: \"牌山还剩{{count}}张。\"\r\n        },\r\n        settings: {\r\n            buttonLabel: \"设置\",\r\n            tilesAllowed: \"允许的牌种类：\",\r\n            characters: \"万子\",\r\n            circles: \"饼子\",\r\n            bamboo: \"索子\",\r\n            honors: \"字牌\",\r\n            sanma: \"三麻\",\r\n            redFives: \"赤五枚数：\",\r\n            verbose: \"不使用牌缩写（“一索” vs “1s”）\",\r\n            concise: \"紧凑的手牌历史\",\r\n            spoilers: \"显示最佳舍牌\",\r\n            shuffle: \"开始新的手牌之后将舍牌随机放回牌山\",\r\n            simulate: \"模拟其他玩家的舍牌\",\r\n            exceptions: \"考虑特殊牌型（国士无双和七对子）\",\r\n            minShanten: \"起始手牌最小向听数：\",\r\n            minShantenLimit: \"(up to the number of allowed suits)\",\r\n            sort: \"自动理牌\",\r\n            blind: \"隐藏手牌\"\r\n        },\r\n        stats: {\r\n            buttonLabel: \"统计\",\r\n            info: \"这些数据在你每次达成听牌之后更新。\",\r\n            ready: \"听牌次数：{{count}}次\",\r\n            ready_plural: \"听牌次数：{{count}}次\",\r\n            discards: \"舍牌枚数：{{count}}枚\",\r\n            discards_plural: \"舍牌枚数：{{count}}枚\",\r\n            average: \"平均听牌巡目：{{average}}巡\",\r\n            optimal: \"最佳舍牌次数：{{count}}次\",\r\n            optimal_plural: \"最佳舍牌次数：{{count}}次\",\r\n            optimalRate: \"最佳舍牌比例：{{percent}}% ({{achieved}}/{{total}})\",\r\n            efficiency: \"达成的进张枚数：{{count}}枚\",\r\n            efficiency_plural: \"达成的进张枚数：{{count}}枚\",\r\n            possible: \"可能的进张枚数：{{count}}枚\",\r\n            possible_plural: \"可能的进张枚数：{{count}}枚\",\r\n            overall: \"综合牌效率： {{percent}}% ({{achieved}}/{{total}})\",\r\n            reset: \"重置统计\",\r\n            confirmation: \"你确定想要重置你的所有统计数据为0吗？你无法撤回这项操作。\",\r\n            yes: \"是，我要重置！\",\r\n            no: \"否，不要重置！\"\r\n        },\r\n        credits: {\r\n            label: \"Credits\",\r\n            tilesPreLink: \"Tile images combined from \",\r\n            tilesLinkText: \"riichi-mahjong-tiles by FluffyStuff on Github\",\r\n            tilesPostLink: \", licensed under the \",\r\n            ccLinkText: \"Creative Commons Attribution 4.0 International License.\",\r\n            shantenPreLink: \"Shanten calculation algorithm adapted from \",\r\n            shantenLinkText: \"this C program collection.\",\r\n            shantenPostLink: \"\",\r\n        },\r\n        menu: {\r\n            trainer: \"牌效训练\",\r\n            analyzer: \"Analyzer\",\r\n            allLast: \"All Last Trainer\",\r\n            explorer: \"Explorer\",\r\n            utils: \"Misc. Utils\",\r\n            language: \"语言\",\r\n            defense: \"弃和\"\r\n        },\r\n        allLast: {\r\n            placements: {\r\n                first: \"first\",\r\n                second: \"second\",\r\n                third: \"third\",\r\n                fourth: \"fourth\"\r\n            },\r\n            title: \"All Last Trainer\",\r\n            maxFu: \"Maximum Fu\",\r\n            showDifferences: \"Show Point Differences\",\r\n            loadInstructions: \"Enter comma-separated scores for East, South, West, and North, in that order, to load a situation.\",\r\n            loadLabel: \"Load Situation\",\r\n            newLabel: \"New Random Situation\",\r\n            info: \"It's currently All Last, the last hand in the match. You are in fourth. The scores are as follows:\",\r\n            escapeHeader: \"Escaping Fourth\",\r\n            riichiHeader: \"Riichi Declarations\",\r\n            higherHeader: \"Higher Placements\",\r\n            question: \"What is the minimum score you can {{action}} to get {{placement}}?\",\r\n            riichiQuestion: \"If {{player}} declares riichi, what is the minimum score you can {{action}} to get {{placement}}?\",\r\n            ron: \"ron {{target}} with \",\r\n            tsumo: \"tsumo\",\r\n            han: \"Han\",\r\n            fu: \"Fu\",\r\n            submit: \"Submit\",\r\n            wrong: \"Wrong! That score doesn't get you to {{placement}}! Highlight for the answer: \",\r\n            tooMuch: \"That score gets you to {{placement}}, but it's not the lowest possible. Highlight for the answer: \",\r\n            correct: \"Correct! That's the lowest score that gets you to {{placement}}!\",\r\n            score: \"{{han}} han {{fu}} fu\",\r\n            results: \"Results:\",\r\n            you: \"YOU\",\r\n            error: {\r\n                few: \"Error: Not enough scores provided.\",\r\n                NaN: \"Error: Could not understand the score for {{seat}}.\"\r\n            }\r\n        },\r\n        analyzer: {\r\n            instructions1: \"Instructions:\",\r\n            instructions2: \"Paste the URL for your replay into the text box.\",\r\n            instructions3: 'Then, right click the link that appears and choose \"Save As\" or \"Save Link As\".',\r\n            instructions4: 'Finally, click \"Browse...\" and upload the file you saved.',\r\n            instructions5: \"Alternatively, if you have a mjlog file on your computer, you can rename it to end in .zip.\",\r\n            instructions6: \"Then, upload the file contained within that zip.\",\r\n            instructions7: \"You can also just upload replay XML files directly if you have a program that fetches them for you.\",\r\n            instructions8: \"The disclaimer from the efficiency trainer applies here as well.\",\r\n            instructions9: \"For safety ratings, higher is better. 1 is the worst, and 15 is the best.\",\r\n            URLplaceholder: \"Replay URL\",\r\n            invalidURL: \"Invalid URL\",\r\n            downloadInstructions: \"Right click this link and choose Save As!\",\r\n            roundSelect: \"Select a Round\",\r\n            playerSelect: \"Change Player\",\r\n            previousTurn: \"Previous Turn\",\r\n            nextTurn: \"Next Turn\",\r\n            nextIssue: \"Next Issue\",\r\n            turn: \"{{round}}, Turn {{turn}}\",\r\n            discards: \"Tiles in your discards: {{symbols}} ({{tiles}})\",\r\n            calls: \"Your Calls: {{calls}}\",\r\n            callsSeparator: \", \",\r\n            tenhouLinkText: \"【天凤牌理】\",\r\n            replayError: \"Send me this replay, something broke.\",\r\n            noName: \"Unknown\",\r\n            startingHand: \"Your starting hand is {{hand}}. It's {{count}} tile from ready. The dora indicator is {{dora}}.\",\r\n            startingHand_plural: \"Your starting hand is {{hand}}. It's {{count}} tiles from ready. The dora indicator is {{dora}}.\",\r\n            unknownAction: \"Hey, this replay has something I don't account for. Please send me this replay so I can add it. {{debugInfo}}\",\r\n            call: \"You called the {{tile}} to complete {{meld}}. ({{hand}})\",\r\n            callSameShanten: \"That call didn't bring you closer to ready.\",\r\n            ryuukyoku: \"The round ended in a draw.\",\r\n            playerRiichi: \"You declared riichi. Ending analysis.\",\r\n            otherRiichi: \"Player {{number}} declared riichi. \",\r\n            fold: \"You are still {{shanten}} tiles from ready, so you should fold.\",\r\n            probablyFold: \"You are one tile from ready. You should consider folding.\",\r\n            win: \"Player {{number}} won the round.\",\r\n            kandora: \"The new dora indicator is the {{tile}}.\",\r\n            draw: \"自摸{{tile}}。（{{hand}}）\",\r\n            chosenSafety: \"{{tile}}的安全等级是{{rating}}。（{{- explanation}}）\",\r\n            correctSafety: \"那是最安全的牌。\",\r\n            bestSafety: \"最安全的牌是{{tile}}，安全等级{{rating}}。（{{- explanation}}）\",\r\n            safetyExplanations: {\r\n                zero: \"You shouldn't see this message. Tell me if you do.\",\r\n                one: \"无筋 4/5/6\",\r\n                two: \"无筋 3/7\",\r\n                three: \"无筋 2/8\",\r\n                four: \"one-chance\",\r\n                five: \"无筋 1/9\",\r\n                six: \"生张 字牌\",\r\n                seven: \"筋牌 3/7\",\r\n                eight: \"筋牌 2/8\",\r\n                nine: \"筋牌 4/5/6\",\r\n                ten: \"现一 字牌\",\r\n                eleven: \"生张 筋牌 老头牌\",\r\n                twelve: \"现一 筋牌 老头牌\",\r\n                thirteen: \"现二 筋牌 老头牌 / 现二 字牌\",\r\n                fourteen: \"绝张 筋牌 老头牌 / 绝张 字牌\",\r\n                fifteen: \"现物，100% 安全\"\r\n            }\r\n        },\r\n        explorer: {\r\n            warning: \"Warning: Loading a hand may cause the page to hang for 5-10 seconds, or more if you have an older computer, depending on the complexity of the hand. Loading a hand will show all of the ukeire and upgrade possibilities for each discard, even ones that go back in shanten. By default, options that are strictly worse than another option won't be displayed, but you can press the button below to change that. If you only need ukeire information, tenhou.net/2/ will suffice.\",\r\n            shanten: \"Shanten: The number of tiles away from ready your hand is.\",\r\n            ukeire: \"Ukeire: The number of tiles that reduce your shanten.\",\r\n            notableDiscards: \"Show Only Notable Discards\",\r\n            allDiscards: \"Show All Possible Discards\",\r\n            discardInfo: {\r\n                discard: \"Discarding the {{tile}}:\",\r\n                shanten: \"Shanten: {{count}}\",\r\n                ukeire: \"Ukeire: {{count}} ({{tiles}})\",\r\n                expand: \"Show Next Shanten's Ukeire\",\r\n                draw: \"Draw {{draw}}, discard {{discard}}: {{count}} ukeire\",\r\n                average: \"Average: {{average}}\",\r\n                upgrades: \"Tiles that increase ukeire: {{count}} ({{tiles}})\",\r\n                expandUpgrades: \"Show Upgrade Results\"\r\n            }\r\n        },\r\n        defense: {\r\n            instructions: \"请打最安全的牌。\",\r\n            finalHands: \"最终手牌：\",\r\n            hand: \"{{player}}：{{hand}}\",\r\n            safetyRatings: \"安全等级\",\r\n            averagedSafetyRating: \"针对多家立直，安全等级将一并取平均值，并选择最高的为最佳。\",\r\n            safetyRating: \"{{rating}}: {{- explanation}}\",\r\n            riichiCount: \"立直数：\",\r\n            minTurns: \"立直前最小巡数：\",\r\n            tilesInHand: \"手牌枚数：\"\r\n        },\r\n        utils: {\r\n            convertHeader: \"Hand Conversion\",\r\n            convertButtonLabel: \"Convert Hand\",\r\n            ascii: \"ASCII:\",\r\n            emoji: \"Emoji:\",\r\n            stateHeader: \"Random Game State Generator\",\r\n            playerLabel: \"{{seat}} Player {{you}}\",\r\n            points: \"Points:\",\r\n            discards: \"Discards:\",\r\n            stateButtonLabel: \"Generate New State\",\r\n            info: \"It's turn {{turn}} in {{round}}. You are the {{seat}} player.\",\r\n            dora: \"The dora indicator is the {{tile}}.\"\r\n        }\r\n    }\r\n}","/** @readonly The tile counts if every tile is available. */\r\nexport const ALL_TILES_REMAINING = [\r\n    0, 4, 4, 4, 4, 4, 4, 4, 4, 4,\r\n    0, 4, 4, 4, 4, 4, 4, 4, 4, 4,\r\n    0, 4, 4, 4, 4, 4, 4, 4, 4, 4,\r\n    0, 4, 4, 4, 4, 4, 4, 4\r\n];\r\n\r\n/** @readonly Array of characters representing each suit. */\r\nexport const SUIT_CHARACTERS = [\"m\", \"p\", \"s\", \"z\"];\r\n\r\n/** @readonly Array of ascii characters for each tile. */\r\nexport const ASCII_TILES = [\r\n    \"🀋\", \"🀇\", \"🀈\", \"🀉\", \"🀊\", \"🀋\", \"🀌\", \"🀍\", \"🀎\", \"🀏\",\r\n    \"🀝\", \"🀙\", \"🀚\", \"🀛\", \"🀜\", \"🀝\", \"🀞\", \"🀟\", \"🀠\", \"🀡\",\r\n    \"🀔\", \"🀐\", \"🀑\", \"🀒\", \"🀓\", \"🀔\", \"🀕\", \"🀖\", \"🀗\", \"🀘\",\r\n    \"🀪\", \"🀀\", \"🀁\", \"🀂\", \"🀃\", \"🀆\", \"🀅\", \"🀄\"\r\n];\r\n\r\n/** @readonly The localization keys for the player names. */\r\nexport const PLAYER_NAMES = [\r\n    \"trainer.playerNames.you\", \"trainer.playerNames.right\", \"trainer.playerNames.across\", \"trainer.playerNames.left\"\r\n];\r\n\r\n/** @readonly The localization keys for the seat names. */\r\nexport const SEAT_NAMES = [\r\n    \"winds.east\", \"winds.south\", \"winds.west\", \"winds.north\"\r\n];\r\n\r\n/** @readonly The localization keys for each safety rating explanation. */\r\nexport const SAFETY_RATING_EXPLANATIONS = [\r\n    \"analyzer.safetyExplanations.zero\", \"analyzer.safetyExplanations.one\", \"analyzer.safetyExplanations.two\", \"analyzer.safetyExplanations.three\",\r\n    \"analyzer.safetyExplanations.four\", \"analyzer.safetyExplanations.five\", \"analyzer.safetyExplanations.six\",\r\n    \"analyzer.safetyExplanations.seven\", \"analyzer.safetyExplanations.eight\", \"analyzer.safetyExplanations.nine\",\r\n    \"analyzer.safetyExplanations.ten\", \"analyzer.safetyExplanations.eleven\", \"analyzer.safetyExplanations.twelve\",\r\n    \"analyzer.safetyExplanations.thirteen\", \"analyzer.safetyExplanations.fourteen\", \"analyzer.safetyExplanations.fifteen\"\r\n];\r\n\r\n/** @readonly The parameters to be given to the localization for round names for each round. */\r\nexport const ROUND_PARAMETERS = [\r\n    { wind: '$t(winds.east)', number: 1 }, { wind: '$t(winds.east)', number: 2 }, { wind: '$t(winds.east)', number: 3 }, { wind: '$t(winds.east)', number: 4 },\r\n    { wind: '$t(winds.south)', number: 1 }, { wind: '$t(winds.south)', number: 2 }, { wind: '$t(winds.south)', number: 3 }, { wind: '$t(winds.south)', number: 4 },\r\n    { wind: '$t(winds.west)', number: 1 }, { wind: '$t(winds.west)', number: 2 }, { wind: '$t(winds.west)', number: 3 }, { wind: '$t(winds.west)', number: 4 },\r\n    { wind: '$t(winds.north)', number: 1 }, { wind: '$t(winds.north)', number: 2 }, { wind: '$t(winds.north)', number: 3 }, { wind: '$t(winds.north)', number: 4 }\r\n];\r\n\r\n/** @readonly The han, fu, and payments for each score combination on ron, sorted from lowest score to highest. */\r\nexport const RON_SCORES = [\r\n    { han: 1, fu: 30, nondealer: 1000, dealer: 1500 }, { han: 1, fu: 40, nondealer: 1300, dealer: 2000 }, { han: 2, fu: 25, nondealer: 1600, dealer: 2400 },\r\n    { han: 2, fu: 30, nondealer: 2000, dealer: 2900 }, { han: 1, fu: 70, nondealer: 2300, dealer: 3400 }, { han: 2, fu: 40, nondealer: 2600, dealer: 3900 },\r\n    { han: 1, fu: 90, nondealer: 2900, dealer: 4400 }, { han: 3, fu: 25, nondealer: 3200, dealer: 4800 }, { han: 1, fu: 110, nondealer: 3600, dealer: 5300 },\r\n    { han: 3, fu: 30, nondealer: 3900, dealer: 5800 }, { han: 2, fu: 70, nondealer: 4500, dealer: 6800 }, { han: 3, fu: 40, nondealer: 5200, dealer: 7700 },\r\n    { han: 2, fu: 90, nondealer: 5800, dealer: 8700 }, { han: 4, fu: 25, nondealer: 6400, dealer: 9600 }, { han: 2, fu: 110, nondealer: 7100, dealer: 10600 },\r\n    { han: 4, fu: 30, nondealer: 7700, dealer: 11600 }, { han: 5, fu: 30, nondealer: 8000, dealer: 12000 }, { han: 6, fu: 30, nondealer: 12000, dealer: 18000 },\r\n    { han: 8, fu: 30, nondealer: 16000, dealer: 24000 }, { han: 11, fu: 30, nondealer: 24000, dealer: 36000 }, { han: 13, fu: 30, nondealer: 32000, dealer: 48000 }\r\n];\r\n\r\n/** @readonly The han, fu, and payments for each score combination on tsumo, sorted from lowest score to highest. */\r\nexport const TSUMO_SCORES = [\r\n    { han: 1, fu: 30, nondealer: 300, dealer: 500 }, { han: 2, fu: 20, nondealer: 400, dealer: 700 }, { han: 1, fu: 50, nondealer: 400, dealer: 800 },\r\n    { han: 2, fu: 30, nondealer: 500, dealer: 1000 }, { han: 1, fu: 70, nondealer: 600, dealer: 1200 }, { han: 2, fu: 40, nondealer: 700, dealer: 1300 },\r\n    { han: 1, fu: 90, nondealer: 800, dealer: 1500 }, { han: 3, fu: 25, nondealer: 800, dealer: 1600 }, { han: 1, fu: 110, nondealer: 900, dealer: 1800 },\r\n    { han: 3, fu: 30, nondealer: 1000, dealer: 2000 }, { han: 2, fu: 70, nondealer: 1200, dealer: 2300 }, { han: 3, fu: 40, nondealer: 1300, dealer: 2600 },\r\n    { han: 2, fu: 90, nondealer: 1500, dealer: 2900 }, { han: 4, fu: 25, nondealer: 1600, dealer: 3200 }, { han: 2, fu: 110, nondealer: 1800, dealer: 3600 },\r\n    { han: 4, fu: 30, nondealer: 2000, dealer: 3900 }, { han: 5, fu: 20, nondealer: 2000, dealer: 4000 }, { han: 6, fu: 20, nondealer: 3000, dealer: 6000 },\r\n    { han: 8, fu: 20, nondealer: 4000, dealer: 8000 }, { han: 11, fu: 20, nondealer: 6000, dealer: 12000 }, { han: 13, fu: 20, nondealer: 8000, dealer: 16000 }\r\n];\r\n\r\n/** @readonly The localization keys for each placement. */\r\nexport const PLACEMENTS = [\r\n    \"allLast.placements.fourth\", \"allLast.placements.third\", \"allLast.placements.second\", \"allLast.placements.first\"\r\n];","import { convertTenhouTilesToIndex } from './TileConversions';\r\nimport { SUIT_CHARACTERS, ASCII_TILES } from '../Constants';\r\n\r\n/**\r\n * Converts a hand array into a Tenhou hand string, such as 234m567s.\r\n * @param {TileCounts} hand An array containing the number of each tile present in the hand.\r\n * @returns {string} The Tenhou hand string.\r\n */\r\nexport function convertHandToTenhouString(hand) {\r\n    let handString = \"\";\r\n    let valuesInSuit = \"\";\r\n\r\n    for (let suit = 0; suit < 4; suit++) {\r\n        for (let i = suit * 10 + 1; i < suit * 10 + 10; i++) {\r\n            let value = i % 10;\r\n\r\n            // If we're at the fives, add the zeroes here, if there are any (0 = red five).\r\n            if (value === 5 && hand[i - 5] > 0) {\r\n                for (let j = 0; j < hand[i - 5]; j++) {\r\n                    valuesInSuit += 0;\r\n                }\r\n            }\r\n\r\n            for (let j = 0; j < hand[i]; j++) {\r\n                valuesInSuit += value;\r\n            }\r\n        }\r\n\r\n        // Don't add to the hand if there are no values in the suit, to avoid having random letters.\r\n        if (valuesInSuit !== \"\") {\r\n            handString += valuesInSuit + SUIT_CHARACTERS[suit];\r\n            valuesInSuit = \"\";\r\n        }\r\n    };\r\n\r\n    return handString;\r\n}\r\n\r\n/**\r\n * Converts a hand array into a string of ASCII characters.\r\n * @param {TileCounts} hand An array containing the number of each tile present in the hand.\r\n * @returns {string} ASCII representation of the hand\r\n */\r\nexport function convertHandToAsciiSymbols(hand) {\r\n    let result = \"\";\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        for (let j = 0; j < hand[i]; j++) {\r\n            result += ASCII_TILES[i];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Converts a Tenhou hand from a replay into a hand array.\r\n * @param {string} tenhouHand String of a Tenhou replay hand\r\n * @returns {TileCounts} An array containing the number of each tile present in the hand.\r\n */\r\nexport function convertTenhouHandToHand(tenhouHand) {\r\n    let handTiles = tenhouHand.split(\",\");\r\n    let convertedTiles = convertTenhouTilesToIndex(handTiles);\r\n    let hand = Array(38).fill(0);\r\n\r\n    for (let i = 0; i < convertedTiles.length; i++) {\r\n        hand[convertedTiles[i]]++;\r\n    }\r\n\r\n    return hand;\r\n}\r\n\r\n/** An array of the emoji for each tile. */\r\nconst emoji = [\":0m:\", \":1m:\", \":2m:\", \":3m:\", \":4m:\", \":5m:\", \":6m:\", \":7m:\", \":8m:\", \":9m:\",\r\n    \":0p:\", \":1p:\", \":2p:\", \":3p:\", \":4p:\", \":5p:\", \":6p:\", \":7p:\", \":8p:\", \":9p:\",\r\n    \":0s:\", \":1s:\", \":2s:\", \":3s:\", \":4s:\", \":5s:\", \":6s:\", \":7s:\", \":8s:\", \":9s:\",\r\n    \":baka:\", \":1z:\", \":2z:\", \":3z:\", \":4z:\", \":5z:\", \":6z:\", \":7z:\"];\r\n\r\n/**\r\n * Converts a hand array into a string of emoji for use on the Discord.\r\n * @param {TileCounts} hand An array containing the number of each tile present in the hand.\r\n * @returns {string} A string of discord emoji.\r\n */\r\nexport function convertHandToDiscordEmoji(hand) {\r\n    let result = \"\";\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        if (i % 10 === 5 && hand[i - 5] > 0) {\r\n            result += emoji[i - 5];\r\n        }\r\n\r\n        if (i % 10 === 0) continue;\r\n\r\n        for (let j = 0; j < hand[i]; j++) {\r\n            result += emoji[i];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Converts a hand array into an array of tile indexes.\r\n * @param {TileCounts} hand An array containing the number of each tile present in the hand.\r\n * @returns {TileIndex[]} An array of tile indexes.\r\n */\r\nexport function convertHandToTileIndexArray(hand) {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        for (let j = 0; j < hand[i]; j++) {\r\n            result.push(i);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { convertHandToTileIndexArray } from \"./HandConversions\";\r\n\r\n/**\r\n * Generates a random number between min (inclusive) and max (exclusive).\r\n * @param {number} max The maximum value to generate, exclusive\r\n * @param {number} min The minimum value to generate, inclusive\r\n * @returns {number} A random number between min (inclusive) and max (exclusive).\r\n */\r\nexport function randomInt(max, min = 0) {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\n/**\r\n * Gets a random item in an array.\r\n * @param {any[]} array An array of items.\r\n * @returns {any} A random item from the array.\r\n */\r\nexport function getRandomItem(array) {\r\n    return array[randomInt(array.length)];\r\n}\r\n\r\n/**\r\n * Removes a random item from an array and returns it.\r\n * @param {any[]} array An array of items.\r\n * @returns {any} The removed item.\r\n */\r\nexport function removeRandomItem(array) {\r\n    return array.splice(randomInt(array.length), 1)[0];\r\n}\r\n\r\n/**\r\n * Randomizes the order of elements in an array.\r\n * @param {any[]} array An array of items.\r\n * @returns The randomized array.\r\n */\r\nexport function shuffleArray(array) {\r\n    var currentIndex = array.length, tmp, randomIndex;\r\n\r\n    while (0 !== currentIndex) {\r\n        randomIndex = randomInt(currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        tmp = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = tmp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\n/**\r\n * Snaps the given fu value to valid fu values.\r\n * @param {number} fu The current value for the fu.\r\n * @param {number} previousFu The previous value for the fu.\r\n * @returns {number} The snapped fu.\r\n */\r\nexport function validateFu(fu, previousFu) {\r\n    fu = Math.max(fu, 20);\r\n\r\n    if (fu !== 25) {\r\n        if (fu < previousFu) {\r\n            fu = Math.floor(fu / 10) * 10;\r\n        } else {\r\n            fu = Math.ceil(fu / 10) * 10;\r\n        }\r\n    }\r\n\r\n    fu = Math.min(fu, 130);\r\n\r\n    return fu;\r\n}\r\n\r\n/**\r\n * Calculates how much further ahead in shanten the hand is compared to what the calculateStandardShanten function would return.\r\n * @param {number[]} hand An array containing the number of each tile present in the hand.\r\n * @returns {number} How many shanten the hand is offset by.\r\n */\r\nexport function getShantenOffset(hand) {\r\n    let tiles = convertHandToTileIndexArray(hand);\r\n    let offset = Math.floor((14 - tiles.length) / 3) * 2;\r\n    return offset;\r\n}\r\n\r\n/**\r\n * Converts a character, such as \"p\", to a suit base, such as 10.\r\n * @param {string} character The character to convert.\r\n */\r\nexport function characterToSuit(character) {\r\n    if (character === \"m\" || character === \"w\" || character === \"c\") {\r\n        return 0;\r\n    }\r\n\r\n    if (character === \"p\") {\r\n        return 10;\r\n    }\r\n\r\n    if (character === \"s\" || character === \"b\") {\r\n        return 20;\r\n    }\r\n\r\n    if (character === \"z\" || character === \"h\") {\r\n        return 30;\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\n/**\r\n * Gets the suit character for a tile.\r\n * @param {TileIndex} index The tile to get the suit letter of.\r\n */\r\nexport function suitCharacterFromTile(index) {\r\n    let tensPlace = index % 10;\r\n\r\n    switch (tensPlace) {\r\n        case 0:\r\n            return \"m\";\r\n        case 1:\r\n            return \"p\";\r\n        case 2:\r\n            return \"s\";\r\n        case 3:\r\n            return \"z\";\r\n        default:\r\n            return -1;\r\n    }\r\n}","import oneMan from '../tileImages_white/1m.png';\r\nimport twoMan from '../tileImages_white/2m.png';\r\nimport threeMan from '../tileImages_white/3m.png';\r\nimport fourMan from '../tileImages_white/4m.png';\r\nimport fiveMan from '../tileImages_white/5m.png';\r\nimport redFiveMan from '../tileImages_white/0m.png';\r\nimport sixMan from '../tileImages_white/6m.png';\r\nimport sevenMan from '../tileImages_white/7m.png';\r\nimport eightMan from '../tileImages_white/8m.png';\r\nimport nineMan from '../tileImages_white/9m.png';\r\nimport oneSou from '../tileImages_white/1s.png';\r\nimport twoSou from '../tileImages_white/2s.png';\r\nimport threeSou from '../tileImages_white/3s.png';\r\nimport fourSou from '../tileImages_white/4s.png';\r\nimport fiveSou from '../tileImages_white/5s.png';\r\nimport redFiveSou from '../tileImages_white/0s.png';\r\nimport sixSou from '../tileImages_white/6s.png';\r\nimport sevenSou from '../tileImages_white/7s.png';\r\nimport eightSou from '../tileImages_white/8s.png';\r\nimport nineSou from '../tileImages_white/9s.png';\r\nimport onePin from '../tileImages_white/1p.png';\r\nimport twoPin from '../tileImages_white/2p.png';\r\nimport threePin from '../tileImages_white/3p.png';\r\nimport fourPin from '../tileImages_white/4p.png';\r\nimport fivePin from '../tileImages_white/5p.png';\r\nimport redFivePin from '../tileImages_white/0p.png';\r\nimport sixPin from '../tileImages_white/6p.png';\r\nimport sevenPin from '../tileImages_white/7p.png';\r\nimport eightPin from '../tileImages_white/8p.png';\r\nimport ninePin from '../tileImages_white/9p.png';\r\nimport east from '../tileImages_white/1z.png';\r\nimport south from '../tileImages_white/2z.png';\r\nimport west from '../tileImages_white/3z.png';\r\nimport north from '../tileImages_white/4z.png';\r\nimport haku from '../tileImages_white/5z.png';\r\nimport hatsu from '../tileImages_white/6z.png';\r\nimport chun from '../tileImages_white/7z.png';\r\nimport back from '../tileImages_white/back.png';\r\nimport { convertHandToTenhouString } from './HandConversions';\r\nimport { SUIT_CHARACTERS, ASCII_TILES } from '../Constants';\r\nimport { characterToSuit } from './Utils';\r\n\r\n/** Array of png images for each tile. */\r\nconst images = [\r\n    redFiveMan, oneMan, twoMan, threeMan, fourMan, fiveMan, sixMan, sevenMan, eightMan, nineMan,\r\n    redFivePin, onePin, twoPin, threePin, fourPin, fivePin, sixPin, sevenPin, eightPin, ninePin,\r\n    redFiveSou, oneSou, twoSou, threeSou, fourSou, fiveSou, sixSou, sevenSou, eightSou, nineSou,\r\n    back, east, south, west, north, haku, hatsu, chun\r\n];\r\n\r\n/** Array of localization keys for each number tile value. */\r\nconst valueKeys = [\"values.redFive\", \"values.one\", \"values.two\", \"values.three\", \"values.four\", \"values.five\", \"values.six\", \"values.seven\", \"values.eight\", \"values.nine\"];\r\n/** Array of localization keys for each suit. */\r\nconst suitKeys = [\"suits.characters\", \"suits.circles\", \"suits.bamboo\"];\r\n/** Array of localization keys for each honor tile value. */\r\nconst honorKeys = [\"values.hidden\", \"values.east\", \"values.south\", \"values.west\", \"values.north\", \"values.white\", \"values.green\", \"values.red\"];\r\n\r\n/**\r\n * Gets the png image for the given tile index for use in src tags.\r\n * @param {TileIndex} index The tile index.\r\n * @returns {string} Tile image png, for use in src tags.\r\n */\r\nexport function getTileImage(index) {\r\n    return images[index];\r\n}\r\n\r\n/**\r\n * Converts a tile index into that tile's name.\r\n * @param {Function} t The i18next translation function.\r\n * @param {TileIndex} index The index of the tile to name.\r\n * @param {boolean} verbose Whether to give the full name of the tile, or the short representation. Defaults to true.\r\n * @returns {string} The name of the tile.\r\n */\r\nexport function getTileAsText(t, index, verbose = true) {\r\n    if (index >= 30) {\r\n        return t(honorKeys[index - 30]);\r\n    }\r\n\r\n    if (verbose) {\r\n        const value = valueKeys[index % 10];\r\n        const suit = suitKeys[Math.floor(index / 10)];\r\n\r\n        return t(\"shuupai\", { value: t(value), suit: t(suit) });\r\n    }\r\n    else {\r\n        const value = index % 10;\r\n\r\n        const suit = SUIT_CHARACTERS[Math.floor(index / 10)];\r\n\r\n        return `${value}${suit}`;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts red fives to normal fives.\r\n * @param {TileIndex|TileIndex[]} tiles The tile index to convert, or an array of tile indexes.\r\n * @returns {TileIndex|TileIndex[]} The converted tile(s).\r\n */\r\nexport function convertRedFives(tiles) {\r\n    if (typeof tiles === 'number') {\r\n        if (tiles % 10 === 0) {\r\n            return tiles + 5;\r\n        }\r\n    }\r\n\r\n    if (typeof tiles === 'object' && tiles.length) {\r\n        let result = tiles.slice();\r\n\r\n        for (let i = 0; i < 30; i += 10) {\r\n            result[i + 5] += result[i];\r\n            result[i] = 0;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return tiles;\r\n}\r\n\r\n/**\r\n * Converts a tile or array of tiles into their ascii representations.\r\n * @param {TileIndex|TileIndex[]} tiles The tile index to convert, or an array of tile indexes.\r\n * @returns {string|string[]} The ascii representation of the tile(s).\r\n */\r\nexport function convertTilesToAsciiSymbols(tiles) {\r\n    if (typeof tiles === 'number') {\r\n        return ASCII_TILES[tiles];\r\n    }\r\n\r\n    if (typeof tiles === 'object' && tiles.length) {\r\n        let result = \"\";\r\n\r\n        for (let i = 0; i < tiles.length; i++) {\r\n            result += ASCII_TILES[tiles[i]];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * Converts a tile or array of tiles into a Tenhou-style string, such as 234m567s.\r\n * @param {TileIndex|TileIndex[]} indexes The tile index to convert, or an array of tile indexes.\r\n * @returns {string} The hand string, or \"Error.\" if an invalid parameter was given.\r\n */\r\nexport function convertIndexesToTenhouTiles(indexes) {\r\n    let hand = Array(38).fill(0);\r\n\r\n    if (typeof indexes === 'number') {\r\n        hand[indexes] = 1;\r\n    } else if (typeof indexes === 'object' && indexes.length) {\r\n        for (let i = 0; i < indexes.length; i++) {\r\n            hand[indexes[i]] += 1;\r\n        }\r\n    } else {\r\n        return \"Error.\"\r\n    }\r\n\r\n    return convertHandToTenhouString(hand);\r\n}\r\n\r\n/**\r\n * Converts Tenhou-style tile indexes (from 0 to 135) to a tile index (0 to 37)\r\n * @param {number||number[]} tenhouTiles The Tenhou-style tile index to convert, or an array of Tenhou-style tile indexes.\r\n * @returns {TileIndex|TileIndex[]} The converted tile index(es).\r\n */\r\nexport function convertTenhouTilesToIndex(tenhouTiles) {\r\n    if (typeof tenhouTiles === 'number') {\r\n        return convertTenhouTileToIndex(tenhouTiles);\r\n    }\r\n\r\n    if (typeof tenhouTiles === 'object' && tenhouTiles.map) {\r\n        return tenhouTiles.map((tile) => convertTenhouTileToIndex(tile));\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a Tenhou-style tile index (from 0 to 135) to a tile index (0 to 37)\r\n * @param {number} tenhouTiles The Tenhou-style tile index to convert.\r\n * @returns {TileIndex} The converted tile index.\r\n */\r\nfunction convertTenhouTileToIndex(tenhouTile) {\r\n    let base = Math.floor(tenhouTile / 4);\r\n    let index = tenhouToIndexLookup[base];\r\n\r\n    // Check for red fives.\r\n    if (index < 30 && index % 10 === 5) {\r\n        // If the base index divides evenly into 4, it's a red five.\r\n        if (base % 4 === 0) {\r\n            return index - 5;\r\n        }\r\n    }\r\n\r\n    return index;\r\n}\r\n\r\n/** An array for converting between Tenhou-style tile indexes and our tile indexes. */\r\nconst tenhouToIndexLookup = [\r\n     1,  2,  3,  4,  5,  6,  7,  8,  9,\r\n    11, 12, 13, 14, 15, 16, 17, 18, 19,\r\n    21, 22, 23, 24, 25, 26, 27, 28, 29,\r\n    31, 32, 33, 34, 35, 36, 37\r\n];\r\n\r\n/**\r\n * Converts a string representation of a tile into the index.\r\n * @param {string} tile A string tile, such as 3z\r\n */\r\nexport function convertStringTileToIndex(tile) {\r\n    return parseInt(tile.charAt(0)) + characterToSuit(tile.charAt(1));\r\n}","import React from 'react';\r\nimport { getTileImage, getTileAsText } from '../scripts/TileConversions';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nfunction Tile(props) {\r\n    let { t } = useTranslation();\r\n\r\n    let displayTile = props.displayTile || props.tile;\r\n\r\n    return (\r\n        <img className={props.className}\r\n            name={props.tile}\r\n            src={getTileImage(displayTile)}\r\n            title={getTileAsText(t, displayTile)}\r\n            alt={getTileAsText(t, displayTile)}\r\n            onClick={props.onClick}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Tile;","import React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport Tile from './Tile';\r\n\r\nfunction Hand(props) {\r\n    const tiles = [];\r\n    let index = 0;\r\n\r\n    let hand = props.tiles;\r\n\r\n    if (!hand) {\r\n        return <Row />;\r\n    }\r\n\r\n    let lastDraw = props.lastDraw;\r\n    let hasLastDraw = lastDraw > -1;\r\n\r\n    if (hasLastDraw) {\r\n        hand[lastDraw]--;\r\n    }\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        if (i % 10 === 5 && hand[i - 5] > 0) {\r\n            for (let j = 0; j < hand[i - 5]; j++) {\r\n                tiles.push((\r\n                    <Tile className=\"handTile\"\r\n                        key={index++}\r\n                        tile={i - 5}\r\n                        displayTile={hasLastDraw && props.blind ? 30 : i - 5}\r\n                        onClick={props.onTileClick}\r\n                    />\r\n                ));\r\n            }\r\n        }\r\n\r\n        if (hand[i] === 0) continue;\r\n        if (i % 10 === 0) continue;\r\n\r\n        for (let j = 0; j < hand[i]; j++) {\r\n            tiles.push((\r\n                <Tile className=\"handTile\"\r\n                    key={index++}\r\n                    tile={i}\r\n                    displayTile={hasLastDraw && props.blind ? 30 : i}\r\n                    onClick={props.onTileClick}\r\n                />\r\n            ));\r\n        }\r\n\r\n    }\r\n\r\n    if (hasLastDraw) {\r\n        hand[lastDraw]++;\r\n        tiles.push((\r\n            <Tile className=\"handTile\"\r\n                key={index++}\r\n                tile={lastDraw}\r\n                displayTile={lastDraw}\r\n                onClick={props.onTileClick}\r\n            />\r\n        ));\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {tiles}\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Hand;","import React from 'react';\r\nimport { ListGroupItem, Collapse, Row } from 'reactstrap';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass HistoryMessage extends React.Component {\r\n    /* PROPS\r\n        data (HistoryData),\r\n        verbose,\r\n        concise,\r\n        spoilers\r\n    */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { collapsed: true };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            collapsed: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { t } = this.props;\r\n        if (!this.props.data) return <ListGroupItem></ListGroupItem>;\r\n\r\n        let message = this.props.data.getMessage(t, this.props.concise, this.props.verbose, this.props.spoilers);\r\n        let messageRows = message.split(\"<br/>\").map((message, index) => <Row key={index}>{message}</Row>)\r\n\r\n        return (\r\n            <Collapse isOpen={!this.state.collapsed}>\r\n                <ListGroupItem className={this.props.data.getClassName()}>\r\n                    {messageRows}\r\n                    {this.props.data.hand ? <a className=\"tenhouLink\" href={\"http://tenhou.net/2/?q=\" + this.props.data.hand} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {t(\"history.tenhouLinkText\")}\r\n                    </a> : \"\"}\r\n                </ListGroupItem>\r\n            </Collapse>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(HistoryMessage);","import React from 'react';\r\nimport { ListGroup, Col, Collapse, Button } from 'reactstrap';\r\nimport HistoryMessage from './HistoryMessage';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass History extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = { collapsed: false };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ collapsed: !this.state.collapsed });\r\n    }\r\n\r\n    render() {\r\n        let history = this.props.history.map((historyObject, index) => {\r\n            return (\r\n                <HistoryMessage\r\n                    key={index - this.props.history.length}\r\n                    concise={this.props.concise}\r\n                    data={historyObject}\r\n                    spoilers={this.props.spoilers}\r\n                    verbose={this.props.verbose}\r\n                />\r\n            );\r\n        });\r\n\r\n        let { t } = this.props;\r\n\r\n        return (\r\n            <Col xs=\"12\" sm={this.state.collapsed ? \"12\" : \"\"}>\r\n                <Button className=\"btn-block bg-light\" color=\"basic\" onClick={this.toggle}>{t(\"history.label\")}</Button>\r\n                <Collapse isOpen={!this.state.collapsed}>\r\n                    <ListGroup>\r\n                        {history}\r\n                    </ListGroup>\r\n                </Collapse>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(History);","import React from 'react';\r\nimport { Container, Collapse, Card, CardBody, Button, Row, Col, Input, Label } from 'reactstrap';\r\nimport NumericInput from 'react-numeric-input';\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nclass Settings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            collapsed: true,\r\n            settings: {\r\n                characters: true,\r\n                bamboo: true,\r\n                circles: true,\r\n                honors: false,\r\n                threePlayer: false,\r\n                redFives: 3,\r\n                verbose: true,\r\n                extraConcise: false,\r\n                spoilers: true,\r\n                reshuffle: true,\r\n                simulate: false,\r\n                exceptions: true,\r\n                minShanten: 0,\r\n                sort: true,\r\n                blind: false\r\n            }\r\n        };\r\n\r\n        this.onSettingChanged = this.onSettingChanged.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ collapsed: !this.state.collapsed });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            let savedSettings = window.localStorage.getItem(\"settings\");\r\n            if (savedSettings) {\r\n                savedSettings = JSON.parse(savedSettings);\r\n\r\n                let settings = {\r\n                    characters: savedSettings.characters,\r\n                    bamboo: savedSettings.bamboo,\r\n                    circles: savedSettings.circles,\r\n                    honors: savedSettings.honors,\r\n                    threePlayer: savedSettings.threePlayer,\r\n                    redFives: savedSettings.redFives || 3,\r\n                    verbose: savedSettings.verbose,\r\n                    extraConcise: savedSettings.extraConcise,\r\n                    spoilers: savedSettings.spoilers,\r\n                    reshuffle: savedSettings.reshuffle,\r\n                    simulate: savedSettings.simulate,\r\n                    exceptions: savedSettings.exceptions,\r\n                    minShanten: savedSettings.minShanten || 0,\r\n                    sort: savedSettings.sort === undefined ? true : savedSettings.sort,\r\n                    blind: savedSettings.blind\r\n                }\r\n\r\n                this.setState({\r\n                    settings: settings\r\n                });\r\n\r\n                this.props.onChange(settings);\r\n            } else {\r\n                this.props.onChange(this.state.settings);\r\n            }\r\n        } else {\r\n            this.props.onChange(this.state.settings);\r\n        }\r\n    }\r\n\r\n    onSettingChanged(event, numberString, numberInput) {\r\n        if (!event) return;\r\n\r\n        let settings = this.state.settings;\r\n\r\n        if (typeof event === \"number\") {\r\n            settings[numberInput.id] = event;\r\n        }\r\n        else {\r\n            settings[event.target.id] = !settings[event.target.id];\r\n        }\r\n\r\n        this.setState({\r\n            settings: settings\r\n        });\r\n\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            window.localStorage.setItem(\"settings\", JSON.stringify(settings));\r\n        }\r\n\r\n        this.props.onChange(settings);\r\n    }\r\n\r\n    render() {\r\n        const { t } = this.props;\r\n        return (\r\n            <Container>\r\n                <Button color=\"primary\" onClick={this.toggle}>{t(\"settings.buttonLabel\")}</Button>\r\n                <Collapse isOpen={!this.state.collapsed}>\r\n                    <Card><CardBody>\r\n                        <Row>\r\n                            <Col>\r\n                                {t(\"settings.tilesAllowed\")}\r\n                            </Col>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"characters\"\r\n                                    checked={this.state.settings.characters} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"characters\">{t(\"settings.characters\")}</Label>\r\n                            </Col>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"circles\"\r\n                                    checked={this.state.settings.circles} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"circles\">{t(\"settings.circles\")}</Label>\r\n                            </Col>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"bamboo\"\r\n                                    checked={this.state.settings.bamboo} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"bamboo\">{t(\"settings.bamboo\")}</Label>\r\n                            </Col>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"honors\"\r\n                                    checked={this.state.settings.honors} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"honors\">{t(\"settings.honors\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"threePlayer\"\r\n                                    checked={this.state.settings.threePlayer} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"threePlayer\">{t(\"settings.sanma\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Label className=\"form-check-label\" for=\"redFives\">{t(\"settings.redFives\")}&nbsp;</Label>\r\n                                <NumericInput className=\"form-check-input\" type=\"number\" id=\"redFives\"\r\n                                    min={0} max={12} step={1}\r\n                                    value={this.state.settings.redFives} onChange={this.onSettingChanged} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"verbose\"\r\n                                    checked={this.state.settings.verbose} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"verbose\">{t(\"settings.verbose\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"extraConcise\"\r\n                                    checked={this.state.settings.extraConcise} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"extraConcise\">{t(\"settings.concise\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"spoilers\"\r\n                                    checked={this.state.settings.spoilers} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"spoilers\">{t(\"settings.spoilers\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"reshuffle\"\r\n                                    checked={this.state.settings.reshuffle} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"reshuffle\">{t(\"settings.shuffle\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"simulate\"\r\n                                    checked={this.state.settings.simulate} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"simulate\">{t(\"settings.simulate\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"exceptions\"\r\n                                    checked={this.state.settings.exceptions} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"exceptions\">{t(\"settings.exceptions\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Label className=\"form-check-label\" for=\"minShanten\">{t(\"settings.minShanten\")}&nbsp;</Label>\r\n                                <NumericInput className=\"form-check-input\" type=\"number\" id=\"minShanten\"\r\n                                    min={0} max={4} step={1}\r\n                                    value={this.state.settings.minShanten} onChange={this.onSettingChanged} />\r\n                                <span className=\"blackText\">&nbsp;{t(\"settings.minShantenLimit\")}</span>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"sort\"\r\n                                    checked={this.state.settings.sort} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"sort\">{t(\"settings.sort\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"blind\"\r\n                                    checked={this.state.settings.blind} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"blind\">{t(\"settings.blind\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody></Card>\r\n                </Collapse>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Settings);","import React from 'react';\r\nimport { Button, Col } from 'reactstrap';\r\nimport { convertHandToTenhouString } from '../scripts/HandConversions';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass CopyButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            lastCopy: \"Never copied.\"\r\n        }\r\n    }\r\n\r\n    onClick() {\r\n        const el = document.createElement('textarea');\r\n        el.value = convertHandToTenhouString(this.props.hand);\r\n        el.setAttribute('readonly', '');\r\n        el.style.position = 'absolute';\r\n        el.style.left = '-9999px';\r\n        document.body.appendChild(el);\r\n        const selected =\r\n            document.getSelection().rangeCount > 0\r\n                ? document.getSelection().getRangeAt(0)\r\n                : false;\r\n        el.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(el);\r\n        if (selected) {\r\n            document.getSelection().removeAllRanges();\r\n            document.getSelection().addRange(selected);\r\n        }\r\n\r\n        this.setState({\r\n            lastCopy: convertHandToTenhouString(this.props.hand)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let hasCopied = false;\r\n        if (this.props.hand) {\r\n            hasCopied = this.state.lastCopy === convertHandToTenhouString(this.props.hand);\r\n        }\r\n\r\n        let { t } = this.props;\r\n\r\n        return (\r\n            <Col xs=\"6\" sm=\"3\" md=\"3\" lg=\"2\">\r\n                <Button className=\"btn-block\" color={hasCopied ? \"info\" : \"primary\"} onClick={() => this.onClick()}>{hasCopied ? t(\"trainer.copied\") : t(\"trainer.copyHand\")}</Button>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(CopyButton);","import React from 'react';\r\nimport { Button, Input, InputGroup, InputGroupAddon, Col } from 'reactstrap';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { characterToSuit } from '../scripts/Utils';\r\n\r\nclass LoadButton extends React.Component {\r\n    onClick() {\r\n        let string = document.getElementById(\"loadHandString\").value;\r\n        let characters = string.toLowerCase();\r\n        let hand = Array(38).fill(0);\r\n        let index = 0;\r\n        let offset = -1;\r\n        let tiles = 0;\r\n\r\n        let draw = this.tryRegex(/(\\d{1,2})t/, characters);\r\n        let dora = this.tryRegex(/(\\d{1,2})d/, characters);\r\n        let seatWind = this.tryRegex(/(\\d)j/, characters);\r\n        let roundWind = this.tryRegex(/(\\d)[br]/, characters);\r\n\r\n        characters = characters.split('').reverse();\r\n        while (index < characters.length && tiles < 14) {\r\n            do {\r\n                offset = characterToSuit(characters[index]);\r\n                index++;\r\n            } while (offset === -1 && index < characters.length);\r\n\r\n            while (!isNaN(characters[index]) && index < characters.length && tiles < 14) {\r\n                let tile = parseInt(characters[index]);\r\n\r\n                if (tile > 0) {\r\n                    tile += offset;\r\n\r\n                    if (hand[tile] < 4) {\r\n                        hand[tile]++;\r\n                        tiles++;\r\n                        if (draw === false) draw = tile;\r\n                    }\r\n                }\r\n                else if (tile === 0) {\r\n                    tile += offset;\r\n\r\n                    if (tile !== 30 && hand[tile] + hand[tile + 5] < 4) {\r\n                        hand[tile]++;\r\n                        tiles++;\r\n                        if (draw === false) draw = tile;\r\n                    }\r\n                }\r\n\r\n                index++;\r\n            }\r\n        }\r\n\r\n        let ret = {\r\n            hand,\r\n            tiles,\r\n            draw,\r\n            dora,\r\n            seatWind,\r\n            roundWind\r\n        };\r\n\r\n        this.props.callback(ret);\r\n    }\r\n\r\n    tryRegex(regex, string) {\r\n        let match = regex.exec(string);\r\n\r\n        if (match) {\r\n            return parseInt(match[1]);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        let { t } = this.props;\r\n        return (\r\n            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"8\">\r\n                <InputGroup>\r\n                    <Input id=\"loadHandString\" placeholder=\"123m456p789s12345z\" />\r\n                    <InputGroupAddon addonType=\"append\">\r\n                        <Button color=\"warning\" onClick={() => this.onClick()}>{t(\"trainer.loadButtonLabel\")}</Button>\r\n                    </InputGroupAddon>\r\n                </InputGroup>\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withTranslation()(LoadButton);","import React from 'react';\r\nimport { Col, Collapse, Button, Row, ListGroup, ListGroupItem } from 'reactstrap';\r\nimport Tile from './Tile';\r\nimport { SEAT_NAMES } from '../Constants';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass DiscardPool extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = { collapsed: false };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ collapsed: !this.state.collapsed });\r\n    }\r\n\r\n    render() {\r\n        let players = this.props.players;\r\n        let pools = [];\r\n        let { t } = this.props;\r\n\r\n        for (let i = 0; i < players.length; i++) {\r\n            if (players[i].discards.length < 1) continue;\r\n\r\n            pools.push(\r\n                <ListGroupItem key={i}>\r\n                    <Row><u>{t(players[i].name)} ({t(SEAT_NAMES[players[i].seat])})</u></Row>\r\n                    <Row className=\"no-gutters px-sm-0 px-md-4 px-lg-5 px-xl-0 mx-lg-4\">\r\n                        {players[i].discards.map((tile, index) => {\r\n                            return (\r\n                                <Col xs=\"1\" sm=\"2\" md=\"2\" xl=\"1\" key={players[i].name + index} style={index === players[i].riichiIndex ? { backgroundColor: \"red\" } : {}}>\r\n                                    <Tile className=\"discardTile\" tile={tile} />\r\n                                </Col>\r\n                            );\r\n                        })}\r\n                    </Row>\r\n                </ListGroupItem>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Col xs=\"12\" sm={this.state.collapsed ? \"12\" : \"\"}>\r\n                <Button className=\"btn-block bg-light\" color=\"basic\" onClick={this.toggle}>{t(\"discards.label\")}</Button>\r\n                <Collapse isOpen={!this.state.collapsed}>\r\n                    <ListGroup>\r\n                        <ListGroupItem className=\"justify-content-center\">\r\n                            <span className=\"blackText\">{t(\"discards.discardCount\", { count: this.props.discardCount })}</span>&nbsp;\r\n                            <span className=\"blackText\">{t(\"discards.tilesLeft\", { count: this.props.wallCount })}</span>\r\n                        </ListGroupItem>\r\n                        {pools}\r\n                    </ListGroup>\r\n                </Collapse>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(DiscardPool);","import React from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport Tile from './Tile';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nfunction ValueTileDisplay(props) {\r\n    let { t } = useTranslation();\r\n    return (\r\n        <Row className=\"justify-content-center mt-2\">\r\n            <Col style={{ textAlign: \"right\" }} xs=\"2\" sm=\"3\" md=\"3\" lg=\"2\"><span>{t(\"trainer.roundWind\")}</span></Col>\r\n            <Col xs=\"2\" sm=\"1\"><Tile className=\"discardTile\" tile={props.roundWind} /></Col>\r\n            <Col style={{ textAlign: \"right\" }} xs=\"2\" sm=\"3\" md=\"2\"><span>{t(\"trainer.seatWind\")}</span></Col>\r\n            <Col xs=\"2\" sm=\"1\"><Tile className=\"discardTile\" tile={props.seatWind} /></Col>\r\n            <Col style={{ textAlign: \"right\" }} xs=\"2\" sm=\"3\" md=\"3\" lg=\"2\"><span>{t(\"trainer.doraIndicator\")}</span></Col>\r\n            <Col xs=\"2\" sm=\"1\"><Tile className=\"discardTile\" tile={props.dora} /></Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default ValueTileDisplay;","import React from 'react';\r\nimport { Container, Collapse, Card, CardBody, Button, Row, Col } from 'reactstrap';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass StatsDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleStats = this.toggleStats.bind(this);\r\n        this.toggleConfirm = this.toggleConfirm.bind(this);\r\n        this.state = {\r\n            statsCollapsed: true,\r\n            confirmCollapsed: true\r\n        };\r\n    }\r\n\r\n    toggleStats() {\r\n        this.setState({ statsCollapsed: !this.state.statsCollapsed });\r\n    }\r\n\r\n    toggleConfirm() {\r\n        this.setState({ confirmCollapsed: !this.state.confirmCollapsed });\r\n    }\r\n\r\n    render() {\r\n        let optimalDiscardRate = this.props.values.totalOptimalDiscards / this.props.values.totalDiscards;\r\n        if (isNaN(optimalDiscardRate)) optimalDiscardRate = 0;\r\n        optimalDiscardRate *= 100;\r\n        optimalDiscardRate = Math.round(optimalDiscardRate);\r\n\r\n        let efficiency = this.props.values.totalEfficiency / this.props.values.totalPossibleEfficiency;\r\n        if (isNaN(efficiency)) efficiency = 0;\r\n        efficiency *= 100;\r\n        efficiency = Math.round(efficiency);\r\n\r\n        let averageDiscards = this.props.values.totalDiscards / this.props.values.totalTenpai;\r\n        if (isNaN(averageDiscards)) averageDiscards = 0;\r\n        averageDiscards = Math.round(averageDiscards * 10) / 10;\r\n\r\n        let { t } = this.props;\r\n\r\n        return (\r\n            <Container>\r\n                <Button color=\"primary\" onClick={this.toggleStats}>{t(\"stats.buttonLabel\")}</Button>\r\n                <Collapse isOpen={!this.state.statsCollapsed}>\r\n                    <Card><CardBody>\r\n                        <Row>\r\n                            {t(\"stats.info\")}\r\n                        </Row>\r\n                        <Row>\r\n                            {t(\"stats.ready\", { count: this.props.values.totalTenpai })}\r\n                        </Row>\r\n                        <Row>\r\n                            {t(\"stats.discards\", { count: this.props.values.totalDiscards })}\r\n                        </Row>\r\n                        <Row>\r\n                            {t(\"stats.average\", { average: averageDiscards })}\r\n                        </Row>\r\n                        <Row>\r\n                            {t(\"stats.optimal\", { count: this.props.values.totalOptimalDiscards })}\r\n                        </Row>\r\n                        <Row>\r\n                            {t(\"stats.optimalRate\", { percent: optimalDiscardRate, achieved: this.props.values.totalOptimalDiscards, total: this.props.values.totalDiscards })}\r\n                        </Row>\r\n                        <Row>\r\n                            {t(\"stats.efficiency\", { count: this.props.values.totalEfficiency })}\r\n                        </Row>\r\n                        <Row>\r\n                            {t(\"stats.possible\", { count: this.props.values.totalPossibleEfficiency })}\r\n                        </Row>\r\n                        <Row>\r\n                            {t(\"stats.overall\", { percent: efficiency, achieved: this.props.values.totalEfficiency, total: this.props.values.totalPossibleEfficiency })}\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Button color=\"danger\" onClick={this.toggleConfirm}>{t(\"stats.reset\")}</Button>\r\n                        </Row>\r\n                        <Row>\r\n                            <Collapse isOpen={!this.state.confirmCollapsed}>\r\n                                <Card><CardBody>\r\n                                    <Row>{t(\"stats.confirmation\")}</Row>\r\n                                    <Row>\r\n                                        <Button color=\"danger\" onClick={this.props.onReset}>{t(\"stats.yes\")}</Button>\r\n                                        <Col xs=\"1\" />\r\n                                        <Button color=\"success\" onClick={this.toggleConfirm}>{t(\"stats.no\")}</Button>\r\n                                    </Row>\r\n                                </CardBody></Card>\r\n                            </Collapse>\r\n                        </Row>\r\n                    </CardBody></Card>\r\n                </Collapse>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(StatsDisplay);","import { removeRandomItem } from \"./Utils\";\r\nimport { convertHandToTileIndexArray } from \"./HandConversions\";\r\n\r\n/**\r\n * Generates a random hand of 14 tiles.\r\n * @param {TileCounts} remainingTiles The number of each tile in the wall.\r\n */\r\nexport function generateHand(remainingTiles) {\r\n    let availableTiles = remainingTiles.slice();\r\n    let tilePool = convertHandToTileIndexArray(availableTiles);\r\n\r\n    if (tilePool.length < 14) return { hand: undefined, availableTiles: undefined, tilePool: undefined };\r\n\r\n    let hand = Array(38).fill(0);\r\n\r\n    for (let i = 0; i < 14; i++) {\r\n        let tile = removeRandomItem(tilePool);\r\n        hand[tile]++;\r\n        availableTiles[tile]--;\r\n    }\r\n\r\n    return {\r\n        hand,\r\n        availableTiles,\r\n        tilePool\r\n    };\r\n}\r\n\r\n/**\r\n * Adds a number of tiles to the given hand.\r\n * @param {TileCounts} remainingTiles The number of each tile in the wall.\r\n * @param {TileCounts} hand The number of each tile in the player's hand.\r\n * @param {number} tilesToFill How many tiles to add.\r\n */\r\nexport function fillHand(remainingTiles, hand, tilesToFill) {\r\n    let availableTiles = remainingTiles.slice();\r\n    let tilePool = convertHandToTileIndexArray(availableTiles);\r\n\r\n    if (tilePool.length < tilesToFill) return { hand: undefined, availableTiles: undefined, tilePool: undefined };\r\n\r\n    for (let i = 0; i < tilesToFill; i++) {\r\n        let tile = removeRandomItem(tilePool);\r\n        hand[tile]++;\r\n        availableTiles[tile]--;\r\n    }\r\n\r\n    return {\r\n        hand,\r\n        availableTiles,\r\n        tilePool\r\n    };\r\n}","import { getRandomItem } from \"./Utils\";\r\n\r\n/**\r\n * Determines the best tile to discard when given tiles with equal ukeire.\r\n * @param {UkeireObject[]} ukeireObjects The ukeire objects for each discard.\r\n * @param {TileIndex} dora The current dora.\r\n */\r\nexport function evaluateBestDiscard(ukeireObjects, dora = -1) {\r\n    let ukeire = ukeireObjects.map(o => o.value);\r\n    let bestUkeire = Math.max(...ukeire);\r\n    let bests = [];\r\n\r\n    for (let i = 0; i < ukeire.length; i++) {\r\n        if (ukeire[i] === bestUkeire) {\r\n            bests.push(i);\r\n        }\r\n    }\r\n\r\n    if (!bests.length) return -1;\r\n    if (bests.length === 1) return bests[0];\r\n\r\n    // Avoid suggesting to discard the dora.\r\n    if (bests.indexOf(dora) > -1) bests.splice(bests.indexOf(dora), 1);\r\n\r\n    // Suggest discarding winds first, then dragons, if any are present.\r\n    if (bests.indexOf(32) > -1) return 32;\r\n    if (bests.indexOf(33) > -1) return 33;\r\n    if (bests.indexOf(34) > -1) return 34;\r\n    if (bests.indexOf(31) > -1) return 31;\r\n    if (bests.indexOf(35) > -1) return 35;\r\n    if (bests.indexOf(36) > -1) return 36;\r\n    if (bests.indexOf(37) > -1) return 37;\r\n\r\n    // Suggest discarding terminals.\r\n    for (let i = 1; i < 10; i += 8) {\r\n        for (let j = 0; j < 3; j++) {\r\n            let tile = j + i;\r\n\r\n            if (bests.indexOf(tile) > -1) return tile;\r\n        }\r\n    }\r\n\r\n    // Suggest discarding twos and eights.\r\n    for (let i = 2; i < 10; i += 6) {\r\n        for (let j = 0; j < 3; j++) {\r\n            let tile = j + i;\r\n\r\n            if (bests.indexOf(tile) > -1) return tile;\r\n        }\r\n    }\r\n\r\n    // Suggest a random remaining tile (all are between 3 and 7)\r\n    return getRandomItem(bests);\r\n}\r\n\r\n/**\r\n * Calculates the safety rating for each tile in the player's hand.\r\n * @param {TileCounts} hand An array containing the number of each tile present in the hand.\r\n * @param {TileIndex[]} opponentDiscards An array of tile indexes representing the opponent's discard pool.\r\n * @param {TileCounts} remainingTiles An array containing the number of each tile the player cannot see.\r\n * @param {TileIndex[]} tilesDiscardedAfterRiichi An array of tile indexes discarded after the opponent declared riichi.\r\n * @param {TileIndex} riichiTile The tile index of the tile the opponent declared riichi with.\r\n */\r\nexport function evaluateDiscardSafety(hand, opponentDiscards, remainingTiles, tilesDiscardedAfterRiichi, riichiTile) {\r\n    let safetyRanks = Array(38).fill(0);\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        if (hand[i] <= 0) continue;\r\n\r\n        // Genbutsu\r\n        if (opponentDiscards.indexOf(i) >= 0 || tilesDiscardedAfterRiichi.indexOf(i) >= 0) {\r\n            safetyRanks[i] = 15;\r\n            continue;\r\n        }\r\n\r\n        if (i < 30 && (i % 10 === 1 || i % 10 === 9)) {\r\n            // Terminal\r\n            if (checkIfIsSuji(i, opponentDiscards, remainingTiles, riichiTile)) {\r\n                safetyRanks[i] = 14 - remainingTiles[i];\r\n            } else {\r\n                safetyRanks[i] = 5;\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (i > 30) {\r\n            // Honor\r\n            switch (remainingTiles[i]) {\r\n                case 0:\r\n                    safetyRanks[i] = 14; break;\r\n                case 1:\r\n                    safetyRanks[i] = 13; break;\r\n                case 2:\r\n                    safetyRanks[i] = 10; break;\r\n                default: // 3 remain\r\n                    safetyRanks[i] = 6; break;\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (checkIfIsSuji(i, opponentDiscards, remainingTiles, riichiTile)) {\r\n            switch (i % 10) {\r\n                case 4:\r\n                case 5:\r\n                case 6:\r\n                    safetyRanks[i] = 9;\r\n                    break;\r\n                case 2:\r\n                case 8:\r\n                    safetyRanks[i] = 8;\r\n                    break;\r\n                default: // 3 or 7\r\n                    safetyRanks[i] = 7;\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (i % 10) {\r\n                case 4:\r\n                case 5:\r\n                case 6:\r\n                    safetyRanks[i] = 1;\r\n                    break;\r\n                case 2:\r\n                case 8:\r\n                    safetyRanks[i] = 3;\r\n                    break;\r\n                default: // 3 or 7\r\n                    safetyRanks[i] = 2;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return safetyRanks;\r\n}\r\n\r\n/**\r\n * Returns true if the given tile is a suji of one of the opponent's discarded tiles, and false otherwise.\r\n * @param {TileIndex} tile The tile index to check.\r\n * @param {TileIndex[]} opponentDiscards The tiles the opponent has discarded.\r\n * @param {TileCounts} remainingTiles An array containing the number of each tile the player cannot see.\r\n * @param {TileIndex} riichiTile The tile index of the tile the opponent declared riichi with.\r\n */\r\nfunction checkIfIsSuji(tile, opponentDiscards, remainingTiles, riichiTile) {\r\n    let sujiA = tile - 3;\r\n    let sujiB = tile + 3;\r\n\r\n    let sujiAPassed = false;\r\n    let sujiBPassed = false;\r\n\r\n    if (sujiA % 10 === 0 || Math.floor(sujiA / 10) !== Math.floor(tile / 10)) {\r\n        sujiAPassed = true;\r\n    } else {\r\n        // Riichi suji isn't seen as safe, so just ignore it\r\n        if (sujiA === riichiTile) return false;\r\n\r\n        sujiAPassed = opponentDiscards.indexOf(sujiA) >= 0;\r\n        sujiAPassed = sujiAPassed || remainingTiles[sujiA + 1] === 0 || remainingTiles[sujiA + 2] === 0;\r\n    }\r\n\r\n    if (sujiB % 10 === 0 || Math.floor(sujiB / 10) !== Math.floor(tile / 10)) {\r\n        sujiBPassed = true;\r\n    } else {\r\n        // Riichi suji isn't seen as safe, so just ignore it\r\n        if (sujiB === riichiTile) return false;\r\n\r\n        sujiBPassed = opponentDiscards.indexOf(sujiB) >= 0;\r\n        sujiBPassed = sujiBPassed || remainingTiles[sujiB - 1] === 0 || remainingTiles[sujiB - 2] === 0;\r\n    }\r\n\r\n    return sujiAPassed && sujiBPassed;\r\n}","import { convertRedFives } from \"./TileConversions\";\r\nimport { evaluateBestDiscard } from './Evaluations';\r\n\r\n/**\r\n * Calculates the resulting ukeire from each possible discard in the hand.\r\n * @param {TileCounts} hand The number of each tile in the player's hand.\r\n * @param {TileCounts} remainingTiles The number of each tile the player cannot see.\r\n * @param {Function} shantenFunction The function to use to calculate shanten\r\n * @param {number} baseShanten The hand's current shanten, if precalculated.\r\n * @param {number} shantenOffset The hand's current shanten offset, if precalculated.\r\n * @returns {UkeireObject[]} The ukeire object for each discard.\r\n */\r\nexport function calculateDiscardUkeire(hand, remainingTiles, shantenFunction, baseShanten = -2) {\r\n    let results = Array(hand.length).fill(0);\r\n    let convertedHand = convertRedFives(hand);\r\n\r\n    if (baseShanten === -2) {\r\n        baseShanten = shantenFunction(convertedHand);\r\n    }\r\n\r\n    // Check the ukeire of each hand that results from each discard\r\n    for (let handIndex = 0; handIndex < convertedHand.length; handIndex++) {\r\n        if (convertedHand[handIndex] === 0) {\r\n            results[handIndex] = { value: 0, tiles: [] };\r\n            continue;\r\n        }\r\n\r\n        convertedHand[handIndex]--;\r\n        let ukeire = calculateUkeire(convertedHand, remainingTiles, shantenFunction, baseShanten);\r\n        convertedHand[handIndex]++;\r\n\r\n        results[handIndex] = ukeire;\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n/**\r\n * Calculates the ukeire of a hand.\r\n * @param {TileCounts} hand The number of each tile in the player's hand.\r\n * @param {TileCounts} remainingTiles The number of each tile the player cannot see.\r\n * @param {Function} shantenFunction The function to use to calculate shanten\r\n * @param {number} baseShanten The hand's current shanten, if precalculated.\r\n * @param {number} shantenOffset The hand's current shanten offset, if precalculated.\r\n * @returns {UkeireObject} The ukeire data.\r\n */\r\nexport function calculateUkeire(hand, remainingTiles, shantenFunction, baseShanten = -2) {\r\n    let convertedHand = convertRedFives(hand);\r\n    let convertedTiles = convertRedFives(remainingTiles);\r\n\r\n    if (baseShanten === -2) {\r\n        baseShanten = shantenFunction(convertedHand);\r\n    }\r\n\r\n    let value = 0;\r\n    let tiles = [];\r\n\r\n    // Check adding every tile to see if it improves the shanten\r\n    for (let addedTile = 1; addedTile < convertedHand.length; addedTile++) {\r\n        if (remainingTiles[addedTile] === 0) continue;\r\n        if (addedTile % 10 === 0) continue;\r\n\r\n        convertedHand[addedTile]++;\r\n\r\n        if (shantenFunction(convertedHand, baseShanten - 1) < baseShanten) {\r\n            // Improves shanten. Add the number of remaining tiles to the ukeire count\r\n            value += convertedTiles[addedTile];\r\n            tiles.push(addedTile);\r\n        }\r\n\r\n        convertedHand[addedTile]--;\r\n    }\r\n\r\n    return {\r\n        value,\r\n        tiles\r\n    };\r\n}\r\n\r\n/**\r\n * Calculates the resulting number of upgrades from each possible discard in the hand.\r\n * @param {TileCounts} hand The number of each tile in the player's hand.\r\n * @param {TileCounts} remainingTiles The number of each tile the player cannot see.\r\n * @param {Function} shantenFunction The function to use to calculate shanten\r\n * @param {number} baseShanten The hand's current shanten, if precalculated.\r\n * @param {number} shantenOffset The hand's current shanten offset, if precalculated.\r\n */\r\nexport function calculateDiscardUkeireUpgrades(hand, remainingTiles, shantenFunction, baseShanten = -2) {\r\n    let results = Array(hand.length).fill(0);\r\n    let convertedHand = convertRedFives(hand);\r\n\r\n    if (baseShanten === -2) {\r\n        baseShanten = shantenFunction(convertedHand);\r\n    }\r\n\r\n    let baseUkeire = calculateUkeire(convertedHand, remainingTiles, shantenFunction, baseShanten).value;\r\n\r\n    for (let handIndex = 0; handIndex < hand.length; handIndex++) {\r\n        if (hand[handIndex] === 0) continue;\r\n\r\n        hand[handIndex]--;\r\n        let upgrades = calculateUkeireUpgrades(convertedHand, remainingTiles, shantenFunction, baseShanten, baseUkeire);\r\n        hand[handIndex]++;\r\n\r\n        for (let i = 0; i < hand[handIndex]; i++) {\r\n            results[handIndex] = upgrades;\r\n        }\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n/**\r\n * Calculates how many tiles can improve the ukeire of a hand.\r\n * @param {TileCounts} hand The number of each tile in the player's hand.\r\n * @param {TileCounts} remainingTiles The number of each tile the player cannot see.\r\n * @param {Function} shantenFunction The function to use to calculate shanten\r\n * @param {number} baseShanten The hand's current shanten, if precalculated.\r\n * @param {number} shantenOffset The hand's current shanten offset, if precalculated.\r\n */\r\nexport function calculateUkeireUpgrades(hand, remainingTiles, shantenFunction, baseShanten = -2, baseUkeire = -1) {\r\n    let convertedHand = convertRedFives(hand);\r\n    let convertedTiles = convertRedFives(remainingTiles);\r\n\r\n    if (baseShanten === -2) {\r\n        baseShanten = shantenFunction(convertedHand);\r\n    }\r\n\r\n    if (baseUkeire === -1) {\r\n        baseUkeire = calculateUkeire(hand, remainingTiles, shantenFunction, baseShanten).value;\r\n    }\r\n\r\n    let value = 0;\r\n    let tiles = [];\r\n\r\n    // Check adding every tile to see if it improves the ukeire\r\n    for (let addedTile = 1; addedTile < convertedHand.length; addedTile++) {\r\n        if (remainingTiles[addedTile] === 0) continue;\r\n        if (addedTile % 10 === 0) continue;\r\n\r\n        convertedHand[addedTile]++;\r\n        remainingTiles[addedTile]--;\r\n\r\n        if (shantenFunction(convertedHand, baseShanten - 1) === baseShanten\r\n            && calculateUkeire(convertedHand, remainingTiles, shantenFunction, baseShanten).value > baseUkeire) {\r\n            // Find the best tile to cut\r\n            let discards = calculateDiscardUkeire(convertedHand, remainingTiles, shantenFunction, baseShanten);\r\n            let bestDiscard = evaluateBestDiscard(discards);\r\n\r\n            if (addedTile !== bestDiscard) {\r\n                // Check the ukeire of the hand after cutting the best tile\r\n                convertedHand[bestDiscard]--;\r\n                let newUkeire = calculateUkeire(convertedHand, remainingTiles, shantenFunction, baseShanten).value;\r\n\r\n                if (newUkeire > baseUkeire) {\r\n                    value += convertedTiles[addedTile];\r\n                    tiles.push({ tile: addedTile, discard: bestDiscard, count: convertedTiles[addedTile], resultingUkeire: newUkeire });\r\n                }\r\n\r\n                convertedHand[bestDiscard]++;\r\n            }\r\n        }\r\n\r\n        convertedHand[addedTile]--;\r\n        remainingTiles[addedTile]++;\r\n    }\r\n\r\n    return {\r\n        value,\r\n        tiles\r\n    };\r\n}\r\n\r\n/**\r\n * Calculates the ukeire of a hand, ignoring all other revealed tiles.\r\n * @param {TileCounts} hand The hand to check.\r\n * @param {TileCounts} existingTiles The number of each tile that could exist in the game.\r\n * @param {Function} shantenFunction The shanten function to use.\r\n */\r\nexport function calculateUkeireFromOnlyHand(hand, existingTiles, shantenFunction) {\r\n    let convertedHand = convertRedFives(hand);\r\n    let remainingTiles = convertRedFives(existingTiles);\r\n\r\n    for (let i = 0; i < remainingTiles.length; i++) {\r\n        existingTiles[i] = Math.max(0, existingTiles[i] - convertedHand[i]);\r\n    }\r\n\r\n    return calculateUkeire(convertedHand, existingTiles, shantenFunction);\r\n}","import { convertRedFives } from \"./TileConversions\";\r\n\r\n// Converted from http://cmj3.web.fc2.com/#syanten\r\n\r\nlet hand = new Array(38);\r\nlet completeSets;\r\nlet pair;\r\nlet partialSets;\r\nlet bestShanten;\r\nlet mininumShanten;\r\n\r\n/**\r\n * Calculates the minimum shanten of the hand, considering a standard hand, seven pairs, or thirteen orphans.\r\n * @param {TileCounts} handToCheck The hand to calculate the shanten of.\r\n */\r\nexport function calculateMinimumShanten(handToCheck, mininumShanten = -1) {\r\n    let standardShanten = calculateStandardShanten(handToCheck, mininumShanten);\r\n    let chiitoiShanten = calculateChiitoitsuShanten(handToCheck);\r\n    let kokushiShanten = calculateKokushiShanten(handToCheck);\r\n\r\n    return Math.min(standardShanten, chiitoiShanten, kokushiShanten);\r\n}\r\n\r\n/**\r\n * Calculates how many tiles away from a complete knitted straight hand the current hand is. (WIP...)\r\n * @param {TileCounts} handToCheck The hand to calculate the shanten of.\r\n */\r\nexport function calculateKnittedShanten(handToCheck) {\r\n    let honorsCount = 0;\r\n\r\n    for (let i = 31; i < handToCheck.length; i++) {\r\n        if (handToCheck[i] >= 1) {\r\n            honorsCount++;\r\n        }\r\n    }\r\n\r\n    let bestKnittedStraight = findMostViableKnittedStraight(handToCheck);\r\n    let knittedAndHonorsShanten = 13 - bestKnittedStraight.length - honorsCount;\r\n\r\n    let hand = handToCheck.slice();\r\n    for (let i = 0; i < bestKnittedStraight.length; i++) {\r\n        hand[bestKnittedStraight[i]]--;\r\n    }\r\n\r\n    let knittedStraightShanten = 9 - bestKnittedStraight.length;\r\n    let standardShanten = calculateStandardShanten(hand);\r\n    let combinedShanten = standardShanten - Math.floor(bestKnittedStraight / 3) * 2;\r\n\r\n    return Math.min(combinedShanten, knittedAndHonorsShanten);\r\n}\r\n\r\n/**\r\n * Finds which knitted straight the hand is closest to.\r\n * @param {TileCounts} handToCheck The hand to check.\r\n */\r\nfunction findMostViableKnittedStraight(handToCheck) {\r\n    let possibilites = [\r\n        [1, 4, 7, 12, 15, 18, 23, 26, 29],\r\n        [1, 4, 7, 22, 25, 28, 13, 16, 19],\r\n        [11, 14, 17, 22, 25, 28, 3, 6, 9],\r\n        [11, 14, 17, 2, 5, 8, 23, 26, 29],\r\n        [21, 24, 27, 2, 5, 8, 13, 16, 19],\r\n        [21, 24, 27, 12, 15, 18, 3, 6, 9]\r\n    ];\r\n\r\n    let best = [];\r\n\r\n    for (let i = 0; i < possibilites.length; i++) {\r\n        let current = [];\r\n\r\n        for (let j = 0; j < possibilites[i].length; j++) {\r\n            if (handToCheck[possibilites[i][j]] >= 1) {\r\n                current.push(possibilites[i][j]);\r\n            }\r\n        }\r\n\r\n        if (current.length > best.length) {\r\n            best = current.slice();\r\n\r\n            // 9 is the best case scenario\r\n            if (best.length === 9) return best;\r\n        }\r\n    }\r\n\r\n    return best;\r\n}\r\n\r\n/**\r\n * Calculates how many tiles away from chiitoitsu/seven pairs the hand is.\r\n * @param {TileCounts} handToCheck The hand to calculate the shanten of.\r\n */\r\nfunction calculateChiitoitsuShanten(handToCheck) {\r\n    hand = convertRedFives(handToCheck);\r\n    let pairCount = 0, uniqueTiles = 0;\r\n\r\n    for (let i = 1; i < hand.length; i++) {\r\n        if (hand[i] === 0) continue;\r\n\r\n        uniqueTiles++;\r\n\r\n        if (hand[i] >= 2) {\r\n            pairCount++;\r\n        }\r\n    }\r\n\r\n    let shanten = 6 - pairCount;\r\n\r\n    if (uniqueTiles < 7) {\r\n        shanten += 7 - uniqueTiles;\r\n    }\r\n\r\n    return shanten;\r\n}\r\n\r\n/**\r\n * Calculates how many tiles away from kokushi/thirteen orphans the hand is.\r\n * @param {TileCounts} handToCheck The hand to calculate the shanten of. \r\n */\r\nfunction calculateKokushiShanten(handToCheck) {\r\n    let uniqueTiles = 0;\r\n    let hasPair = 0;\r\n\r\n    for (let i = 1; i < handToCheck.length; i++) {\r\n        if (i % 10 === 1 || i % 10 === 9 || i > 30) {\r\n            if (handToCheck[i] !== 0) {\r\n                uniqueTiles++;\r\n\r\n                if (handToCheck[i] >= 2) {\r\n                    hasPair = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return 13 - uniqueTiles - hasPair;\r\n}\r\n\r\n/**\r\n * Calculates how many tiles away from a complete standard hand the given hand is.\r\n * @param {TileCounts} handToCheck The hand to calculate the shanten of.\r\n */\r\nexport function calculateStandardShanten(handToCheck, mininumShanten_ = -1) {\r\n    hand = convertRedFives(handToCheck);\r\n    mininumShanten = mininumShanten_;\r\n\r\n    // Initialize variables\r\n    completeSets = 0;\r\n    pair = 0;\r\n    partialSets = 0;\r\n    bestShanten = 8;\r\n\r\n    // Loop through hand, removing all pair candidates and checking their shanten\r\n    for (let i = 1; i < hand.length; i++) {\r\n        if (hand[i] >= 2) {\r\n            pair++;\r\n            hand[i] -= 2;\r\n            removeCompletedSets(1);\r\n            hand[i] += 2;\r\n            pair--;\r\n        }\r\n    }\r\n\r\n    // Check shanten when there's nothing used as a pair\r\n    removeCompletedSets(1);\r\n\r\n    return bestShanten;\r\n}\r\n\r\n/**\r\n * Removes all possible combinations of complete sets from the hand and recursively checks the shanten of each.\r\n * @param {TileIndex} i The current tile index to check from.\r\n */\r\nfunction removeCompletedSets(i) {\r\n    if (bestShanten <= mininumShanten) return;\r\n    // Skip to the next tile that exists in the hand.\r\n    for (; i < hand.length && hand[i] === 0; i++) { }\r\n\r\n    if (i >= hand.length) {\r\n        // We've gone through the whole hand, now check for partial sets.\r\n        removePotentialSets(1);\r\n        return;\r\n    }\r\n\r\n    // Pung\r\n    if (hand[i] >= 3) {\r\n        completeSets++;\r\n        hand[i] -= 3;\r\n        removeCompletedSets(i);\r\n        hand[i] += 3;\r\n        completeSets--;\r\n    }\r\n\r\n    // Chow\r\n    if (i < 30 && hand[i + 1] !== 0 && hand[i + 2] !== 0) {\r\n        completeSets++;\r\n        hand[i]--; hand[i + 1]--; hand[i + 2]--;\r\n        removeCompletedSets(i);\r\n        hand[i]++; hand[i + 1]++; hand[i + 2]++;\r\n        completeSets--;\r\n    }\r\n\r\n    // Check all alternative hand configurations\r\n    removeCompletedSets(i + 1);\r\n}\r\n\r\n/**\r\n * Removes all possible combinations of pseudo sets from the hand and recursively checks the shanten of each.\r\n * @param {TileIndex} i The current tile index to check from.\r\n */\r\nfunction removePotentialSets(i) {\r\n    if (bestShanten <= mininumShanten) return;\r\n    // Skip to the next tile that exists in the hand\r\n    for (; i < hand.length && hand[i] === 0; i++) { }\r\n\r\n    if (i >= hand.length) {\r\n        // We've checked everything. See if this shanten is better than the current best.\r\n        let currentShanten = 8 - (completeSets * 2) - partialSets - pair;\r\n        if (currentShanten < bestShanten) {\r\n            bestShanten = currentShanten;\r\n        }\r\n        return;\r\n    }\r\n\r\n    // A standard hand will only ever have four groups plus a pair.\r\n    if (completeSets + partialSets < 4) {\r\n        // Pair\r\n        if (hand[i] === 2) {\r\n            partialSets++;\r\n            hand[i] -= 2;\r\n            removePotentialSets(i);\r\n            hand[i] += 2;\r\n            partialSets--;\r\n        }\r\n\r\n        // Edge or Side wait protorun\r\n        if (i < 30 && hand[i + 1] !== 0) {\r\n            partialSets++;\r\n            hand[i]--; hand[i + 1]--;\r\n            removePotentialSets(i);\r\n            hand[i]++; hand[i + 1]++;\r\n            partialSets--;\r\n        }\r\n\r\n        // Closed wait protorun\r\n        if (i < 30 && i % 10 <= 8 && hand[i + 2] !== 0) {\r\n            partialSets++;\r\n            hand[i]--; hand[i + 2]--;\r\n            removePotentialSets(i);\r\n            hand[i]++; hand[i + 2]++;\r\n            partialSets--;\r\n        }\r\n    }\r\n\r\n    // Check all alternative hand configurations\r\n    removePotentialSets(i + 1);\r\n}\r\n\r\nexport default calculateMinimumShanten;","import React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport Tile from './Tile';\r\n\r\nfunction SortedHand(props) {\r\n    const tiles = [];\r\n\r\n    let hand = props.tiles;\r\n\r\n    if (!hand) {\r\n        return <Row />;\r\n    }\r\n\r\n    let lastDraw = props.lastDraw;\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        tiles.push((\r\n            <Tile className=\"handTile\"\r\n                key={index++}\r\n                tile={hand[i]}\r\n                onClick={props.onTileClick}\r\n            />\r\n        ));\r\n    }\r\n\r\n    if (lastDraw > -1) {\r\n        tiles.push((\r\n            <Tile className=\"handTile\"\r\n                key={index++}\r\n                tile={lastDraw}\r\n                onClick={props.onTileClick}\r\n            />\r\n        ));\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {tiles}\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default SortedHand;","export default class Player {\r\n    constructor(hand = []) {\r\n        this.name = \"\";\r\n        /** @type {number[]} */\r\n        this.hand = hand;\r\n        /** @type {number[]} */\r\n        this.discards = [];\r\n        /** @type {number[]} */\r\n        this.calledTiles = [];\r\n        /** @type {number[]} */\r\n        this.discardsAfterRiichi = [];\r\n        this.riichiTile = -1;\r\n        /** The discard with which this player declared riichi. */\r\n        this.riichiIndex = -1;\r\n        this.seat = 0;\r\n        this.points = 25000;\r\n    }\r\n\r\n    /**\r\n     * Returns whether this player is in riichi.\r\n     */\r\n    isInRiichi() {\r\n        return this.riichiTile > -1;\r\n    }\r\n\r\n    /**\r\n     * Returns whether this player's turn comes before the other player's.\r\n     * @param {Player} player The player to compare with.\r\n     */\r\n    takesTurnBefore(player) {\r\n        return this.seat < player.seat;\r\n    }\r\n\r\n    /**\r\n     * Adds the call to the player's calls and removes the tiles from the player's hand.\r\n     * @param {number[]} calledTiles The tiles that are in the call.\r\n     */\r\n    callTiles(calledTiles) {\r\n        this.calledTiles.push(calledTiles);\r\n\r\n        if (calledTiles.length === 1) {\r\n            // kita\r\n            this.hand[calledTiles[0]]--;\r\n        } else if (calledTiles.length === 4) {\r\n            // kan\r\n            this.hand[calledTiles[0]] = 0;\r\n        } else {\r\n            // pon / chi\r\n            for (let i = 1; i < calledTiles.length; i++) {\r\n                this.hand[calledTiles[i]]--;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the given tile from the player's hand and adds it to their discards.\r\n     * @param {number} tile The discarded tile.\r\n     */\r\n    discardTile(tile) {\r\n        this.discards.push(tile);\r\n        this.hand[tile]--;\r\n\r\n        if (this.riichiTile === -2) {\r\n            // This player just declared riichi, so this is their riichi tile.\r\n            this.riichiTile = tile;\r\n            this.riichiIndex = this.discards.length - 1;\r\n        }\r\n    }\r\n}","/**\r\n * Stores a localization key and parameters for later translation.\r\n */\r\nexport default class LocalizedMessage {\r\n    /**\r\n     * @param {String} key The localization key.\r\n     * @param {Object} params The parameters used by the localization.\r\n     */\r\n    constructor(key, params = {}) {\r\n        this.key = key;\r\n        this.params = params;\r\n    }\r\n\r\n    /**\r\n     * Returns the localized string.\r\n     * @param {Function} t The i18next translation function.\r\n     */\r\n    generateString(t) {\r\n        return t(this.key, this.params);\r\n    }\r\n}","import LocalizedMessage from \"./LocalizedMessage\";\r\n\r\nexport default class HistoryData {\r\n    /**\r\n     * A history object containing just a message.\r\n     * @param {LocalizedMessage} message \r\n     */\r\n    constructor(message) {\r\n        this.message = message;\r\n    }\r\n\r\n    /**\r\n     * Generates a localized string.\r\n     * @param {Function} t The i18next translation function.\r\n     * @param {bool} concise Whether to use concise language.\r\n     * @param {bool} verbose Whether to use verbose tile names.\r\n     * @param {bool} spoilers Whether to give spoilers.\r\n     * @returns {string} The localized text associated with this history message.\r\n     */\r\n    getMessage(t, concise, verbose, spoilers) {\r\n        if (!this.message) return \"\";\r\n\r\n        return this.message.generateString(t);\r\n    }\r\n\r\n    /** Gets the class that this history message should have. */\r\n    getClassName() {\r\n        if (!this.message || !this.message.key) return \"\";\r\n\r\n        if (this.message.key.indexOf(\"error\") > -1) {\r\n            return \"bg-danger text-white\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n}","import { getTileAsText } from \"../../scripts/TileConversions\";\r\nimport HistoryData from \"../../models/HistoryData\";\r\n\r\nexport default class UkeireHistoryData extends HistoryData {\r\n    /** A history object for the ukeire trainer, which tells the efficiency of a given discard. */\r\n    constructor(chosenTile = -1, chosenUkeire = -1, bestTile = -1, bestUkeire = -1, shanten = -1, hand = \"\", handUkeire = -1, discards = [], drawnTile = -1, message = undefined) {\r\n        super(message);\r\n        this.chosenTile = chosenTile;\r\n        this.chosenUkeire = chosenUkeire;\r\n        this.bestTile = bestTile;\r\n        this.bestUkeire = bestUkeire;\r\n        this.shanten = shanten;\r\n        this.hand = hand;\r\n        this.handUkeire = handUkeire;\r\n        this.discards = discards;\r\n        this.drawnTile = drawnTile;\r\n    }\r\n\r\n    getMessage(t, concise, verbose, spoilers) {\r\n        let mode = \"verbose\";\r\n        if (concise) mode = \"concise\";\r\n\r\n        let result = t(`history.${mode}.discard`, { tile: getTileAsText(t, this.chosenTile, verbose) });\r\n\r\n        if (this.chosenUkeire.value > 0 || this.shanten === 0) {\r\n            result += t(`history.${mode}.acceptance`, { count: this.chosenUkeire.value });\r\n        }\r\n        else {\r\n            result += t(`history.${mode}.loweredShanten`)\r\n        }\r\n\r\n        if (this.chosenUkeire.value < this.bestUkeire) {\r\n            result += t(`history.${mode}.optimal`);\r\n\r\n            if (spoilers) {\r\n                result += t(`history.${mode}.optimalSpoiler`, { tile: getTileAsText(t, this.bestTile, verbose) });\r\n            }\r\n\r\n            result += t(`history.${mode}.acceptance`, { count: this.bestUkeire });\r\n        }\r\n        else {\r\n            result += t(`history.${mode}.best`);\r\n        }\r\n\r\n        if (this.shanten <= 0 && this.handUkeire.value === 0) {\r\n            result += t(`history.${mode}.exceptionalNoten`);\r\n        }\r\n\r\n        if (this.isFuriten()) {\r\n            if (this.shanten <= 0) {\r\n                result += t(`history.${mode}.furiten`);\r\n            } else {\r\n                result += t(`history.${mode}.furitenWarning`);\r\n            }\r\n        }\r\n\r\n        if (this.shanten > 0) {\r\n            if (this.drawnTile === -1) {\r\n                result += t(`history.${mode}.exhausted`);\r\n            } else {\r\n                result += t(`history.${mode}.draw`, { tile: getTileAsText(t, this.drawnTile, verbose) })\r\n            }\r\n        }\r\n\r\n        result += super.getMessage(t);\r\n\r\n        return result;\r\n    }\r\n\r\n    getClassName() {\r\n        let className = \"\";\r\n\r\n        if (this.chosenUkeire.value <= 0 && this.shanten > 0) {\r\n            className = \"bg-danger text-white\";\r\n        }\r\n        else if (this.bestUkeire === this.chosenUkeire.value) {\r\n            className = \"bg-success text-white\";\r\n        }\r\n        else {\r\n            className = \"bg-warning\";\r\n        }\r\n\r\n        return className;\r\n    }\r\n\r\n    /** Returns whether the hand is in furiten, or might be later. */\r\n    isFuriten() {\r\n        return this.chosenUkeire.tiles.some(tile => this.discards.includes(tile));\r\n    }\r\n}","import React from 'react';\r\nimport { Container, Row, Button, Col } from 'reactstrap';\r\nimport Hand from '../components/Hand';\r\nimport History from \"../components/History\";\r\nimport Settings from '../components/ukeire-quiz/Settings';\r\nimport CopyButton from '../components/CopyButton';\r\nimport LoadButton from '../components/LoadButton';\r\nimport DiscardPool from \"../components/DiscardPool\";\r\nimport ValueTileDisplay from \"../components/ValueTileDisplay\";\r\nimport StatsDisplay from \"../components/ukeire-quiz/StatsDisplay\";\r\nimport { generateHand, fillHand } from '../scripts/GenerateHand';\r\nimport { calculateDiscardUkeire, calculateUkeireFromOnlyHand } from \"../scripts/UkeireCalculator\";\r\nimport { calculateMinimumShanten, calculateStandardShanten } from \"../scripts/ShantenCalculator\";\r\nimport { convertRedFives } from \"../scripts/TileConversions\";\r\nimport { convertHandToTenhouString, convertHandToTileIndexArray } from \"../scripts/HandConversions\";\r\nimport { evaluateBestDiscard } from \"../scripts/Evaluations\";\r\nimport { shuffleArray, removeRandomItem, getRandomItem } from '../scripts/Utils';\r\nimport SortedHand from '../components/SortedHand';\r\nimport Player from '../models/Player';\r\nimport { PLAYER_NAMES } from '../Constants';\r\nimport { withTranslation } from 'react-i18next';\r\nimport LocalizedMessage from '../models/LocalizedMessage';\r\nimport UkeireHistoryData from '../components/ukeire-quiz/UkeireHistoryData';\r\nimport HistoryData from '../models/HistoryData';\r\n\r\nclass UkeireQuiz extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onSettingsChanged = this.onSettingsChanged.bind(this);\r\n        this.onTileClicked = this.onTileClicked.bind(this);\r\n        this.loadHand = this.onHandLoaded.bind(this);\r\n        this.state = {\r\n            hand: null,\r\n            lastDraw: -1,\r\n            remainingTiles: null,\r\n            tilePool: null,\r\n            players: [],\r\n            discardCount: 0,\r\n            optimalCount: 0,\r\n            achievedTotal: 0,\r\n            possibleTotal: 0,\r\n            settings: { /* See ../components/ukeire-quiz/Settings.js */ },\r\n            stats: {\r\n                totalDiscards: 0,\r\n                totalTenpai: 0,\r\n                totalEfficiency: 0,\r\n                totalPossibleEfficiency: 0,\r\n                totalOptimalDiscards: 0\r\n            },\r\n            history: [],\r\n            isComplete: false,\r\n            roundWind: 31,\r\n            seatWind: 31,\r\n            dora: 1,\r\n            shuffle: [],\r\n            disclaimerSeen: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            let savedStats = window.localStorage.getItem(\"stats\");\r\n            if (savedStats) {\r\n                savedStats = JSON.parse(savedStats);\r\n\r\n                this.setState({\r\n                    stats: {\r\n                        totalDiscards: savedStats.totalDiscards,\r\n                        totalTenpai: savedStats.totalTenpai,\r\n                        totalEfficiency: savedStats.totalEfficiency,\r\n                        totalPossibleEfficiency: savedStats.totalPossibleEfficiency,\r\n                        totalOptimalDiscards: savedStats.totalOptimalDiscards\r\n                    }\r\n                }, () => this.onNewHand());\r\n            } else {\r\n                this.setState({}, () => this.onNewHand());\r\n            }\r\n        }\r\n        else {\r\n            this.setState({}, () => this.onNewHand());\r\n        }\r\n    }\r\n\r\n    onSettingsChanged(settings) {\r\n        this.setState({\r\n            settings: settings\r\n        });\r\n    }\r\n\r\n    /** Puts all the tiles in the player's hand into the player's discards. */\r\n    discardHand() {\r\n        let hand = this.state.hand;\r\n        let players = this.state.players.slice();\r\n\r\n        for (let i = 0; i < hand.length; i++) {\r\n            if (hand[i] === 0) continue;\r\n\r\n            for (let j = 0; j < hand[i]; j++) {\r\n                players[0].discards.push(i);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            players: players\r\n        });\r\n    }\r\n\r\n    /** \r\n     * Randomly chooses between East and South round. \r\n     * @returns {number} 31 for East, 32 for South\r\n     */\r\n    pickRoundWind() {\r\n        return getRandomItem([31, 32]);\r\n    }\r\n\r\n    /**\r\n     * Randomly chooses a seat for the player, between East, South, West, and North (unless it's three player)\r\n     * @returns {number} A number between 31 and 34\r\n     */\r\n    pickSeatWind() {\r\n        let possibilities = [31, 32, 33];\r\n        if (!this.state.settings.threePlayer) {\r\n            possibilities.push(34);\r\n        }\r\n\r\n        return getRandomItem(possibilities);\r\n    }\r\n\r\n    /**\r\n     * Sets the state to a clean slate based on the given parameters.\r\n     * @param {TileCounts} hand The player's hand.\r\n     * @param {TileCounts} availableTiles The tiles remaining in the wall.\r\n     * @param {TileIndex[]} tilePool A list of tile indexes representing the remaining tiles.\r\n     * @param {UkeireHistoryData[]} history A list of history objects.\r\n     * @param {TileIndex} dora The dora indicator.\r\n     * @param {TileIndex} lastDraw The tile the player just drew.\r\n     * @param {TileIndex} seatWind The player's seat.\r\n     * @param {TileIndex} roundWind The round.\r\n     */\r\n    setNewHandState(hand, availableTiles, tilePool, history, dora, lastDraw = false, seatWind = false, roundWind = false) {\r\n        history.unshift(new HistoryData(new LocalizedMessage(\"trainer.start\", { hand: convertHandToTenhouString(hand) })));\r\n\r\n        let players = [];\r\n        let numberOfPlayers = this.state.settings.threePlayer ? 3 : 4;\r\n        seatWind = seatWind || this.pickSeatWind();\r\n\r\n        for (let i = 0; i < numberOfPlayers; i++) {\r\n            let player = new Player();\r\n            player.name = PLAYER_NAMES[i];\r\n            player.seat = (seatWind - 31 + i) % numberOfPlayers;\r\n            players.push(player);\r\n        }\r\n\r\n        if (lastDraw !== false) hand[lastDraw]--;\r\n        let shuffle = convertHandToTileIndexArray(hand);\r\n        if (lastDraw !== false) hand[lastDraw]++;\r\n        shuffle = shuffleArray(shuffle);\r\n\r\n        this.setState({\r\n            hand: hand,\r\n            remainingTiles: availableTiles,\r\n            tilePool: tilePool,\r\n            players: players,\r\n            discardCount: 0,\r\n            optimalCount: 0,\r\n            achievedTotal: 0,\r\n            possibleTotal: 0,\r\n            history: history,\r\n            isComplete: false,\r\n            lastDraw: lastDraw || shuffle.pop(),\r\n            roundWind: roundWind || this.pickRoundWind(),\r\n            seatWind: seatWind,\r\n            dora: dora,\r\n            shuffle: shuffle\r\n        });\r\n    }\r\n\r\n    /** Generates a new hand and fresh game state. */\r\n    onNewHand() {\r\n        let history = [];\r\n        let dora = 1;\r\n        let hand, availableTiles, tilePool;\r\n\r\n        let minShanten = this.state.settings.minShanten;\r\n        minShanten = Math.max(0, minShanten);\r\n\r\n        // Count how many suits are currently enabled.\r\n        let allowedSuits = +this.state.settings.honors\r\n            + +this.state.settings.bamboo\r\n            + +this.state.settings.characters\r\n            + +this.state.settings.circles;\r\n\r\n        minShanten = Math.min(minShanten, allowedSuits);\r\n\r\n        if (!this.state.settings.reshuffle && this.state.hand) {\r\n            this.discardHand();\r\n            let remainingTiles = this.state.remainingTiles.slice();\r\n\r\n            if (this.state.tilePool.length > 0) {\r\n                dora = removeRandomItem(this.state.tilePool);\r\n                remainingTiles[dora]--;\r\n            }\r\n\r\n            do {\r\n                let generationResult = generateHand(remainingTiles);\r\n                hand = generationResult.hand;\r\n                availableTiles = generationResult.availableTiles;\r\n                tilePool = generationResult.tilePool;\r\n\r\n                if (!hand) break;\r\n            } while (calculateMinimumShanten(hand) < minShanten)\r\n\r\n            if (!hand) {\r\n                history.push({ message: new LocalizedMessage(\"trainer.error.wallEmptyShuffle\") });\r\n                // Continues into the normal flow, rebuilding the wall.\r\n            }\r\n            else {\r\n                this.setNewHandState(hand, availableTiles, tilePool, history, dora);\r\n                return;\r\n            }\r\n        }\r\n\r\n        let remainingTiles = this.getStartingTiles();\r\n        do {\r\n            let generationResult = generateHand(remainingTiles);\r\n            hand = generationResult.hand;\r\n            availableTiles = generationResult.availableTiles;\r\n            tilePool = generationResult.tilePool;\r\n\r\n            if (!hand) {\r\n                history.push({ message: new LocalizedMessage(\"trainer.error.wallEmpty\") });\r\n                this.setState({\r\n                    history: history\r\n                });\r\n                return;\r\n            }\r\n        } while (calculateMinimumShanten(hand) < minShanten)\r\n\r\n        if (tilePool.length > 0) {\r\n            dora = removeRandomItem(tilePool);\r\n            availableTiles[dora]--;\r\n        }\r\n\r\n        this.setNewHandState(hand, availableTiles, tilePool, history, dora);\r\n    }\r\n\r\n    /**\r\n     * Creates an array containing how many of each tile should be in the wall at the start of the game based on the current settings.\r\n     * @returns {TileCounts} The available tiles.\r\n     */\r\n    getStartingTiles() {\r\n        let availableTiles = Array(38).fill(0);\r\n\r\n        if (this.state.settings.characters) {\r\n            for (let i = 1; i < 10; i++) {\r\n                availableTiles[i] = 4;\r\n            }\r\n\r\n            if (this.state.settings.threePlayer) {\r\n                for (let i = 2; i < 9; i++) {\r\n                    availableTiles[i] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.state.settings.circles) {\r\n            for (let i = 11; i < 20; i++) {\r\n                availableTiles[i] = 4;\r\n            }\r\n        }\r\n\r\n        if (this.state.settings.bamboo) {\r\n            for (let i = 21; i < 30; i++) {\r\n                availableTiles[i] = 4;\r\n            }\r\n        }\r\n\r\n        if (this.state.settings.honors) {\r\n            for (let i = 31; i < 38; i++) {\r\n                availableTiles[i] = 4;\r\n            }\r\n        }\r\n\r\n        if (this.state.settings.redFives > 0) {\r\n            // Start with pinzu, since 4 red fives usually involves two 0p\r\n            let suit = 10;\r\n\r\n            for (let i = 0; i < this.state.settings.redFives; i++) {\r\n                if (availableTiles[suit + 5] > 0) {\r\n                    availableTiles[suit + 5]--;\r\n                    availableTiles[suit]++;\r\n                }\r\n\r\n                suit = (suit + 10) % 30;\r\n            }\r\n        }\r\n\r\n        return availableTiles;\r\n    }\r\n\r\n    /** Discards the clicked tile, adds a message comparing its efficiency with the best tile, and draws a new tile */\r\n    onTileClicked(event) {\r\n        let isComplete = this.state.isComplete;\r\n        if (isComplete) return;\r\n\r\n        let chosenTile = parseInt(event.target.name);\r\n        let hand = this.state.hand.slice();\r\n        let remainingTiles = this.state.remainingTiles.slice();\r\n\r\n        let shantenFunction = this.state.settings.exceptions ? calculateMinimumShanten : calculateStandardShanten;\r\n        let ukeire = calculateDiscardUkeire(hand, remainingTiles, shantenFunction);\r\n        let chosenUkeire = ukeire[convertRedFives(chosenTile)];\r\n\r\n        let handString = convertHandToTenhouString(hand);\r\n        hand[chosenTile]--;\r\n\r\n        let shanten = shantenFunction(hand);\r\n        let handUkeire = calculateUkeireFromOnlyHand(hand, this.getStartingTiles(), shantenFunction);\r\n        let bestTile = evaluateBestDiscard(ukeire, this.state.dora + 1);\r\n\r\n        let players = this.state.players.slice();\r\n        players[0].discards.push(chosenTile);\r\n\r\n        let achievedTotal = this.state.achievedTotal + chosenUkeire.value;\r\n        let possibleTotal = this.state.possibleTotal + ukeire[bestTile].value;\r\n        let tilePool = this.state.tilePool.slice();\r\n        let drawnTile = -1;\r\n\r\n        let historyData = new UkeireHistoryData(\r\n            chosenTile,\r\n            chosenUkeire,\r\n            bestTile,\r\n            ukeire[bestTile].value,\r\n            shanten,\r\n            handString,\r\n            handUkeire,\r\n            players[0].discards.slice()\r\n        );\r\n\r\n        if (shanten <= 0 && handUkeire.value > 0) {\r\n            // If the hand is tenpai, and has winning tiles outside of the hand, training is complete\r\n            let message = new LocalizedMessage(\"trainer.complete\", { achieved: achievedTotal, total: possibleTotal, percent: Math.floor(achievedTotal / possibleTotal * 1000) / 10 })\r\n            historyData.message = message;\r\n            isComplete = true;\r\n        }\r\n\r\n        if (!isComplete) {\r\n            if (this.state.settings.simulate) {\r\n                for (let i = 1; i < players.length; i++) {\r\n                    if (tilePool.length === 0) continue;\r\n\r\n                    let simulatedDiscard = removeRandomItem(tilePool);\r\n                    players[i].discards.push(simulatedDiscard);\r\n                    remainingTiles[simulatedDiscard]--;\r\n                }\r\n            }\r\n\r\n            if (tilePool.length > 0) {\r\n                drawnTile = removeRandomItem(tilePool);\r\n                hand[drawnTile]++;\r\n                remainingTiles[drawnTile]--;\r\n\r\n                historyData.drawnTile = drawnTile;\r\n            }\r\n            else {\r\n                // No tiles left in the wall\r\n                isComplete = true;\r\n            }\r\n        }\r\n\r\n        let history = this.state.history;\r\n        history.unshift(historyData);\r\n\r\n        let shuffle = this.state.shuffle.slice();\r\n\r\n        if (chosenTile !== this.state.lastDraw) {\r\n            for (let i = 0; i < shuffle.length; i++) {\r\n                if (shuffle[i] === chosenTile) {\r\n                    shuffle[i] = this.state.lastDraw;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            hand: hand,\r\n            tilePool: tilePool,\r\n            remainingTiles: remainingTiles,\r\n            players: players,\r\n            discardCount: this.state.discardCount + 1,\r\n            optimalCount: this.state.optimalCount + (chosenUkeire.value === ukeire[bestTile].value ? 1 : 0),\r\n            hasCopied: false,\r\n            achievedTotal: achievedTotal,\r\n            possibleTotal: possibleTotal,\r\n            history: history,\r\n            isComplete: isComplete,\r\n            lastDraw: drawnTile,\r\n            shuffle: shuffle,\r\n            disclaimerSeen: true,\r\n        }, isComplete ? () => this.saveStats() : undefined);\r\n    }\r\n\r\n    /** Save the player's current stats into local storage. */\r\n    saveStats() {\r\n        let stats = this.state.stats;\r\n        stats.totalDiscards += this.state.discardCount;\r\n        stats.totalTenpai += 1;\r\n        stats.totalEfficiency += this.state.achievedTotal;\r\n        stats.totalPossibleEfficiency += this.state.possibleTotal;\r\n        stats.totalOptimalDiscards += this.state.optimalCount;\r\n\r\n        this.setState({\r\n            stats: stats\r\n        });\r\n\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            window.localStorage.setItem(\"stats\", JSON.stringify(stats));\r\n        }\r\n    }\r\n\r\n    /** Reset the player's stats to nothing. */\r\n    resetStats() {\r\n        let stats = {\r\n            totalDiscards: 0,\r\n            totalTenpai: 0,\r\n            totalEfficiency: 0,\r\n            totalPossibleEfficiency: 0,\r\n            totalOptimalDiscards: 0\r\n        };\r\n\r\n        this.setState({\r\n            stats: stats\r\n        });\r\n\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            window.localStorage.setItem(\"stats\", JSON.stringify(stats));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new round with the hand the player loaded, if possible.\r\n     * @param {{hand:TileCounts, tiles:number, dora:TileIndex, roundWind:number, seatWind: number, draw:TileIndex}} loadData The data from the hand parser.\r\n     */\r\n    onHandLoaded(loadData) {\r\n        if (loadData.tiles === 0) {\r\n            this.logToHistory(\"trainer.error.load\");\r\n            return;\r\n        }\r\n\r\n        let remainingTiles = this.getStartingTiles();\r\n\r\n        // Remove the tiles in the hand from the wall\r\n        for (let i = 0; i < remainingTiles.length; i++) {\r\n            remainingTiles[i] = Math.max(0, remainingTiles[i] - loadData.hand[i]);\r\n        }\r\n\r\n        let dora = loadData.dora;\r\n        if (dora !== false) {\r\n            dora = Math.min(Math.max(0, dora), 37);\r\n            remainingTiles[dora]--;\r\n        }\r\n\r\n        let { hand, availableTiles, tilePool } = fillHand(remainingTiles, loadData.hand, 14 - loadData.tiles);\r\n\r\n        if (!hand) {\r\n            this.logToHistory(\"trainer.error.wallEmpty\");\r\n            return;\r\n        }\r\n\r\n        if (dora === false) {\r\n            if (tilePool.length > 0) {\r\n                dora = removeRandomItem(tilePool);\r\n                availableTiles[dora]--;\r\n            }\r\n        }\r\n\r\n        let roundWind = loadData.roundWind;\r\n        let seatWind = loadData.seatWind;\r\n        let draw = loadData.draw;\r\n\r\n        if (roundWind !== false) {\r\n            roundWind = Math.min(Math.max(1, roundWind), 4) + 30;\r\n        }\r\n        if (seatWind !== false) {\r\n            seatWind = Math.min(Math.max(1, seatWind), 4) + 30;\r\n        }\r\n        if (draw !== false) {\r\n            draw = Math.min(Math.max(0, draw), 37);\r\n            // Ensure the drawn tile is in the hand\r\n            if (hand[draw] <= 0) draw = false;\r\n        }\r\n\r\n        this.setNewHandState(hand, availableTiles, tilePool, [], dora, draw, seatWind, roundWind);\r\n    }\r\n\r\n    /**\r\n     * Adds an object to the history containing just a message.\r\n     * @param {string} text The localization key to log to the history.\r\n     */\r\n    logToHistory(text) {\r\n        let history = this.state.history;\r\n        history.unshift(new HistoryData(new LocalizedMessage(text)));\r\n        this.setState({\r\n            history: history,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { t } = this.props;\r\n        let blind = this.state.players.length && this.state.players[0].discards.length && this.state.settings.blind && !this.state.isComplete;\r\n\r\n        return (\r\n            <Container>\r\n                <Settings onChange={this.onSettingsChanged} />\r\n                <StatsDisplay values={this.state.stats} onReset={() => this.resetStats()} />\r\n                <Row>\r\n                    {this.state.disclaimerSeen ? \"\" : <span>{t(\"trainer.disclaimer\")}</span>}\r\n                </Row>\r\n                <ValueTileDisplay roundWind={this.state.roundWind} seatWind={this.state.seatWind} dora={this.state.dora} />\r\n                <Row className=\"mb-2 mt-2\">\r\n                    <span>{t(\"trainer.instructions\")}</span>\r\n                </Row>\r\n                {this.state.settings.sort\r\n                    ? <Hand tiles={this.state.hand}\r\n                        lastDraw={this.state.lastDraw}\r\n                        onTileClick={this.onTileClicked}\r\n                        blind={blind} />\r\n                    : <SortedHand tiles={this.state.shuffle}\r\n                        lastDraw={this.state.lastDraw}\r\n                        onTileClick={this.onTileClicked}\r\n                        blind={blind} />\r\n                }\r\n                <Row className=\"mt-2\">\r\n                    <Col xs=\"6\" sm=\"3\" md=\"3\" lg=\"2\">\r\n                        <Button className=\"btn-block\" color={this.state.isComplete ? \"success\" : \"warning\"} onClick={() => this.onNewHand()}>{t(\"trainer.newHandButtonLabel\")}</Button>\r\n                    </Col>\r\n                    <CopyButton hand={this.state.hand} />\r\n                    <LoadButton callback={this.loadHand} />\r\n                </Row>\r\n                <Row className=\"mt-2 no-gutters\">\r\n                    <History history={this.state.history} concise={this.state.settings.extraConcise} verbose={this.state.settings.verbose} spoilers={this.state.settings.spoilers} />\r\n                    <DiscardPool players={this.state.players} discardCount={this.state.discardCount} wallCount={this.state.tilePool && this.state.tilePool.length} />\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(UkeireQuiz);\r\n","import LocalizedMessage from \"./LocalizedMessage\";\r\n\r\n/**\r\n * Stores a sequence of LocalizedMessages that can later be localized.\r\n */\r\nexport default class LocalizedMessageChain {\r\n    constructor() {\r\n        this.messages = [];\r\n    }\r\n\r\n    /**\r\n     * Adds a string or LocalizedMessage to the end of the chain.\r\n     * @param {string|LocalizedMessage} message Message to add.\r\n     */\r\n    appendMessage(message) {\r\n        this.messages.push(message);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a string or LocalizedMessage to the start of the chain.\r\n     * @param {string|LocalizedMessage} message Message to add.\r\n     */\r\n    prependMessage(message) {\r\n        this.messages.unshift(message);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a LocalizedMessage with the given paramenters and adds it to the end of the chain.\r\n     * @param {string} key The localization key.\r\n     * @param {object} params The parameters used by the localization.\r\n     */\r\n    appendLocalizedMessage(key, params) {\r\n        return this.appendMessage(new LocalizedMessage(key, params));\r\n    }\r\n\r\n    /**\r\n     * Creates a LocalizedMessage with the given paramenters and adds it to the end of the chain.\r\n     * @param {string} key The localization key.\r\n     * @param {object} params The parameters used by the localization.\r\n     */\r\n    prependLocalizedMessage(key, params) {\r\n        return this.prependMessage(new LocalizedMessage(key, params));\r\n    }\r\n\r\n    /**\r\n     * Returns the string used to represent line breaks within the chain.\r\n     */\r\n    getLineBreakString() {\r\n        return \"<br/>\";\r\n    }\r\n\r\n    /**\r\n     * Adds a line break to the end of the chain.\r\n     */\r\n    appendLineBreak() {\r\n        return this.appendMessage(this.getLineBreakString());\r\n    }\r\n\r\n    /**\r\n     * Translates the chain and returns it as an array.\r\n     * @param {Function} t The i18next translation function.\r\n     * @returns {string[]} The array of localized strings.\r\n     */\r\n    generateArray(t) {\r\n        let result = [];\r\n\r\n        for (let i = 0; i < this.messages.length; i++) {\r\n            if (typeof this.messages[i] === \"object\") {\r\n                result.push(this.messages[i].generateString(t));\r\n            } else if (typeof this.messages[i] === \"string\" || typeof this.messages[i] === \"number\") {\r\n                result.push(this.messages[i]);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Translates the chain and concatenates it all together into a single string.\r\n     * @param {Function} t The i18next translation function.\r\n     * @returns {string} The localized and concatenated message.\r\n     */\r\n    generateString(t) {\r\n        return this.generateArray(t).join(\"\");\r\n    }\r\n}","import LocalizedMessageChain from \"../models/LocalizedMessageChain\";\r\n// eslint-disable-next-line no-unused-vars\r\nimport Player from \"./Player\";\r\nimport { getTileAsText, convertTilesToAsciiSymbols, convertIndexesToTenhouTiles } from \"../scripts/TileConversions\";\r\nimport { convertHandToTenhouString } from \"../scripts/HandConversions\";\r\nimport { SAFETY_RATING_EXPLANATIONS } from \"../Constants\";\r\n\r\nexport default class ReplayTurn {\r\n    constructor(hand = [], message = \"\", className = \"\", draw = -1) {\r\n        /** @type {number[]} */\r\n        this.hand = hand;\r\n        this.message = new LocalizedMessageChain();\r\n        if (message) this.message.appendMessage(message);\r\n        this.className = className;\r\n        this.draw = draw;\r\n        /** @type {number[]} */\r\n        this.discards = [];\r\n        /** @type {number[][]} */\r\n        this.calls = [];\r\n    }\r\n\r\n    /**\r\n     * Adds a message saying that a player declared riichi and recommending whether to fold.\r\n     * @param {number} who The index of the player who declared riichi.\r\n     * @param {number} playerShanten The player's shanten.\r\n     */\r\n    riichiDeclared(who, playerShanten) {\r\n        this.message.appendLocalizedMessage(\"analyzer.otherRiichi\", { number: who });\r\n\r\n        if (playerShanten > 1) {\r\n            this.message.appendLocalizedMessage(\"analyzer.fold\", { shanten: playerShanten });\r\n        } else if (playerShanten === 1) {\r\n            this.message.appendLocalizedMessage(\"analyzer.probablyFold\");\r\n        }\r\n\r\n        this.message.appendLineBreak();\r\n    }\r\n\r\n    /**\r\n     * Adds a message saying what tile the player drew and sets the hand and draw accordingly.\r\n     * @param {Function} t The i18next translation function.\r\n     * @param {Player} player The current player.\r\n     * @param {number} tile The index of the tile drawn.\r\n     */\r\n    tileDrawn(t, player, tile) {\r\n        this.hand = player.hand;\r\n        this.draw = tile;\r\n        this.message.appendLocalizedMessage(\"analyzer.draw\", { tile: getTileAsText(t, tile), hand: convertHandToTenhouString(player.hand) });\r\n        this.message.appendLineBreak();\r\n    }\r\n\r\n    /**\r\n     * Copies the current hand, discards, and calls from the given player.\r\n     * @param {Player} player The player to copy from.\r\n     */\r\n    copyFrom(player) {\r\n        this.hand = player.hand.slice();\r\n        this.discards = player.discards.slice();\r\n        this.calls = player.calledTiles.slice();\r\n    }\r\n\r\n    /**\r\n     * Adds a message comparing the efficiency of the player's discard with the most efficient discard.\r\n     * @param {Function} t The i18next translation function.\r\n     * @param {number} chosenTile The index of the chosen tile.\r\n     * @param {{value:number,tiles:number[]}} chosenUkeire The ukeire object for the chosen tile.\r\n     * @param {number} bestTile The index of the best tile.\r\n     * @param {{value:number,tiles:number[]}} bestUkeire The ukeire object for the best tile.\r\n     * @param {number} shanten The hand's shanten.\r\n     * @param {number} handUkeire The ukeire of the hand without considering tiles outside of it.\r\n     */\r\n    addEfficiencyMessage(t, chosenTile, chosenUkeire, bestTile, bestUkeire, shanten, handUkeire) {\r\n        this.message.appendLocalizedMessage(\"history.verbose.discard\", { tile: getTileAsText(t, chosenTile, true) });\r\n\r\n        if (chosenUkeire.value > 0 || shanten === 0) {\r\n            this.message.appendLocalizedMessage(\"history.verbose.acceptance\", { count: chosenUkeire.value });\r\n            this.message.appendMessage(` ${convertTilesToAsciiSymbols(chosenUkeire.tiles)} (${convertIndexesToTenhouTiles(chosenUkeire.tiles)})`);\r\n        }\r\n        else {\r\n            this.message.appendLocalizedMessage(\"history.verbose.loweredShanten\");\r\n            this.className = \"bg-danger text-white\";\r\n        }\r\n\r\n        this.message.appendLineBreak();\r\n\r\n        if (chosenUkeire.value < bestUkeire.value) {\r\n            this.message.appendLocalizedMessage(\"history.verbose.optimal\");\r\n            this.message.appendLocalizedMessage(\"history.verbose.optimalSpoiler\", { tile: getTileAsText(t, bestTile, true) });\r\n            this.message.appendLocalizedMessage(\"history.verbose.acceptance\", { count: bestUkeire.value });\r\n            this.message.appendMessage(` ${convertTilesToAsciiSymbols(bestUkeire.tiles)} (${convertIndexesToTenhouTiles(bestUkeire.tiles)})`);\r\n\r\n            if (!this.className) {\r\n                this.className = \"bg-warning\";\r\n            }\r\n        }\r\n        else {\r\n            this.message.appendLocalizedMessage(\"history.verbose.best\");\r\n            this.className = \"bg-success text-white\";\r\n        }\r\n\r\n        if (shanten <= 0 && handUkeire === 0) {\r\n            this.message.appendLocalizedMessage(\"history.verbose.exceptionalNoten\");\r\n        }\r\n\r\n        this.message.appendLineBreak();\r\n    }\r\n\r\n    /**\r\n     * Adds a message comparing the safety of the player's tile to the safest possible tile.\r\n     * @param {Function} t The i18next translation function.\r\n     * @param {number} chosenTile The index of the chosen tile.\r\n     * @param {number} chosenSafety The safety rating of the chosen tile.\r\n     * @param {number} bestTile The index of the safest tile.\r\n     * @param {number} bestSafety The safety rating of the safest tile.\r\n     * @param {number} riichiCount The number of players in riichi.\r\n     */\r\n    addSafetyMessage(t, chosenTile, chosenSafety, bestTile, bestSafety, riichiCount) {\r\n        this.message.appendLocalizedMessage(\"analyzer.chosenSafety\", {\r\n            tile: getTileAsText(t, chosenTile, true),\r\n            rating: (chosenSafety / riichiCount),\r\n            explanation: t(SAFETY_RATING_EXPLANATIONS[Math.floor(chosenSafety / riichiCount)])\r\n        });\r\n        this.message.appendLineBreak();\r\n\r\n        if (bestSafety === chosenSafety) {\r\n            this.message.appendLocalizedMessage(\"analyzer.correctSafety\");\r\n        } else {\r\n            this.message.appendLocalizedMessage(\"analyzer.bestSafety\", {\r\n                tile: getTileAsText(t, bestTile, true),\r\n                rating: (bestSafety / riichiCount),\r\n                explanation: t(SAFETY_RATING_EXPLANATIONS[Math.floor(bestSafety / riichiCount)])\r\n            });\r\n        }\r\n\r\n        this.message.appendLineBreak();\r\n    }\r\n}","import { ALL_TILES_REMAINING, ROUND_PARAMETERS } from '../Constants';\r\nimport { convertTenhouHandToHand, convertHandToTenhouString } from './HandConversions';\r\nimport { convertTenhouTilesToIndex, getTileAsText, convertIndexesToTenhouTiles } from './TileConversions';\r\nimport { calculateDiscardUkeire, calculateUkeireFromOnlyHand } from './UkeireCalculator';\r\nimport calculateMinimumShanten, { calculateStandardShanten } from './ShantenCalculator';\r\nimport { evaluateBestDiscard, evaluateDiscardSafety } from './Evaluations';\r\nimport { getShantenOffset } from './Utils';\r\nimport ReplayTurn from '../models/ReplayTurn';\r\nimport LocalizedMessage from '../models/LocalizedMessage';\r\nimport Player from '../models/Player';\r\n\r\n/**\r\n * Separates the individual rounds from a replay.\r\n * @param {string} replayText The replay XML\r\n * @returns {string[]} The rounds in the replay.\r\n */\r\nexport function parseRounds(replayText) {\r\n    let games = replayText.split(\"<INIT \");\r\n    games.shift();\r\n    return games;\r\n}\r\n\r\n/**\r\n * Parses the player names from a replay XML.\r\n * @param {function} t The i18next translation function.\r\n * @param {string} replayText The replay XML.\r\n * @returns {string[]} The player names.\r\n */\r\nexport function parsePlayers(t, replayText) {\r\n    let players = [];\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        players.push(parseName(t, replayText, i));\r\n    }\r\n\r\n    return players;\r\n}\r\n\r\n/**\r\n * Parse the player with the given index's name from a replay XML.\r\n * @param {function} t The i18next translation function.\r\n * @param {string} replayText The replay XML.\r\n * @param {number} player The player index.\r\n */\r\nfunction parseName(t, replayText, player) {\r\n    let regex = new RegExp(`n${player}=\"(.+?)\"`);\r\n    let match = regex.exec(replayText);\r\n    if (match) {\r\n        return decodeURIComponent(match[1]);\r\n    }\r\n\r\n    return t(\"analyzer.noName\");\r\n}\r\n\r\n/**\r\n * Parse the round names from a replay XML.\r\n * @param {string[]} roundTexts The round XMLs.\r\n * @returns {LocalizedMessage[]} The round names.\r\n */\r\nexport function parseRoundNames(roundTexts) {\r\n    let regex = /seed=\"(\\d+?),(\\d+?),/;\r\n\r\n    return roundTexts.map((roundText) => {\r\n        let match = regex.exec(roundText);\r\n\r\n        if (!match) {\r\n            return new LocalizedMessage(\"analyzer.replayError\");\r\n        }\r\n\r\n        let roundName = ROUND_PARAMETERS[parseInt(match[1])];\r\n        let repeats = parseInt(match[2]);\r\n\r\n        return new LocalizedMessage(\"roundName\", { wind: roundName.wind, number: roundName.number, repeats: repeats });\r\n    });\r\n}\r\n\r\n/**\r\n * Analyzes the given round.\r\n * @param {Function} t The i18next translation function.\r\n * @param {string} roundText The round XML\r\n * @param {number} player The index of the player, between 0 and 3.\r\n * @returns {ReplayTurn[]} An array of turns.\r\n */\r\nexport function parseRound(t, roundText, player) {\r\n    let remainingTiles = ALL_TILES_REMAINING.slice();\r\n    let players = [];\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        players.push(new Player(parseStartingHand(roundText, i)));\r\n    }\r\n\r\n    for (let j = 0; j < players[player].hand.length; j++) {\r\n        remainingTiles[j] = Math.max(remainingTiles[j] - players[player].hand[j], 0);\r\n    }\r\n\r\n    let doraRegex = /seed=\".+?,.+?,.+?,.+?,.+?,(\\d+)\"/;\r\n    let dora = doraRegex.exec(roundText);\r\n\r\n    if (dora) {\r\n        dora = convertTenhouTilesToIndex(parseInt(dora[1]));\r\n        remainingTiles[dora]--;\r\n    }\r\n\r\n    let regex = /<(\\w{1})(.+?)\\/>/g;\r\n    let whoRegex = /who=\"(\\d)\"/;\r\n    let turns = [];\r\n    let match;\r\n\r\n    let currentTurn = new ReplayTurn(\r\n        players[player].hand.slice()\r\n    );\r\n\r\n    currentTurn.message.appendLocalizedMessage(\"analyzer.startingHand\",\r\n        {\r\n            hand: convertHandToTenhouString(players[player].hand),\r\n            count: calculateMinimumShanten(players[player].hand),\r\n            dora: convertIndexesToTenhouTiles(dora)\r\n        }\r\n    );\r\n\r\n    currentTurn.message.appendLineBreak();\r\n\r\n    do {\r\n        match = regex.exec(roundText);\r\n\r\n        if (match) {\r\n            let actionInfo = parseActionType(match[1]);\r\n\r\n            if (!actionInfo) {\r\n                currentTurn.message.appendLocalizedMessage(\"analyzer.unknownAction\", { debugInfo: `${roundText} | ${match}` });\r\n                currentTurn.hand = turns[turns.length - 1].hand.slice();\r\n                turns.push(currentTurn);\r\n                currentTurn = new ReplayTurn();\r\n                continue;\r\n            }\r\n\r\n            if (actionInfo.discard) {\r\n                if (actionInfo.player === 0) {\r\n                    // Might be DORA\r\n                    let doraRegex = /hai=\"(\\d+?)\"/;\r\n                    let doraMatch = doraRegex.exec(match[2]);\r\n\r\n                    if (doraMatch) {\r\n                        let newDoraIndicator = convertTenhouTilesToIndex(parseInt(doraMatch[1]));\r\n                        remainingTiles[newDoraIndicator]--;\r\n                        currentTurn.message.appendLocalizedMessage(\"analyzer.kandora\", { tile: getTileAsText(t, newDoraIndicator) });\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                let discardIndex = convertTenhouTilesToIndex(parseInt(match[2]));\r\n\r\n                if (actionInfo.player === player) {\r\n                    analyzeDiscardEfficiency(t, players[player].hand, discardIndex, remainingTiles, currentTurn);\r\n                    analyzeDiscardSafety(t, players[player].hand, discardIndex, players, remainingTiles, currentTurn);\r\n                    currentTurn.copyFrom(players[player]);\r\n                    turns.push(currentTurn);\r\n                    currentTurn = new ReplayTurn();\r\n                }\r\n\r\n                players[actionInfo.player].discardTile(discardIndex);\r\n\r\n                for (let i = 0; i < players.length; i++) {\r\n                    if (players[i].isInRiichi()) {\r\n                        players[i].discardsAfterRiichi.push(discardIndex);\r\n                    }\r\n                }\r\n\r\n                if (actionInfo.player !== player) {\r\n                    remainingTiles[discardIndex]--;\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            if (actionInfo.draw) {\r\n                let index = convertTenhouTilesToIndex(parseInt(match[2]));\r\n                players[actionInfo.player].hand[index]++;\r\n\r\n                if (actionInfo.player === player) {\r\n                    currentTurn.tileDrawn(t, players[player], index);\r\n                    remainingTiles[index]--;\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            if (actionInfo.call) {\r\n                let who = parseInt(whoRegex.exec(match[2])[1]);\r\n                let calledTiles = getTilesFromCall(match[2]);\r\n                let baseShanten = 0;\r\n\r\n                if (who !== player) {\r\n                    for (let i = 1; i < calledTiles.length; i++) {\r\n                        remainingTiles[calledTiles[i]]--;\r\n                    }\r\n                } else {\r\n                    baseShanten = calculateStandardShanten(players[player].hand);\r\n                }\r\n\r\n                players[who].callTiles(calledTiles);\r\n\r\n                if (who === player) {\r\n                    currentTurn.hand = players[player].hand.slice();\r\n                    currentTurn.message.appendLocalizedMessage(\"analyzer.call\", { tile: getTileAsText(t, calledTiles[0]), meld: convertIndexesToTenhouTiles(calledTiles), hand: convertHandToTenhouString(players[player].hand) });\r\n                    let newShanten = calculateStandardShanten(padHand(players[player].hand));\r\n                    if (newShanten >= baseShanten) {\r\n                        currentTurn.message.appendLocalizedMessage(\"analyzer.callSameShanten\");\r\n                    }\r\n                    currentTurn.message.appendLineBreak();\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            if (actionInfo.riichi) {\r\n                let who = whoRegex.exec(match[2]);\r\n\r\n                if (!who) {\r\n                    currentTurn.hand = turns[turns.length - 1].hand.slice();\r\n                    currentTurn.message.appendLocalizedMessage(\"analyzer.ryuukyoku\");\r\n                    turns.push(currentTurn);\r\n                    break;\r\n                }\r\n\r\n                who = parseInt(who[1]);\r\n\r\n                if (who === player) {\r\n                    if (players[player].riichiTile > -1) {\r\n                        currentTurn.hand = turns[turns.length - 1].hand.slice();\r\n                        currentTurn.message.appendLocalizedMessage(\"analyzer.playerRiichi\");\r\n                        turns.push(currentTurn);\r\n                        break;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (players[who].riichiTile > -1) continue;\r\n\r\n                let paddedHand = padHand(players[player].hand.slice());\r\n                let shanten = calculateMinimumShanten(paddedHand);\r\n                currentTurn.riichiDeclared(who, shanten);\r\n\r\n                players[who].riichiTile = -2;\r\n                continue;\r\n            }\r\n\r\n            if (actionInfo.end) {\r\n                let who = whoRegex.exec(match[2]);\r\n                if (currentTurn.hand.length === 0) currentTurn.hand = turns[turns.length - 1].hand.slice();\r\n                currentTurn.message.appendLocalizedMessage(\"analyzer.win\", { number: who[1] });\r\n                turns.push(currentTurn);\r\n                break;\r\n            }\r\n\r\n            if (actionInfo.disconnect) {\r\n                // TODO: Don't analyze safety from disconnected players.\r\n            }\r\n        }\r\n    } while (match);\r\n\r\n    return turns;\r\n}\r\n\r\n/**\r\n * Adds a message to the current turn regarding the safety of the player's discard.\r\n * @param {Function} t The i18next translation function.\r\n * @param {TileCounts} playerHand The player's current hand.\r\n * @param {TileIndex} chosenTile The tile the player chose to discard.\r\n * @param {Player[]} players The player objects.\r\n * @param {TileCounts} remainingTiles The number of each tile remaining in concealed tiles.\r\n * @param {ReplayTurn} currentTurn The current turn object.\r\n */\r\nfunction analyzeDiscardSafety(t, playerHand, chosenTile, players, remainingTiles, currentTurn) {\r\n    let riichis = 0;\r\n    let totalSafety = Array(38).fill(0);\r\n\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (players[i].isInRiichi()) {\r\n            riichis++;\r\n\r\n            let safety = evaluateDiscardSafety(\r\n                playerHand,\r\n                players[i].discards,\r\n                remainingTiles,\r\n                players[i].discardsAfterRiichi,\r\n                players[i].riichiTile\r\n            );\r\n\r\n            for (let j = 0; j < totalSafety.length; j++) {\r\n                totalSafety[j] += safety[j];\r\n            }\r\n        }\r\n    }\r\n\r\n    if (riichis === 0) return \"\";\r\n\r\n    let chosenSafety = totalSafety[chosenTile];\r\n    let bestSafety = Math.max(...totalSafety);\r\n    let bestChoice = totalSafety.indexOf(bestSafety);\r\n\r\n    currentTurn.addSafetyMessage(t, chosenTile, chosenSafety, bestChoice, bestSafety, riichis);\r\n}\r\n\r\n/**\r\n * Adds a message to the current turn regarding the efficiency of the chosen discard.\r\n * @param {Function} t The i18next translation function.\r\n * @param {TileCounts} hand The player's current hand.\r\n * @param {TileIndex} chosenTile The tile the player chose to discard.\r\n * @param {TileCounts} remainingTiles The number of each tile remaining in concealed tiles.\r\n * @param {ReplayTurn} currentTurn The current turn object.\r\n */\r\nfunction analyzeDiscardEfficiency(t, hand, chosenTile, remainingTiles, currentTurn) {\r\n    let paddedHand = padHand(hand);\r\n    let shantenFunction = getShantenOffset(hand) > 0 ? calculateStandardShanten : calculateMinimumShanten;\r\n    let ukeire = calculateDiscardUkeire(paddedHand, remainingTiles, shantenFunction);\r\n    paddedHand[chosenTile]--;\r\n\r\n    let chosenUkeire = ukeire[chosenTile];\r\n\r\n    let shanten = shantenFunction(paddedHand);\r\n    let handUkeire = calculateUkeireFromOnlyHand(paddedHand, ALL_TILES_REMAINING.slice(), shantenFunction).value;\r\n    let bestTile = evaluateBestDiscard(ukeire);\r\n\r\n    currentTurn.addEfficiencyMessage(t, chosenTile, chosenUkeire, bestTile, ukeire[bestTile], shanten, handUkeire);\r\n}\r\n\r\n/**\r\n * Adds triplets of East wind tiles to an open hand as a hack to make ukeire calculations accurate.\r\n * @param {TileCounts} hand The hand to pad.\r\n */\r\nfunction padHand(hand) {\r\n    let paddedHand = hand.slice();\r\n    for (let i = 0; i < getShantenOffset(hand); i += 2) {\r\n        paddedHand[31] += 3;\r\n    }\r\n\r\n    return paddedHand;\r\n}\r\n\r\n/**\r\n * Parses the starting hand of the given player from the round XML.\r\n * @param {string} roundText The round XML.\r\n * @param {number} player The index of the player to parse the hand of.\r\n * @returns {TileCounts} The player's starting hand.\r\n */\r\nfunction parseStartingHand(roundText, player) {\r\n    let regex = new RegExp(`hai${player}=\"(.+?)\"`, 'g');\r\n    let match = regex.exec(roundText);\r\n    let handTiles = match[1];\r\n    return convertTenhouHandToHand(handTiles);\r\n}\r\n\r\n/**\r\n * Converts the given letter into the corresponding action.\r\n * @param {string} letter The character representing the action.\r\n */\r\nfunction parseActionType(letter) {\r\n    if (letter === 'T') {\r\n        return { draw: true, player: 0 };\r\n    }\r\n    if (letter === 'U') {\r\n        return { draw: true, player: 1 };\r\n    }\r\n    if (letter === 'V') {\r\n        return { draw: true, player: 2 };\r\n    }\r\n    if (letter === 'W') {\r\n        return { draw: true, player: 3 };\r\n    }\r\n    if (letter === 'D') {\r\n        return { discard: true, player: 0 };\r\n    }\r\n    if (letter === 'E') {\r\n        return { discard: true, player: 1 };\r\n    }\r\n    if (letter === 'F') {\r\n        return { discard: true, player: 2 };\r\n    }\r\n    if (letter === 'G') {\r\n        return { discard: true, player: 3 };\r\n    }\r\n    if (letter === 'N') {\r\n        return { call: true };\r\n    }\r\n    if (letter === 'A') {\r\n        return { end: true };\r\n    }\r\n    if (letter === 'R') {\r\n        return { riichi: true };\r\n    }\r\n    if (letter === 'B') {\r\n        return { disconnect: true };\r\n    }\r\n}\r\n\r\n/**\r\n * Parses the called tiles from a tenhou replay node.\r\n * @param {string} call The string containing the encoded call.\r\n * @returns {TileIndex[]} The called tiles. Index 0 is the tile called.\r\n */\r\nfunction getTilesFromCall(call) {\r\n    let meldRegex = /m=\"(\\d+?)\"/;\r\n    let match = meldRegex.exec(call);\r\n    let meldInt = parseInt(match[1]);\r\n    let meldBinary = meldInt.toString(2);\r\n    meldBinary = meldBinary.padStart(16, '0');\r\n\r\n    if (meldBinary.charAt(meldBinary.length - 3) === '1') {\r\n        // Chii\r\n        let tile = meldBinary.substr(0, 6);\r\n        tile = parseInt(tile, 2);\r\n        let order = tile % 3;\r\n        tile = Math.floor(tile / 3);\r\n        tile = 9 * Math.floor(tile / 7) + (tile % 7);\r\n        tile = convertTenhouTilesToIndex(tile * 4);\r\n\r\n        if (order === 0) {\r\n            return [tile, tile + 1, tile + 2];\r\n        }\r\n\r\n        if (order === 1) {\r\n            return [tile + 1, tile, tile + 2];\r\n        }\r\n\r\n        return [tile + 2, tile, tile + 1];\r\n    }\r\n    else if (meldBinary.charAt(meldBinary.length - 4) === '1') {\r\n        // Pon\r\n        let tile = meldBinary.substr(0, 7);\r\n        tile = parseInt(tile, 2);\r\n        tile = Math.floor(tile / 3);\r\n        tile = convertTenhouTilesToIndex(tile * 4);\r\n\r\n        return [tile, tile, tile];\r\n    }\r\n    else if (meldBinary.charAt(meldBinary.length - 5) === '1') {\r\n        // Added kan\r\n        let tile = meldBinary.substr(0, 7);\r\n        tile = parseInt(tile, 2);\r\n        tile = Math.floor(tile / 3);\r\n        tile = convertTenhouTilesToIndex(tile * 4);\r\n\r\n        return [tile];\r\n    }\r\n    else if (meldBinary.charAt(meldBinary.length - 6) === '1') {\r\n        // Nuki\r\n        return [34];\r\n    }\r\n    else {\r\n        // Kan\r\n        let tile = meldBinary.substr(0, 8);\r\n        tile = parseInt(tile, 2);\r\n        tile = Math.floor(tile / 4);\r\n        tile = convertTenhouTilesToIndex(tile * 4);\r\n        return [tile, tile, tile, tile];\r\n    }\r\n}","import { ALL_TILES_REMAINING, ROUND_PARAMETERS } from '../Constants';\r\nimport { convertHandToTenhouString, convertHandToTileIndexArray } from './HandConversions';\r\nimport { getTileAsText, convertIndexesToTenhouTiles, convertStringTileToIndex } from './TileConversions';\r\nimport { calculateDiscardUkeire, calculateUkeireFromOnlyHand } from './UkeireCalculator';\r\nimport calculateMinimumShanten, { calculateStandardShanten } from './ShantenCalculator';\r\nimport { evaluateBestDiscard, evaluateDiscardSafety } from './Evaluations';\r\nimport { getShantenOffset } from './Utils';\r\nimport ReplayTurn from '../models/ReplayTurn';\r\nimport LocalizedMessage from '../models/LocalizedMessage';\r\nimport Player from '../models/Player';\r\n\r\n/**\r\n * Separates the individual rounds from a replay.\r\n * @param {string} replayText The replay XML\r\n * @returns {string[]} The rounds in the replay.\r\n */\r\nexport function parseRounds(replayText) {\r\n    let games = replayText.split(\"RecordNewRound\");\r\n    games.shift();\r\n    return games;\r\n}\r\n\r\n/**\r\n * Parses the player names from a replay XML.\r\n * @param {function} t The i18next translation function.\r\n * @param {string} replayText The replay XML.\r\n * @returns {string[]} The player names.\r\n */\r\nexport function parsePlayers(t, replayText) {\r\n    let players = [];\r\n\r\n    // I don't know how to get this on majsoul so, numbers it is.\r\n    for (let i = 0; i < 4; i++) {\r\n        players.push(i);\r\n    }\r\n\r\n    return players;\r\n}\r\n\r\n/**\r\n * Parse the round names from a replay XML.\r\n * @param {string[]} roundTexts The round XMLs.\r\n * @returns {LocalizedMessage[]} The round names.\r\n */\r\nexport function parseRoundNames(roundTexts) {\r\n    // Not sure how to get this on majsoul yet\r\n    return roundTexts.map((roundText, index) => {\r\n        let roundName = ROUND_PARAMETERS[0];\r\n\r\n        return new LocalizedMessage(\"roundName\", { wind: roundName.wind, number: roundName.number, repeats: index });\r\n    });\r\n}\r\n\r\n/**\r\n * Analyzes the given round.\r\n * @param {Function} t The i18next translation function.\r\n * @param {string} roundText The round XML\r\n * @param {number} player The index of the player, between 0 and 3.\r\n * @returns {ReplayTurn[]} An array of turns.\r\n */\r\nexport function parseRound(t, roundText, player) {\r\n    let remainingTiles = ALL_TILES_REMAINING.slice();\r\n    let players = [];\r\n    let lines = roundText.split(\"Record\");\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        players.push(new Player(parseStartingHand(lines[0], i)));\r\n    }\r\n\r\n    lines.shift();\r\n\r\n    for (let j = 0; j < players[player].hand.length; j++) {\r\n        remainingTiles[j] = Math.max(remainingTiles[j] - players[player].hand[j], 0);\r\n    }\r\n\r\n    let doraRegex = /(\\d[spmz])/;\r\n    let dora = doraRegex.exec(roundText);\r\n\r\n    if (dora) {\r\n        dora = convertStringTileToIndex(dora[1]);\r\n        remainingTiles[dora]--;\r\n    }\r\n\r\n    let turns = [];\r\n\r\n    let currentTurn = new ReplayTurn(\r\n        players[player].hand.slice()\r\n    );\r\n\r\n    currentTurn.message.appendLocalizedMessage(\"analyzer.startingHand\",\r\n        {\r\n            hand: convertHandToTenhouString(players[player].hand),\r\n            count: calculateMinimumShanten(players[player].hand),\r\n            dora: convertIndexesToTenhouTiles(dora)\r\n        }\r\n    );\r\n\r\n    currentTurn.message.appendLineBreak();\r\n\r\n    let callRegex = /ChiPengGang.*?(\\d[spmz]).*?(\\d[spmz]).*?(\\d[spmz])/;\r\n    let discardRegex = /DiscardTile.*?(\\d[spmz])/;\r\n    let drawRegex = /DealTile.*?(\\d[spmz])/;\r\n    let winRegex = /Hule/;\r\n    let closedKanRegex = /AnGangAddGang.*?(\\d[spmz])/;\r\n    // NoTile = ryuukyoku, LiuJu = abortive draw\r\n    let ryuukyokuRegex = /NoTile|LiuJu/;\r\n    let playerHandLengths = players.map((player) => convertHandToTileIndexArray(player.hand).length);\r\n    let currentPlayer = playerHandLengths.indexOf(14);\r\n    let shantens = players.map((player) => calculateMinimumShanten(player.hand));\r\n\r\n    for (let l = 0; l < lines.length; l++) {\r\n        let line = unescape(lines[l]);\r\n\r\n        let discardMatch = discardRegex.exec(line)\r\n        if (discardMatch) {\r\n            let discardIndex = convertStringTileToIndex(discardMatch[1]);\r\n\r\n            if (currentPlayer === player) {\r\n                analyzeDiscardEfficiency(t, players[player].hand, discardIndex, remainingTiles, currentTurn);\r\n                analyzeDiscardSafety(t, players[player].hand, discardIndex, players, remainingTiles, currentTurn);\r\n                currentTurn.copyFrom(players[player]);\r\n                turns.push(currentTurn);\r\n                currentTurn = new ReplayTurn();\r\n            } else if (players[currentPlayer].calledTiles.length === 0) {\r\n                // Example: if their starting hand was 3 shanten, no reason to check if they're tenpai for three more turns\r\n                shantens[currentPlayer]--;\r\n                if (shantens[currentPlayer] === 0) {\r\n                    shantens[currentPlayer] = calculateMinimumShanten(players[currentPlayer].hand, 0);\r\n\r\n                    if (shantens[currentPlayer] === 0) {\r\n                        // Tenpai, no calls, so let's assume they call riichi, since I don't know how to check\r\n                        let paddedHand = padHand(players[player].hand.slice());\r\n                        let shanten = calculateMinimumShanten(paddedHand);\r\n                        currentTurn.riichiDeclared(currentPlayer, shanten);\r\n                        players[currentPlayer].riichiTile = -2;\r\n                    }\r\n                }\r\n            }\r\n\r\n            players[currentPlayer].discardTile(discardIndex);\r\n\r\n            for (let i = 0; i < players.length; i++) {\r\n                if (players[i].isInRiichi()) {\r\n                    players[i].discardsAfterRiichi.push(discardIndex);\r\n                }\r\n            }\r\n\r\n            if (currentPlayer !== player) {\r\n                remainingTiles[discardIndex]--;\r\n            }\r\n\r\n            currentPlayer = (currentPlayer + 1) % 4;\r\n            continue;\r\n        }\r\n\r\n        let drawMatch = drawRegex.exec(line)\r\n        if (drawMatch) {\r\n            let index = convertStringTileToIndex(drawMatch[1]);\r\n            players[currentPlayer].hand[index]++;\r\n\r\n            if (currentPlayer === player) {\r\n                currentTurn.tileDrawn(t, players[player], index);\r\n                remainingTiles[index]--;\r\n            }\r\n\r\n            continue;\r\n        }\r\n\r\n        let callMatch = callRegex.exec(line);\r\n        if (callMatch) {\r\n            let calledTiles = [\r\n                convertStringTileToIndex(callMatch[1]),\r\n                convertStringTileToIndex(callMatch[2]),\r\n                convertStringTileToIndex(callMatch[3]),\r\n            ];\r\n\r\n            if (calledTiles[0] === calledTiles[1]) {\r\n                for (let i = 0; i < players.length; i++) {\r\n                    if (players[i].hand[calledTiles[0]] > 1) {\r\n                        currentPlayer = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let baseShanten = 0;\r\n\r\n            if (currentPlayer !== player) {\r\n                for (let i = 1; i < calledTiles.length; i++) {\r\n                    remainingTiles[calledTiles[i]]--;\r\n                }\r\n            } else {\r\n                baseShanten = calculateStandardShanten(players[player].hand);\r\n            }\r\n\r\n            players[currentPlayer].callTiles(calledTiles);\r\n\r\n            if (currentPlayer === player) {\r\n                currentTurn.hand = players[player].hand.slice();\r\n                currentTurn.message.appendLocalizedMessage(\"analyzer.call\", { tile: getTileAsText(t, calledTiles[0]), meld: convertIndexesToTenhouTiles(calledTiles), hand: convertHandToTenhouString(players[player].hand) });\r\n                let newShanten = calculateStandardShanten(padHand(players[player].hand));\r\n                if (newShanten >= baseShanten) {\r\n                    currentTurn.message.appendLocalizedMessage(\"analyzer.callSameShanten\");\r\n                }\r\n                currentTurn.message.appendLineBreak();\r\n            }\r\n\r\n            continue;\r\n        }\r\n\r\n        let closedKanMatch = closedKanRegex.exec(line);\r\n        if (closedKanMatch) {\r\n            let tile = convertStringTileToIndex(closedKanMatch[1]);\r\n            remainingTiles[tile] = 0;\r\n        }\r\n\r\n        /* Dunno how to get this in majsoul\r\n        if(actionInfo.riichi) {\r\n            if(currentPlayer === player) {\r\n                if(players[player].riichiTile > -1) {\r\n                    currentTurn.hand = turns[turns.length - 1].hand.slice();\r\n                    currentTurn.message.appendLocalizedMessage(\"analyzer.playerRiichi\");\r\n                    turns.push(currentTurn);\r\n                    break;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if(players[currentPlayer].riichiTile > -1) continue;\r\n\r\n            let paddedHand = padHand(players[player].hand.slice());\r\n            let shanten = calculateMinimumShanten(paddedHand);\r\n            currentTurn.riichiDeclared(currentPlayer, shanten);\r\n\r\n            players[currentPlayer].riichiTile = -2;\r\n            continue;\r\n        }\r\n        */\r\n\r\n        let winMatch = winRegex.exec(line);\r\n        if (winMatch) {\r\n            if (currentTurn.hand.length === 0) currentTurn.hand = turns[turns.length - 1].hand.slice();\r\n            currentTurn.message.appendLocalizedMessage(\"analyzer.win\", { number: \"?\" });\r\n            turns.push(currentTurn);\r\n            break;\r\n        }\r\n\r\n        let ryuukyokuMatch = ryuukyokuRegex.exec(line);\r\n        if (ryuukyokuMatch) {\r\n            if (currentTurn.hand.length === 0) currentTurn.hand = turns[turns.length - 1].hand.slice();\r\n            currentTurn.message.appendLocalizedMessage(\"analyzer.ryuukyoku\");\r\n            turns.push(currentTurn);\r\n            break;\r\n        }\r\n    }\r\n\r\n    return turns;\r\n}\r\n\r\n/**\r\n * Adds a message to the current turn regarding the safety of the player's discard.\r\n * @param {Function} t The i18next translation function.\r\n * @param {TileCounts} playerHand The player's current hand.\r\n * @param {TileIndex} chosenTile The tile the player chose to discard.\r\n * @param {Player[]} players The player objects.\r\n * @param {TileCounts} remainingTiles The number of each tile remaining in concealed tiles.\r\n * @param {ReplayTurn} currentTurn The current turn object.\r\n */\r\nfunction analyzeDiscardSafety(t, playerHand, chosenTile, players, remainingTiles, currentTurn) {\r\n    let riichis = 0;\r\n    let totalSafety = Array(38).fill(0);\r\n\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (players[i].isInRiichi()) {\r\n            riichis++;\r\n\r\n            let safety = evaluateDiscardSafety(\r\n                playerHand,\r\n                players[i].discards,\r\n                remainingTiles,\r\n                players[i].discardsAfterRiichi,\r\n                players[i].riichiTile\r\n            );\r\n\r\n            for (let j = 0; j < totalSafety.length; j++) {\r\n                totalSafety[j] += safety[j];\r\n            }\r\n        }\r\n    }\r\n\r\n    if (riichis === 0) return \"\";\r\n\r\n    let chosenSafety = totalSafety[chosenTile];\r\n    let bestSafety = Math.max(...totalSafety);\r\n    let bestChoice = totalSafety.indexOf(bestSafety);\r\n\r\n    currentTurn.addSafetyMessage(t, chosenTile, chosenSafety, bestChoice, bestSafety, riichis);\r\n}\r\n\r\n/**\r\n * Adds a message to the current turn regarding the efficiency of the chosen discard.\r\n * @param {Function} t The i18next translation function.\r\n * @param {TileCounts} hand The player's current hand.\r\n * @param {TileIndex} chosenTile The tile the player chose to discard.\r\n * @param {TileCounts} remainingTiles The number of each tile remaining in concealed tiles.\r\n * @param {ReplayTurn} currentTurn The current turn object.\r\n */\r\nfunction analyzeDiscardEfficiency(t, hand, chosenTile, remainingTiles, currentTurn) {\r\n    let paddedHand = padHand(hand);\r\n    let shantenFunction = getShantenOffset(hand) > 0 ? calculateStandardShanten : calculateMinimumShanten;\r\n    let ukeire = calculateDiscardUkeire(paddedHand, remainingTiles, shantenFunction);\r\n    paddedHand[chosenTile]--;\r\n\r\n    let chosenUkeire = ukeire[chosenTile];\r\n\r\n    let shanten = shantenFunction(paddedHand);\r\n    let handUkeire = calculateUkeireFromOnlyHand(paddedHand, ALL_TILES_REMAINING.slice(), shantenFunction).value;\r\n    let bestTile = evaluateBestDiscard(ukeire);\r\n\r\n    currentTurn.addEfficiencyMessage(t, chosenTile, chosenUkeire, bestTile, ukeire[bestTile], shanten, handUkeire);\r\n}\r\n\r\n/**\r\n * Adds triplets of East wind tiles to an open hand as a hack to make ukeire calculations accurate.\r\n * @param {TileCounts} hand The hand to pad.\r\n */\r\nfunction padHand(hand) {\r\n    let paddedHand = hand.slice();\r\n    for (let i = 0; i < getShantenOffset(hand); i += 2) {\r\n        paddedHand[31] += 3;\r\n    }\r\n\r\n    return paddedHand;\r\n}\r\n\r\n/**\r\n * Parses the starting hand of the given player from the round XML.\r\n * @param {string} roundText The round XML.\r\n * @param {number} player The index of the player to parse the hand of.\r\n * @returns {TileCounts} The player's starting hand.\r\n */\r\nfunction parseStartingHand(roundText, player) {\r\n    let regex = tileRegexes[player];\r\n    let match = roundText.match(regex);\r\n    let hand = Array(38).fill(0);\r\n\r\n    for (let i = 0; i < match.length; i++) {\r\n        hand[convertStringTileToIndex(match[i].substr(2))] += 1;\r\n    }\r\n\r\n    return hand;\r\n}\r\n\r\nconst tileRegexes = [/:.\\d[spmz]/g, /B.\\d[spmz]/g, /J.\\d[spmz]/g, /R.\\d[spmz]/g]","import React from 'react';\r\nimport {\r\n    Container, Dropdown, DropdownItem, DropdownMenu, DropdownToggle,\r\n    Row, ListGroup, ListGroupItem, Col, Input,\r\n    Card, CardBody, Button\r\n} from 'reactstrap';\r\nimport * as ParseTenhouReplay from '../scripts/ParseTenhouReplay';\r\nimport * as ParseMajsoulReplay from '../scripts/ParseMajsoulReplay';\r\nimport Hand from '../components/Hand';\r\nimport { convertIndexesToTenhouTiles, convertTilesToAsciiSymbols } from '../scripts/TileConversions';\r\nimport { convertHandToTenhouString } from '../scripts/HandConversions';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass ReplayAnalysis extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fileName: \"\",\r\n            text: \"\",\r\n            rounds: [],\r\n            roundDropdownOpen: false,\r\n            playerDropdownOpen: false,\r\n            player: 0,\r\n            currentRound: -1,\r\n            turns: [],\r\n            URLfeedback: \"\",\r\n            currentTurn: 0,\r\n            tenhou: true,\r\n        }\r\n\r\n        this.onURLChanged = this.onURLChanged.bind(this);\r\n        this.onFileChanged = this.onFileChanged.bind(this);\r\n        this.onFileLoaded = this.onFileLoaded.bind(this);\r\n        this.toggleRoundDropdown = this.toggleRoundDropdown.bind(this);\r\n        this.togglePlayerDropdown = this.togglePlayerDropdown.bind(this);\r\n    }\r\n\r\n    onURLChanged() {\r\n        let URLfeedback = <div />\r\n        let { t } = this.props;\r\n        if (document.getElementById('tenhouURL')) {\r\n            let URL = document.getElementById('tenhouURL').value;\r\n            if (URL !== \"\") {\r\n                let tenhouRegex = /\\/\\?log=(.+?)&tw/;\r\n                let majsoulRegex = /\\/\\?paipu=(.+)/;\r\n                let match = tenhouRegex.exec(URL);\r\n\r\n                if (match) {\r\n                    URLfeedback = <a href={`http://e0.mjv.jp/0/log/?${match[1]}`} target=\"_blank\" rel=\"noopener noreferrer\">{t(\"analyzer.downloadInstructions\")}</a>;\r\n                } else {\r\n                    match = majsoulRegex.exec(URL);\r\n\r\n                    if (match) {\r\n                        let uuid = match[1].split(\"_\")[0];\r\n                        URLfeedback = <a href={`https://mjusgs.mahjongsoul.com:2882/majsoul/game_record/${uuid}`} target=\"_blank\" rel=\"noopener noreferrer\">{t(\"analyzer.downloadInstructions\")}</a>;\r\n                    } else {\r\n                        URLfeedback = <div>{t(\"analyzer.invalidURL\")}</div>;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            URLfeedback: URLfeedback\r\n        });\r\n    }\r\n\r\n    onFileChanged(files) {\r\n        let file = document.getElementById(\"fileInput\").files[0];\r\n\r\n        let player = 0;\r\n        let playerRegex = /tw=(\\d{1})/;\r\n        let match = playerRegex.exec(file.name);\r\n        if (match) {\r\n            player = parseInt(match[1]);\r\n        }\r\n\r\n        this.setState({\r\n            fileName: file.name,\r\n            player: player,\r\n        });\r\n\r\n        let reader = new FileReader();\r\n        reader.onload = this.onFileLoaded;\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    onFileLoaded(e) {\r\n        let replayText = e.target.result.trim();\r\n        let tenhou = replayText.charAt(0) === \"<\";\r\n        let rounds;\r\n\r\n        if (tenhou) {\r\n            rounds = ParseTenhouReplay.parseRounds(replayText);\r\n        } else {\r\n            rounds = ParseMajsoulReplay.parseRounds(replayText);\r\n        }\r\n\r\n        this.setState({\r\n            tenhou: tenhou,\r\n            text: e.target.result,\r\n            rounds: rounds\r\n        });\r\n    }\r\n\r\n    toggleRoundDropdown() {\r\n        this.setState({\r\n            roundDropdownOpen: !this.state.roundDropdownOpen\r\n        });\r\n    }\r\n\r\n    togglePlayerDropdown() {\r\n        this.setState({\r\n            playerDropdownOpen: !this.state.playerDropdownOpen\r\n        });\r\n    }\r\n\r\n    onRoundChoice(index) {\r\n        let { t } = this.props;\r\n\r\n        let turns;\r\n\r\n        if (this.state.tenhou) {\r\n            turns = ParseTenhouReplay.parseRound(t, this.state.rounds[index], this.state.player);\r\n        } else {\r\n            turns = ParseMajsoulReplay.parseRound(t, this.state.rounds[index], this.state.player);\r\n        }\r\n\r\n        this.setState({\r\n            turns: turns,\r\n            currentRound: index,\r\n            currentTurn: 0,\r\n        });\r\n    }\r\n\r\n    onPlayerChoice(index) {\r\n        let currentRound = Math.max(0, this.state.currentRound);\r\n        let { t } = this.props;\r\n\r\n        let turns;\r\n\r\n        if (this.state.tenhou) {\r\n            turns = ParseTenhouReplay.parseRound(t, this.state.rounds[currentRound], index);\r\n        } else {\r\n            turns = ParseMajsoulReplay.parseRound(t, this.state.rounds[currentRound], index);\r\n        }\r\n\r\n        this.setState({\r\n            turns: turns,\r\n            player: index,\r\n            currentTurn: 0,\r\n            currentRound: currentRound,\r\n        });\r\n    }\r\n\r\n    parseRound() {\r\n        let { t } = this.props;\r\n\r\n        let turns;\r\n\r\n        if (this.state.tenhou) {\r\n            turns = ParseTenhouReplay.parseRound(t, this.state.rounds[this.state.currentRound], this.state.player);\r\n        } else {\r\n            turns = ParseMajsoulReplay.parseRound(t, this.state.rounds[this.state.currentRound], this.state.player);\r\n        }\r\n\r\n        this.setState({\r\n            turns: turns\r\n        });\r\n    }\r\n\r\n    onNextTurn() {\r\n        if (this.state.currentTurn < this.state.turns.length - 1) {\r\n            this.setState({ currentTurn: this.state.currentTurn + 1 });\r\n        }\r\n    }\r\n\r\n    onPreviousTurn() {\r\n        if (this.state.currentTurn > 0) {\r\n            this.setState({ currentTurn: this.state.currentTurn - 1 });\r\n        }\r\n    }\r\n\r\n    onNextIssue() {\r\n        if (this.state.currentTurn >= this.state.turns.length - 1) return;\r\n        let currentTurn = this.state.currentTurn;\r\n\r\n        while (currentTurn < this.state.turns.length - 1) {\r\n            currentTurn++;\r\n\r\n            if (this.state.turns[currentTurn].className !== \"bg-success text-white\") {\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.setState({ currentTurn: currentTurn });\r\n    }\r\n\r\n    render() {\r\n        let roundItems;\r\n        let playerItems;\r\n        let { t } = this.props;\r\n\r\n        let roundNames;\r\n        if (this.state.tenhou) {\r\n            roundNames = ParseTenhouReplay.parseRoundNames(this.state.rounds);\r\n        } else {\r\n            roundNames = ParseMajsoulReplay.parseRoundNames(this.state.rounds);\r\n        }\r\n\r\n        if (this.state.rounds.length) {\r\n            roundItems = roundNames.map((roundName, index) => {\r\n                return <DropdownItem disabled={index === this.state.currentRound} onClick={() => this.onRoundChoice(index)}>{roundName.generateString(t)}</DropdownItem>;\r\n            });\r\n\r\n            let playerNames;\r\n\r\n            if (this.state.tenhou) {\r\n                playerNames = ParseTenhouReplay.parsePlayers(t, this.state.text);\r\n            } else {\r\n                playerNames = ParseMajsoulReplay.parsePlayers(t, this.state.text);\r\n            }\r\n\r\n            playerItems = playerNames.map((player, index) => {\r\n                return <DropdownItem disabled={index === this.state.player} onClick={() => this.onPlayerChoice(index)}>{index}: {player}</DropdownItem>\r\n            });\r\n        }\r\n\r\n        let message = <ListGroupItem />;\r\n        let currentTurn = this.state.turns[this.state.currentTurn];\r\n\r\n        if (this.state.turns.length) {\r\n            let messageArray = currentTurn.message.generateString(t).split(\"<br/>\");\r\n            message = <ListGroupItem className={currentTurn.className}>{messageArray.map((row) => <Row>{row}</Row>)}</ListGroupItem>;\r\n        }\r\n\r\n        let calls = \"\";\r\n\r\n        for (let i = 0; currentTurn && i < currentTurn.calls.length; i++) {\r\n            if (calls) calls += t(\"analyzer.callsSeparator\");\r\n            calls += `${convertTilesToAsciiSymbols(currentTurn.calls[i])} (${convertIndexesToTenhouTiles(currentTurn.calls[i])})`;\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Card><CardBody>\r\n                        {t(\"analyzer.instructions1\")}<br />\r\n                        {t(\"analyzer.instructions2\")}<br />\r\n                        {t(\"analyzer.instructions3\")}<br />\r\n                        {t(\"analyzer.instructions4\")}<br /><br />\r\n                        {t(\"analyzer.instructions5\")}<br />\r\n                        {t(\"analyzer.instructions6\")}<br />\r\n                        {t(\"analyzer.instructions7\")}<br /><br />\r\n                        {t(\"analyzer.instructions8\")}<br />\r\n                        {t(\"analyzer.instructions9\")}\r\n                    </CardBody></Card>\r\n                </Row>\r\n                <Row>\r\n                    <Input id=\"tenhouURL\" placeholder={t(\"analyzer.URLplaceholder\")} onChange={this.onURLChanged} /> <br />\r\n                    {this.state.URLfeedback}\r\n                </Row>\r\n                <Row>\r\n                    <Input type=\"file\" id=\"fileInput\" onChange={this.onFileChanged} />\r\n                </Row>\r\n                {this.state.rounds.length ? (\r\n                    <Row>\r\n                        <Col xs=\"6\">\r\n                            <Dropdown isOpen={this.state.roundDropdownOpen} toggle={this.toggleRoundDropdown}>\r\n                                <DropdownToggle caret>\r\n                                    {t(\"analyzer.roundSelect\")}\r\n                                </DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {roundItems}\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </Col>\r\n                        <Col xs=\"6\">\r\n                            <Dropdown isOpen={this.state.playerDropdownOpen} toggle={this.togglePlayerDropdown}>\r\n                                <DropdownToggle caret>\r\n                                    {t(\"analyzer.playerSelect\")}\r\n                                </DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {playerItems}\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </Col>\r\n                    </Row>\r\n                ) : \"\"}\r\n                {this.state.turns.length ? (\r\n                    <React.Fragment>\r\n                        <br />\r\n                        <Hand tiles={currentTurn.hand} lastDraw={currentTurn.draw} />\r\n                        <br />\r\n                        <Row>\r\n                            <Col xs=\"4\">\r\n                                <Button color=\"primary\" block={true} xs=\"6\" disabled={this.state.currentTurn <= 0} onClick={() => this.onPreviousTurn()}>{t(\"analyzer.previousTurn\")}</Button>\r\n                            </Col>\r\n                            <Col xs=\"4\">\r\n                                <Button color=\"primary\" block={true} xs=\"6\" disabled={this.state.currentTurn >= this.state.turns.length - 1} onClick={() => this.onNextTurn()}>{t(\"analyzer.nextTurn\")}</Button>\r\n                            </Col>\r\n                            <Col xs=\"4\">\r\n                                <Button color=\"primary\" block={true} xs=\"6\" disabled={this.state.currentTurn >= this.state.turns.length - 1} onClick={() => this.onNextIssue()}>{t(\"analyzer.nextIssue\")}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <br />\r\n                        <ListGroup>\r\n                            <ListGroupItem>\r\n                                <Row>{t(\"analyzer.turn\", { round: roundNames[this.state.currentRound].generateString(t), turn: this.state.currentTurn + 1 })}</Row>\r\n                                <Row>{currentTurn.discards.length ? t(\"analyzer.discards\", { symbols: convertTilesToAsciiSymbols(currentTurn.discards), tiles: convertIndexesToTenhouTiles(currentTurn.discards) }) : \"\"}</Row>\r\n                                <Row>{calls.length > 0 ? t(\"analyzer.calls\", { calls: calls }) : \"\"}</Row>\r\n                            </ListGroupItem>\r\n                            {message}\r\n                            <ListGroupItem>\r\n                                <a className=\"tenhouLink\" href={\"http://tenhou.net/2/?q=\" + convertHandToTenhouString(currentTurn.hand)} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    {t(\"analyzer.tenhouLinkText\")}\r\n                                </a>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </React.Fragment>\r\n                ) : \"\"}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ReplayAnalysis);","import React from 'react';\r\nimport { Container, Button, ListGroup, ListGroupItem, Row } from 'reactstrap';\r\nimport Player from '../../models/Player';\r\nimport { convertTilesToAsciiSymbols, convertIndexesToTenhouTiles, getTileAsText } from '../../scripts/TileConversions';\r\nimport { ROUND_PARAMETERS, SEAT_NAMES } from '../../Constants';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass RandomGameState extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            init: false,\r\n            players: [],\r\n            round: 0,\r\n            doraIndicator: 1,\r\n            turn: 3,\r\n            userSeat: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.init) {\r\n            this.generateState();\r\n        }\r\n    }\r\n\r\n    generateState() {\r\n        let round = Math.floor(Math.random() * 9);\r\n\r\n        let players = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            players.push(new Player());\r\n            players[i].seat = i;\r\n        }\r\n\r\n        // Generate random point totals for each player\r\n        let maxPoints = 450;\r\n        let pointsRemaining = 1000;\r\n\r\n        if (round === 0) {\r\n            for (let i = 0; i < 4; i++) {\r\n                players[i].points = 25000;\r\n            }\r\n        } else if (round === 8) {\r\n            maxPoints = 65;\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                let points = Math.floor(Math.random() * maxPoints) + 235;\r\n                players[i].points = points * 100;\r\n                pointsRemaining -= points;\r\n                maxPoints = Math.min(maxPoints, pointsRemaining - 235);\r\n            }\r\n\r\n            players[3].points = pointsRemaining * 100;\r\n        } else {\r\n            for (let i = 0; i < 3; i++) {\r\n                let points = Math.floor(Math.random() * maxPoints);\r\n                players[i].points = points * 100;\r\n                pointsRemaining -= points;\r\n                maxPoints = Math.min(maxPoints, pointsRemaining);\r\n            }\r\n\r\n            players[3].points = pointsRemaining * 100;\r\n        }\r\n\r\n        // Pick who the user is\r\n        let userSeat = Math.floor(Math.random() * 4);\r\n\r\n        // Generate random discards for each player\r\n        let tilePool = [];\r\n\r\n        for (let i = 1; i < 38; i++) {\r\n            if (i % 10 === 0) continue;\r\n            tilePool.push(i);\r\n\r\n            // This stuff is just to make middle tiles less likely to be in the discards\r\n            if (i > 30 || (i % 10 > 6 || i % 10 < 4)) {\r\n                tilePool.push(i);\r\n            }\r\n\r\n            if (i > 30 || (i % 10 > 7 || i % 10 < 3)) {\r\n                tilePool.push(i);\r\n                tilePool.push(i);\r\n            }\r\n        }\r\n\r\n        let turn = Math.floor(Math.random() * 11) + 3;\r\n\r\n        for (let i = 0; i < turn; i++) {\r\n            for (let player = 0; player < 4; player++) {\r\n                let tile = tilePool.splice(Math.floor(Math.random() * tilePool.length), 1);\r\n                players[player].discards.push(tile);\r\n            }\r\n        }\r\n\r\n        for (let player = 0; player < userSeat; player++) {\r\n            let tile = tilePool.splice(Math.floor(Math.random() * tilePool.length), 1);\r\n            players[player].discards.push(tile);\r\n        }\r\n\r\n        let doraIndicator = 0;\r\n\r\n        do {\r\n            doraIndicator = Math.floor(Math.random() * 38);\r\n        } while (tilePool.indexOf(doraIndicator) === -1)\r\n\r\n        this.setState({\r\n            init: true,\r\n            userSeat: userSeat,\r\n            players: players,\r\n            doraIndicator: doraIndicator,\r\n            turn: turn,\r\n            round: round\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.init === false) {\r\n            return <Row>Please wait...</Row>;\r\n        }\r\n\r\n        let { t } = this.props;\r\n\r\n        let playerItems = this.state.players.map((player, index) => {\r\n            return (\r\n                <ListGroupItem key={index + 1}>\r\n                    <Row>{t(\"utils.playerLabel\", {\r\n                        seat: t(SEAT_NAMES[player.seat]),\r\n                        you: player.seat === this.state.userSeat\r\n                            ? `(${t(\"allLast.you\")})`\r\n                            : \"\"\r\n                    })}</Row>\r\n                    <Row>{t(\"utils.points\")} {player.points}</Row>\r\n                    <Row>{t(\"utils.discards\")} {convertTilesToAsciiSymbols(player.discards)} ({convertIndexesToTenhouTiles(player.discards)})</Row>\r\n                </ListGroupItem>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <Container>\r\n                <Button xs=\"12\" color=\"primary\" className=\"btn-block\" onClick={() => this.generateState()}>{t(\"utils.stateButtonLabel\")}</Button>\r\n                <ListGroup>\r\n                    <ListGroupItem key={0}>\r\n                        <Row>{t(\"utils.info\", {\r\n                            turn: this.state.turn,\r\n                            round: t(\"roundName\", ROUND_PARAMETERS[this.state.round]),\r\n                            seat: t(SEAT_NAMES[this.state.userSeat])\r\n                        })}</Row>\r\n                        <Row>{t(\"utils.dora\", { tile: getTileAsText(t, this.state.doraIndicator, true) })}</Row>\r\n                    </ListGroupItem>\r\n                    {playerItems}\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(RandomGameState);","import React from 'react';\r\nimport { Container, Button, Input, InputGroup, InputGroupAddon, ListGroupItem, ListGroup } from 'reactstrap';\r\nimport { convertHandToAsciiSymbols, convertHandToDiscordEmoji } from '../../scripts/HandConversions';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { characterToSuit } from '../../scripts/Utils';\r\n\r\nclass ConvertHand extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hand: [0, 1]\r\n        }\r\n    }\r\n\r\n    onClick() {\r\n        let string = document.getElementById(\"convertHandString\").value;\r\n        let characters = string.toLowerCase().split('').reverse();\r\n        let hand = Array(38).fill(0);\r\n        let index = 0;\r\n        let offset = -1;\r\n        let tiles = 0;\r\n\r\n        while (index < characters.length && tiles < 14) {\r\n            do {\r\n                offset = characterToSuit(characters[index]);\r\n                index++;\r\n            } while (offset === -1 && index < characters.length);\r\n\r\n            while (!isNaN(characters[index]) && index < characters.length && tiles < 14) {\r\n                let tile = parseInt(characters[index]);\r\n\r\n                if (tile > 0) {\r\n                    tile += offset;\r\n\r\n                    if (hand[tile] < 4) {\r\n                        hand[tile]++;\r\n                        tiles++;\r\n                    }\r\n                }\r\n                else if (tile === 0) {\r\n                    tile += offset;\r\n\r\n                    if (tile !== 30 && hand[tile] + hand[tile + 5] < 4) {\r\n                        hand[tile]++;\r\n                        tiles++;\r\n                    }\r\n                }\r\n\r\n                index++;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            hand: hand\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { t } = this.props;\r\n        return (\r\n            <Container>\r\n                <InputGroup>\r\n                    <Input id=\"convertHandString\" placeholder=\"123m456p789s12345z\" />\r\n                    <InputGroupAddon addonType=\"append\">\r\n                        <Button color=\"primary\" onClick={() => this.onClick()}>{t(\"utils.convertButtonLabel\")}</Button>\r\n                    </InputGroupAddon>\r\n                </InputGroup>\r\n                <ListGroup>\r\n                    <ListGroupItem>{t(\"utils.ascii\")} {convertHandToAsciiSymbols(this.state.hand)}</ListGroupItem>\r\n                    <ListGroupItem>{t(\"utils.emoji\")} {convertHandToDiscordEmoji(this.state.hand)}</ListGroupItem>\r\n                </ListGroup>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ConvertHand);","import React from 'react';\r\nimport { Container, Button, Input, InputGroup, InputGroupAddon, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Row } from 'reactstrap';\r\n\r\nclass RCalculation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dropdownOpen: false,\r\n            output: \"\"\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            dropdownOpen: !this.state.dropdownOpen\r\n        });\r\n    }\r\n\r\n    onSetR(newR) {\r\n        document.getElementById(\"opponentR\").value = newR;\r\n    }\r\n\r\n    onCalculate() {\r\n        let currentR = parseFloat(document.getElementById(\"currentR\").value);\r\n        let targetR = parseFloat(document.getElementById(\"targetR\").value);\r\n        let games = parseInt(document.getElementById(\"games\").value);\r\n        let opponentR = parseFloat(document.getElementById(\"opponentR\").value);\r\n        let firstRate = parseFloat(document.getElementById(\"firstRate\").value);\r\n        let secondRate = parseFloat(document.getElementById(\"secondRate\").value);\r\n        let thirdRate = parseFloat(document.getElementById(\"thirdRate\").value);\r\n        let fourthRate = parseFloat(document.getElementById(\"fourthRate\").value);\r\n\r\n        if (isNaN(currentR)) {\r\n            this.setState({ output: \"Current R is not a number.\" });\r\n            return;\r\n        }\r\n        if (isNaN(targetR)) {\r\n            this.setState({ output: \"Target R is not a number.\" });\r\n            return;\r\n        }\r\n        if (isNaN(games)) {\r\n            this.setState({ output: \"Game count is not a number.\" });\r\n            return;\r\n        }\r\n        if (isNaN(opponentR)) {\r\n            this.setState({ output: \"Opponent average R is not a number.\" });\r\n            return;\r\n        }\r\n        if (isNaN(firstRate)) {\r\n            this.setState({ output: \"First rate is not a number.\" });\r\n            return;\r\n        }\r\n        if (isNaN(secondRate)) {\r\n            this.setState({ output: \"Second rate is not a number.\" });\r\n            return;\r\n        }\r\n        if (isNaN(thirdRate)) {\r\n            this.setState({ output: \"Third rate is not a number.\" });\r\n            return;\r\n        }\r\n        if (isNaN(fourthRate)) {\r\n            this.setState({ output: \"Fourth rate is not a number.\" });\r\n            return;\r\n        }\r\n\r\n        let totalRate = firstRate + secondRate + thirdRate + fourthRate;\r\n        if (totalRate < 98 || totalRate > 102) {\r\n            this.setState({ output: \"Placements don't add up to 100%.\" });\r\n            return;\r\n        }\r\n\r\n        let adjustment = Math.max(1 - (games * 0.002), 0.2);\r\n        let averageRate = (opponentR * 3 + currentR) / 4;\r\n        // change = adjustment*(base+(average table rate - own rate)/40)\r\n        let firstRChange = adjustment * (30 + ((averageRate - currentR) / 40));\r\n        let secondRChange = adjustment * (10 + ((averageRate - currentR) / 40));\r\n        let thirdRChange = adjustment * (-10 + ((averageRate - currentR) / 40));\r\n        let fourthRChange = adjustment * (-30 + ((averageRate - currentR) / 40));\r\n\r\n        let averageChange =\r\n            firstRChange * firstRate\r\n            + secondRChange * secondRate\r\n            + thirdRChange * thirdRate\r\n            + fourthRChange * fourthRate;\r\n        averageChange = averageChange / 100;\r\n\r\n        let output = `R for first: ${firstRChange}, R for second: ${secondRChange}, R for third: ${thirdRChange}, R for fourth: ${fourthRChange}, average R: ${averageChange}`;\r\n\r\n        let higherTargetR = currentR - targetR < 0;\r\n\r\n        if (averageChange === 0\r\n            || (averageChange < 0 && higherTargetR)\r\n            || (averageChange > 0 && !higherTargetR)) {\r\n            this.setState({ output: `You will never reach your goal with those placements. ${output}` });\r\n            return;\r\n        }\r\n\r\n        this.setState({ output: output });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <InputGroup>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        Current R:\r\n                    </InputGroupAddon>\r\n                    <Input type=\"number\" id=\"currentR\" placeholder=\"1500\" />\r\n                </InputGroup>\r\n                <InputGroup>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        Target R:\r\n                    </InputGroupAddon>\r\n                    <Input type=\"number\" id=\"targetR\" placeholder=\"1800\" />\r\n                </InputGroup>\r\n                <InputGroup>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        Games Played:\r\n                    </InputGroupAddon>\r\n                    <Input type=\"number\" id=\"games\" placeholder=\"400\" />\r\n                </InputGroup>\r\n                <Dropdown isOpen={this.state.dropdownOpen} toggle={() => this.toggle()}>\r\n                    <DropdownToggle caret>\r\n                        Set Average R To Room Average\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.onSetR(1500)}>Ippan</DropdownItem>\r\n                        <DropdownItem onClick={() => this.onSetR(1700)}>Joukyuu</DropdownItem>\r\n                        <DropdownItem onClick={() => this.onSetR(1900)}>Tokujou</DropdownItem>\r\n                        <DropdownItem onClick={() => this.onSetR(2100)}>Houou</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n                <InputGroup>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        Opponent Average R:\r\n                    </InputGroupAddon>\r\n                    <Input type=\"number\" id=\"opponentR\" placeholder=\"1700\" />\r\n                </InputGroup>\r\n                <InputGroup>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        First Rate (%):\r\n                    </InputGroupAddon>\r\n                    <Input type=\"number\" id=\"firstRate\" placeholder=\"26.0\" />\r\n                </InputGroup>\r\n                <InputGroup>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        Second Rate (%):\r\n                    </InputGroupAddon>\r\n                    <Input type=\"number\" id=\"secondRate\" placeholder=\"24.0\" />\r\n                </InputGroup>\r\n                <InputGroup>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        Third Rate (%):\r\n                    </InputGroupAddon>\r\n                    <Input type=\"number\" id=\"thirdRate\" placeholder=\"30.0\" />\r\n                </InputGroup>\r\n                <InputGroup>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        Fourth Rate (%):\r\n                    </InputGroupAddon>\r\n                    <Input type=\"number\" id=\"fourthRate\" placeholder=\"20.0\" />\r\n                </InputGroup>\r\n                <Button onClick={() => this.onCalculate()}>Calculate</Button>\r\n                <Row>{this.state.output}</Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RCalculation;","import React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport RandomGameState from '../components/utils/RandomGameState';\r\nimport ConvertHand from '../components/utils/ConvertHand';\r\nimport RCalculation from '../components/utils/RCalculation';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nfunction UtilsState(props) {\r\n    let { t } = useTranslation();\r\n    return (\r\n        <Container>\r\n            <h2 style={{ \"textAlign\": \"center\" }}>{t(\"utils.convertHeader\")}</h2>\r\n            <ConvertHand />\r\n            <br />\r\n            <h2 style={{ \"textAlign\": \"center\" }}>{t(\"utils.stateHeader\")}</h2>\r\n            <RandomGameState />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default UtilsState;","import React from 'react';\r\nimport { Row, Col, Button, Collapse, Card, CardBody } from 'reactstrap';\r\nimport { convertHandToAsciiSymbols } from '../../scripts/HandConversions';\r\nimport { getTileAsText, convertTilesToAsciiSymbols } from '../../scripts/TileConversions';\r\nimport { calculateDiscardUkeire } from '../../scripts/UkeireCalculator';\r\nimport calculateStandardShanten from '../../scripts/ShantenCalculator';\r\nimport { ALL_TILES_REMAINING } from '../../Constants';\r\nimport { evaluateBestDiscard } from '../../scripts/Evaluations';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass ResultingHandInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleUpgrades = this.toggleUpgrades.bind(this);\r\n        this.toggleShanten = this.toggleShanten.bind(this);\r\n        this.state = {\r\n            upgradesCollapsed: true,\r\n            shantenCollapsed: true\r\n        };\r\n    }\r\n\r\n    toggleUpgrades() {\r\n        this.setState({ upgradesCollapsed: !this.state.upgradesCollapsed });\r\n    }\r\n\r\n    toggleShanten() {\r\n        this.setState({ shantenCollapsed: !this.state.shantenCollapsed });\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.hand) return <Row />;\r\n\r\n        let upgradeTiles = this.props.upgrades.tiles.map((tile) => tile.tile);\r\n        let total = this.props.upgrades.tiles.reduce((total, tile) => total + tile.resultingUkeire, 0);\r\n        let { t } = this.props;\r\n\r\n        let upgradeResults = this.props.upgrades.tiles\r\n            .sort((a, b) => b.resultingUkeire - a.resultingUkeire)\r\n            .map((tile) => {\r\n                return (\r\n                    <Row>\r\n                        {t(\"explorer.discardInfo.draw\", { draw: getTileAsText(t, tile.tile, false), discard: getTileAsText(t, tile.discard, false), count: tile.resultingUkeire })}\r\n                    </Row>\r\n                );\r\n            });\r\n\r\n        let shantenResults = <Row />;\r\n        let totalShantenUkeire = 0;\r\n        let remainingTiles = ALL_TILES_REMAINING.slice();\r\n\r\n        for (let i = 0; i < remainingTiles.length; i++) {\r\n            remainingTiles[i] = Math.max(0, remainingTiles[i] - this.props.hand[i]);\r\n        }\r\n\r\n        if (!this.state.shantenCollapsed && this.props.shanten > 0) {\r\n            shantenResults = this.props.ukeire.tiles.map((tile) => {\r\n                let resultHand = this.props.hand.slice();\r\n                resultHand[tile]++;\r\n                remainingTiles[tile]--;\r\n\r\n                let discards = calculateDiscardUkeire(resultHand, remainingTiles, calculateStandardShanten);\r\n                let bestDiscard = evaluateBestDiscard(discards);\r\n                resultHand[bestDiscard]--;\r\n                remainingTiles[tile]++;\r\n                totalShantenUkeire += discards[bestDiscard].value;\r\n                return (\r\n                    <Row>\r\n                        {t(\"explorer.discardInfo.draw\", { draw: getTileAsText(t, tile, false), discard: getTileAsText(t, bestDiscard, false), count: discards[bestDiscard].value })}\r\n                    </Row>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <Row>\r\n                <Col xs=\"12\">\r\n                    {t(\"explorer.discardInfo.discard\", { tile: getTileAsText(t, this.props.discard, false) })}\r\n                </Col>\r\n                <Col xs=\"12\">\r\n                    {convertHandToAsciiSymbols(this.props.hand)}\r\n                </Col>\r\n                <Col xs=\"12\">\r\n                    {t(\"explorer.discardInfo.shanten\", { count: this.props.shanten })}\r\n                </Col>\r\n                <Col xs=\"12\">\r\n                    {t(\"explorer.discardInfo.ukeire\", { count: this.props.ukeire.value, tiles: convertTilesToAsciiSymbols(this.props.ukeire.tiles) })}\r\n                </Col>\r\n                <Col xs=\"12\">\r\n                    <Button color=\"primary\" onClick={this.toggleShanten}>{t(\"explorer.discardInfo.expand\")}</Button>\r\n                </Col>\r\n                <Col xs=\"12\">\r\n                    <Collapse isOpen={!this.state.shantenCollapsed}>\r\n                        <Card><CardBody>\r\n                            {shantenResults}\r\n                            <Row>\r\n                                {t(\"explorer.discardInfo.average\", { average: Math.round(totalShantenUkeire / shantenResults.length) })}\r\n                            </Row>\r\n                        </CardBody></Card>\r\n                    </Collapse>\r\n                </Col>\r\n                <Col xs=\"12\">\r\n                    {t(\"explorer.discardInfo.upgrades\", { count: this.props.upgrades.value, tiles: convertTilesToAsciiSymbols(upgradeTiles) })}\r\n                </Col>\r\n                <Col xs=\"12\">\r\n                    <Button color=\"primary\" onClick={this.toggleUpgrades}>{t(\"explorer.discardInfo.expandUpgrades\")}</Button>\r\n                </Col>\r\n                <Col xs=\"12\">\r\n                    <Collapse isOpen={!this.state.upgradesCollapsed}>\r\n                        <Card><CardBody>\r\n                            {upgradeResults}\r\n                            <Row>\r\n                                {t(\"explorer.discardInfo.average\", { average: Math.round(total / upgradeResults.length) })}\r\n                            </Row>\r\n                        </CardBody></Card>\r\n                    </Collapse>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ResultingHandInfo);","import React from 'react';\r\nimport { Row, ListGroup, ListGroupItem } from 'reactstrap';\r\nimport ResultingHandInfo from './ResultingHandInfo';\r\nimport { calculateUkeire, calculateUkeireUpgrades, calculateDiscardUkeire } from '../../scripts/UkeireCalculator';\r\nimport { calculateStandardShanten } from '../../scripts/ShantenCalculator';\r\nimport { ALL_TILES_REMAINING } from '../../Constants';\r\n\r\nfunction HandFutures(props) {\r\n    if (!props.hand) return <Row />;\r\n\r\n    let tiles = [];\r\n    let hand = props.hand.slice();\r\n    let remainingTiles = ALL_TILES_REMAINING.slice();\r\n\r\n    for (let i = 0; i < remainingTiles.length; i++) {\r\n        remainingTiles[i] = Math.max(0, remainingTiles[i] - hand[i]);\r\n    }\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        if (hand[i] > 0) {\r\n            tiles.push(i);\r\n        }\r\n    }\r\n\r\n    let baseUkeire = Math.max(...calculateDiscardUkeire(hand, remainingTiles, calculateStandardShanten).map(u => u.value));\r\n\r\n    let infoObjects = tiles.map((tile) => {\r\n        let newHand = hand.slice();\r\n        newHand[tile]--;\r\n\r\n        return {\r\n            hand: newHand,\r\n            discard: tile,\r\n            shanten: calculateStandardShanten(newHand),\r\n            ukeire: calculateUkeire(newHand, remainingTiles, calculateStandardShanten),\r\n            upgrades: calculateUkeireUpgrades(newHand, remainingTiles, calculateStandardShanten, -2, baseUkeire)\r\n        }\r\n    });\r\n\r\n    infoObjects = infoObjects.sort((a, b) => {\r\n        if (a.shanten !== b.shanten) {\r\n            return a.shanten - b.shanten;\r\n        }\r\n\r\n        if (a.ukeire.value !== b.ukeire.value) {\r\n            return b.ukeire.value - a.ukeire.value;\r\n        }\r\n\r\n        return b.upgrades.value - a.upgrades.value;\r\n    });\r\n\r\n    if (!props.showAll) {\r\n        infoObjects = infoObjects.filter((obj) => {\r\n            let strictlyBetter = infoObjects.find((other) => {\r\n                return (other.shanten <= obj.shanten\r\n                    && (\r\n                        (other.ukeire.value > obj.ukeire.value && other.upgrades.value > obj.upgrades.value)\r\n                        || (other.ukeire.value === obj.ukeire.value && other.upgrades.value > obj.upgrades.value)\r\n                        || (other.ukeire.value > obj.ukeire.value && other.upgrades.value === obj.upgrades.value)\r\n                    )\r\n                );\r\n            });\r\n            return strictlyBetter === undefined;\r\n        });\r\n    }\r\n\r\n    let handInfos = infoObjects.map((obj) => {\r\n        return (\r\n            <ListGroupItem>\r\n                <ResultingHandInfo\r\n                    hand={obj.hand}\r\n                    discard={obj.discard}\r\n                    shanten={obj.shanten}\r\n                    ukeire={obj.ukeire}\r\n                    upgrades={obj.upgrades}\r\n                />\r\n            </ListGroupItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <Row className=\"mt-2\">\r\n            <ListGroup>\r\n                {handInfos}\r\n            </ListGroup>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default HandFutures;","import React from 'react';\r\nimport { Container, Row, Button, Col } from 'reactstrap';\r\nimport Hand from '../components/Hand';\r\nimport LoadButton from '../components/LoadButton';\r\nimport HandFutures from '../components/hand-explorer/HandFutures';\r\nimport { fillHand } from '../scripts/GenerateHand';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass HandExplorer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.loadHand = this.loadHand.bind(this);\r\n        this.state = {\r\n            message: \"\",\r\n            hand: null,\r\n            showAll: false\r\n        }\r\n    }\r\n\r\n    loadHand(loadData) {\r\n        let { t } = this.props;\r\n\r\n        if (loadData.tiles === 0) {\r\n            this.setState({\r\n                message: t(\"trainer.error.load\")\r\n            });\r\n            return;\r\n        }\r\n\r\n        let remainingTiles = [\r\n            0, 4, 4, 4, 4, 4, 4, 4, 4, 4,\r\n            0, 4, 4, 4, 4, 4, 4, 4, 4, 4,\r\n            0, 4, 4, 4, 4, 4, 4, 4, 4, 4,\r\n            0, 0, 0, 0, 0, 0, 0, 0\r\n        ];\r\n\r\n        for (let i = 0; i < remainingTiles.length; i++) {\r\n            remainingTiles[i] = Math.max(0, remainingTiles[i] - loadData.hand[i]);\r\n        }\r\n\r\n        let { hand } = fillHand(remainingTiles, loadData.hand, 14 - loadData.tiles);\r\n\r\n        if (!hand) {\r\n            this.setState({\r\n                message: t(\"trainer.error.load\")\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            message: \"\",\r\n            hand: hand\r\n        });\r\n    }\r\n\r\n    onShowToggled() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { t } = this.props;\r\n        return (\r\n            <Container>\r\n                <Row className=\"mb-2\">\r\n                    <span>\r\n                        {t(\"explorer.warning\")}\r\n                        <br />{t(\"explorer.shanten\")}\r\n                        <br />{t(\"explorer.ukeire\")}\r\n                    </span></Row>\r\n                <LoadButton callback={this.loadHand} />\r\n                <Col xs=\"12\"><Button onClick={() => this.onShowToggled()}>{this.state.showAll ? t(\"explorer.notableDiscards\") : t(\"explorer.allDiscards\")}</Button></Col>\r\n                <Row className=\"mt-2 mb-2\">{this.state.message}</Row>\r\n                <Hand tiles={this.state.hand} />\r\n                <HandFutures hand={this.state.hand} showAll={this.state.showAll} />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(HandExplorer);","function calculateBasicPoints(han, fu, yakuman) {\r\n    if (han <= 0) return 0;\r\n\r\n    var basicPoints;\r\n\r\n    if (yakuman > 0) {\r\n        basicPoints = 8000 * yakuman;\r\n    }\r\n    else if (han < 5) {\r\n        basicPoints = Math.min(fu * Math.pow(2, han + 2), 2000);\r\n    }\r\n    else if (han === 5) {\r\n        basicPoints = 2000;\r\n    }\r\n    else if (han < 8) {\r\n        basicPoints = 3000;\r\n    }\r\n    else if (han < 11) {\r\n        basicPoints = 4000;\r\n    }\r\n    else if (han < 13) {\r\n        basicPoints = 6000;\r\n    }\r\n    else {\r\n        // Counted yakuman\r\n        basicPoints = 8000;\r\n    }\r\n\r\n    return basicPoints;\r\n}\r\n\r\nexport function getPointsString(han = 1, fu = 20, dealer = false, tsumo = true, yakuman = 0) {\r\n    let basicPoints = calculateBasicPoints(han, fu, yakuman);\r\n\r\n    if (tsumo) {\r\n        if (dealer) {\r\n            return roundPoints(basicPoints * 2);\r\n        }\r\n        else {\r\n            return roundPoints(basicPoints) + \"/\" + roundPoints(basicPoints * 2);\r\n        }\r\n    }\r\n    else {\r\n        if (dealer) {\r\n            return roundPoints(basicPoints * 6);\r\n        }\r\n        else {\r\n            return roundPoints(basicPoints * 4);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getPoints(han = 1, fu = 20, dealer = false, tsumo = true, yakuman = 0) {\r\n    let basicPoints = calculateBasicPoints(han, fu, yakuman);\r\n\r\n    if (tsumo) {\r\n        if (dealer) {\r\n            let points = roundPoints(basicPoints * 2);\r\n            return [points, points];\r\n        }\r\n        else {\r\n            return [roundPoints(basicPoints), roundPoints(basicPoints * 2)];\r\n        }\r\n    }\r\n    else {\r\n        if (dealer) {\r\n            return roundPoints(basicPoints * 6);\r\n        }\r\n        else {\r\n            return roundPoints(basicPoints * 4);\r\n        }\r\n    }\r\n}\r\n\r\nfunction roundPoints(points) {\r\n    return Math.ceil(points / 100) * 100;\r\n}","import React from 'react';\r\nimport { Button, Input, InputGroup, InputGroupAddon, Col, Row } from 'reactstrap';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nclass ScoreInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            han: 1,\r\n            fu: 20\r\n        }\r\n\r\n        this.onHanChanged = this.onHanChanged.bind(this);\r\n        this.onFuChanged = this.onFuChanged.bind(this);\r\n    }\r\n\r\n    onHanChanged(event) {\r\n        let han = this.validateHan(event.target.value);\r\n        event.target.value = han;\r\n        this.setState({\r\n            han: han\r\n        });\r\n    }\r\n\r\n    validateHan(han) {\r\n        han = Math.max(han, this.state.fu > 110 ? 2 : 1);\r\n        han = Math.min(han, this.props.maxHan || 13);\r\n        return han;\r\n    }\r\n\r\n    onFuChanged(event) {\r\n        let fu = this.validateFu(event.target.value, this.state.fu);\r\n        event.target.value = fu;\r\n        this.setState({\r\n            fu: fu\r\n        });\r\n    }\r\n\r\n    validateFu(fu) {\r\n        fu = Math.max(fu, 20);\r\n\r\n        if (fu !== 25) {\r\n            if (fu < this.state.fu) {\r\n                fu = Math.floor(fu / 10) * 10;\r\n            } else {\r\n                fu = Math.ceil(fu / 10) * 10;\r\n            }\r\n        }\r\n\r\n        fu = Math.min(fu, this.props.maxFu || 130);\r\n\r\n        return fu;\r\n    }\r\n\r\n    onScoreSubmit() {\r\n        this.props.onScoreSubmit(this.state.han, this.state.fu, this.props.tsumo, this.props.ronTarget, this.props.placementTarget, this.props.index, this.props.riichis);\r\n    }\r\n\r\n    onNumberChanged(event) {\r\n        event.target.focus();\r\n\r\n        let value = parseInt(event.target.value);\r\n        if (value > 30 && value % 10 === 5) {\r\n            event.target.blur();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { t } = this.props;\r\n\r\n        return (\r\n            <Row>\r\n                <Col xs=\"4\" sm=\"3\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">{t(\"allLast.han\")}</InputGroupAddon>\r\n                        <Input type=\"number\" placeholder={t(\"allLast.han\")} step=\"1\" min=\"1\" max={this.props.maxHan || 13} onBlur={this.onHanChanged} onChange={this.onNumberChanged} />\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs=\"4\" sm=\"3\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">{t(\"allLast.fu\")}</InputGroupAddon>\r\n                        <Input type=\"number\" placeholder={t(\"allLast.fu\")} step=\"5\" min=\"20\" max={this.props.maxFu || 130} onBlur={this.onFuChanged} onChange={this.onNumberChanged} />\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs=\"2\">\r\n                    <Button className=\"btn-block\" onClick={() => this.onScoreSubmit()}>{t(\"allLast.submit\")}</Button>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ScoreInput);","import React from 'react';\r\nimport { ListGroupItem, Row } from 'reactstrap';\r\nimport ScoreInput from './ScoreInput';\r\nimport { PLACEMENTS } from '../../Constants';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nfunction GyakutenQuestion(props) {\r\n    let { t } = useTranslation();\r\n\r\n    let question = t(\"allLast.question\", {\r\n        action: props.tsumo ? t(\"allLast.tsumo\") : t(\"allLast.ron\", { target: t(PLACEMENTS[props.ronTarget]) }),\r\n        placement: t(PLACEMENTS[props.placementTarget])\r\n    });\r\n\r\n    for (let i = 1; i < props.riichis.length; i++) {\r\n        if (props.riichis[i] > 0) {\r\n            question = t(\"allLast.riichiQuestion\", {\r\n                player: t(PLACEMENTS[i]),\r\n                action: props.tsumo ? t(\"allLast.tsumo\") : t(\"allLast.ron\", { target: t(PLACEMENTS[props.ronTarget]) }),\r\n                placement: t(PLACEMENTS[props.placementTarget])\r\n            });\r\n            break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ListGroupItem>\r\n            <Row className=\"mb-2\">{question}</Row>\r\n            <ScoreInput\r\n                onScoreSubmit={props.onScoreSubmit}\r\n                tsumo={props.tsumo}\r\n                ronTarget={props.ronTarget}\r\n                placementTarget={props.placementTarget}\r\n                index={props.index}\r\n                riichis={props.riichis}\r\n                maxFu={props.maxFu}\r\n            />\r\n            {props.messages[props.index] ? props.messages[props.index].generateJSX(t, props.showDifferences) : \"\"}\r\n        </ListGroupItem>\r\n    );\r\n}\r\n\r\nexport default GyakutenQuestion;","import React from \"react\";\r\nimport { Container, Row } from \"reactstrap\";\r\nimport { PLACEMENTS, SEAT_NAMES } from \"../Constants\";\r\n\r\nexport default class SouthFourResultMessage {\r\n    constructor() {\r\n        this.playerSeats = [];\r\n        this.scores = [];\r\n        this.feedback = \"\";\r\n        this.placement = 0;\r\n        this.requiredScore = { han: 1, fu: 20 };\r\n    }\r\n\r\n    generateJSX(t, showDifferences) {\r\n        let feedback = t(this.feedback, { placement: t(PLACEMENTS[this.placement]) });\r\n\r\n        return (\r\n            <Container>\r\n                <Row>{feedback}&nbsp;<span>{t(\"allLast.score\", { han: this.requiredScore.han, fu: this.requiredScore.fu })}</span></Row>\r\n                <Row>{t(\"allLast.results\")}</Row>\r\n                <Row>{t(SEAT_NAMES[this.playerSeats[0]]) + \": \" + this.scores[0]} {showDifferences ? `(${t(\"allLast.you\")})` : \"\"}</Row>\r\n                <Row>{t(SEAT_NAMES[this.playerSeats[1]]) + \": \" + this.scores[1]} {showDifferences ? `(${this.scores[1] - this.scores[0]})` : \"\"}</Row>\r\n                <Row>{t(SEAT_NAMES[this.playerSeats[2]]) + \": \" + this.scores[2]} {showDifferences ? `(${this.scores[2] - this.scores[0]})` : \"\"}</Row>\r\n                <Row>{t(SEAT_NAMES[this.playerSeats[3]]) + \": \" + this.scores[3]} {showDifferences ? `(${this.scores[3] - this.scores[0]})` : \"\"}</Row>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Container, Row, Input, InputGroup, InputGroupAddon, Col, ListGroup, ListGroupItem, Button, ListGroupItemHeading, Label } from 'reactstrap';\r\nimport { getPoints } from '../scripts/ScoreCalculation';\r\nimport Player from '../models/Player';\r\nimport { randomInt, validateFu, shuffleArray } from '../scripts/Utils';\r\nimport { SEAT_NAMES, RON_SCORES, TSUMO_SCORES } from '../Constants';\r\nimport GyakutenQuestion from '../components/south-four-quiz/GyakutenQuestion';\r\nimport SouthFourResultMessage from \"../models/SouthFourResultMessage\";\r\nimport { withTranslation } from 'react-i18next';\r\nimport LocalizedMessage from '../models/LocalizedMessage';\r\n\r\nclass SouthFourQuiz extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            players: [],\r\n            messages: [],\r\n            maxFu: 50,\r\n            showDifferences: true,\r\n            loadErrorMessage: \"\"\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onFuChanged = this.onFuChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            let savedFu = window.localStorage.getItem(\"maxS4Fu\");\r\n            if (savedFu) {\r\n                savedFu = parseInt(savedFu);\r\n\r\n                this.setState({\r\n                    maxFu: savedFu\r\n                }, () => this.generateNewQuiz());\r\n            } else {\r\n                this.generateNewQuiz();\r\n            }\r\n        }\r\n        else {\r\n            this.generateNewQuiz();\r\n        }\r\n    }\r\n\r\n    onLoadSituation() {\r\n        let string = document.getElementById(\"loadScoresString\").value;\r\n        let scores = string.split(',');\r\n\r\n        if (scores.length < 4) {\r\n            this.setState({ loadErrorMessage: new LocalizedMessage(\"allLast.error.few\") });\r\n            return;\r\n        }\r\n\r\n        let players = [new Player(), new Player(), new Player(), new Player()];\r\n\r\n        for (let i = 0; i < players.length; i++) {\r\n            let converted = parseInt(scores[i]);\r\n\r\n            if (isNaN(converted)) {\r\n                this.setState({ loadErrorMessage: new LocalizedMessage(\"allLast.error.NaN\", { seat: `$t(${SEAT_NAMES[i]})` }) });\r\n                return;\r\n            }\r\n\r\n            players[i].points = converted;\r\n            players[i].seat = i;\r\n        }\r\n\r\n        players.sort((a, b) => a.points - b.points);\r\n\r\n        this.setState({\r\n            players: players,\r\n            messages: Array(15).fill(\"\"),\r\n            loadErrorMessage: \"\"\r\n        });\r\n    }\r\n\r\n    generateNewQuiz() {\r\n        let players = [new Player(), new Player(), new Player(), new Player()];\r\n\r\n        // Generate randomish scores\r\n        do {\r\n            let pointsRemaining = 100000;\r\n\r\n            let points = randomInt(500, 300) * 100\r\n            players[0].points = points;\r\n            pointsRemaining -= points;\r\n\r\n            for (let i = 1; i < 3; i++) {\r\n                points = randomInt(300, 100) * 100;\r\n                players[i].points = points;\r\n                pointsRemaining -= points;\r\n            }\r\n\r\n            players[3].points = pointsRemaining;\r\n            players.sort((a, b) => a.points - b.points);\r\n        } while (players[1].points - players[0].points < 1500 || players[1].points - players[0].points > 16000);\r\n\r\n        // Assign random seats\r\n        let seats = shuffleArray([0, 1, 2, 3]);\r\n\r\n        for (let i = 0; i < players.length; i++) {\r\n            players[i].seat = seats[i];\r\n        }\r\n\r\n        this.setState({\r\n            players: players,\r\n            messages: Array(15).fill(\"\"),\r\n        });\r\n    }\r\n\r\n    onSubmit(han, fu, tsumo, ronTarget, placementTarget, index, riichis) {\r\n        let players = this.state.players;\r\n        let scores = players.map((player) => player.points);\r\n\r\n        for (let i = 1; i < riichis.length; i++) {\r\n            scores[i] -= riichis[i] * 1000;\r\n            scores[0] += riichis[i] * 1000;\r\n        }\r\n\r\n        let required;\r\n        let message = new SouthFourResultMessage();\r\n        message.feedback = \"allLast.wrong\";\r\n        // South (1 -> 0) > West (2 -> 1) > North (3 -> 2) > East (0 -> 3)\r\n        let canBeEqual = (players[0].seat + 3) % 4 < (players[placementTarget].seat + 3) % 4;\r\n        let dealer = players[0].seat === 0;\r\n\r\n        if (tsumo) {\r\n            required = findMinimumTsumoValue(players, scores, placementTarget, this.state.maxFu, canBeEqual);\r\n\r\n            let points = getPoints(han, fu, dealer);\r\n            scores[0] += points[0] * 2 + points[1];\r\n            scores[1] -= players[1].seat > 0 ? points[0] : points[1];\r\n            scores[2] -= players[2].seat > 0 ? points[0] : points[1];\r\n            scores[3] -= players[3].seat > 0 ? points[0] : points[1];\r\n\r\n            if ((!dealer && points[0] === required.nondealer && points[1] === required.dealer)\r\n                || (dealer && points[0] === required.dealer)) {\r\n                message.feedback = \"allLast.correct\";\r\n            } else if ((!dealer && (points[0] > required.nondealer || points[1] > required.dealer))\r\n                || (dealer && points[0] > required.dealer)) {\r\n                message.feedback = \"allLast.tooMuch\";\r\n            }\r\n        } else {\r\n            required = findMinimumRonValue(players, scores, ronTarget, placementTarget, this.state.maxFu, canBeEqual);\r\n\r\n            let points = getPoints(han, fu, dealer, false);\r\n            scores[0] += points;\r\n            scores[ronTarget] -= points;\r\n\r\n            if ((!dealer && points === required.nondealer)\r\n                || (dealer && points === required.dealer)) {\r\n                message.feedback = \"allLast.correct\";\r\n            } else if ((!dealer && points > required.nondealer)\r\n                || (dealer && points > required.dealer)) {\r\n                message.feedback = \"allLast.tooMuch\";\r\n            }\r\n        }\r\n\r\n        message.placement = placementTarget;\r\n        message.playerSeats = players.map((player) => player.seat);\r\n        message.scores = scores;\r\n        message.requiredScore = required;\r\n\r\n        let messages = this.state.messages.slice();\r\n        messages[index] = message;\r\n\r\n        this.setState({ messages: messages });\r\n    }\r\n\r\n    onFuChanged(event) {\r\n        let fu = validateFu(event.target.value, this.state.maxFu);\r\n        event.target.value = fu;\r\n\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            window.localStorage.setItem(\"maxS4Fu\", fu);\r\n        }\r\n\r\n        this.setState({\r\n            maxFu: fu\r\n        });\r\n    }\r\n\r\n    onNumberChanged(event) {\r\n        event.target.focus();\r\n\r\n        let value = parseInt(event.target.value);\r\n        if (value > 30 && value % 10 === 5) {\r\n            event.target.blur();\r\n        }\r\n    }\r\n\r\n    onToggleDifferences() {\r\n        this.setState({\r\n            showDifferences: !this.state.showDifferences\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.players.length === 0) {\r\n            return (\r\n                <div>One moment...</div>\r\n            );\r\n        }\r\n\r\n        let { t } = this.props;\r\n        let scores = this.state.players.map((player, index) => {\r\n            if (this.state.showDifferences) {\r\n                return <Row key={index}>{t(SEAT_NAMES[player.seat]) + \": \" + player.points} ({index === 0 ? t(\"allLast.you\") : \"+\" + (player.points - this.state.players[0].points)})</Row>;\r\n            } else {\r\n                return <Row key={index}>{t(SEAT_NAMES[player.seat]) + \": \" + player.points}</Row>;\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Container>\r\n                <ListGroup>\r\n                    <ListGroupItemHeading><span>{t(\"allLast.title\")}</span></ListGroupItemHeading>\r\n                    <ListGroupItem>\r\n                        <Row>\r\n                            <Col xs=\"12\" sm=\"8\" md=\"6\">\r\n                                <InputGroup>\r\n                                    <InputGroupAddon addonType=\"prepend\">{t(\"allLast.maxFu\")}</InputGroupAddon>\r\n                                    <Input type=\"number\" value={this.state.maxFu} placeholder={t(\"allLast.fu\")} step=\"5\" min=\"20\" max=\"130\" onBlur={this.onFuChanged} onChange={this.onNumberChanged} />\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"toggleDifference\"\r\n                                    checked={this.state.showDifferences} onChange={() => this.onToggleDifferences()} />\r\n                                <Label className=\"form-check-label\" for=\"toggleDifference\">{t(\"allLast.showDifferences\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Row>{t(\"allLast.loadInstructions\")}</Row>\r\n                        <InputGroup>\r\n                            <Input id=\"loadScoresString\" placeholder=\"28000,26000,24000,22000\" />\r\n                            <InputGroupAddon addonType=\"append\">\r\n                                <Button color=\"warning\" onClick={() => this.onLoadSituation()}>{t(\"allLast.loadLabel\")}</Button>\r\n                            </InputGroupAddon>\r\n                        </InputGroup>\r\n                        <Row>{this.state.loadErrorMessage ? this.state.loadErrorMessage.generateString(t) : \"\"}</Row>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Button onClick={() => this.generateNewQuiz()}>{t(\"allLast.newLabel\")}</Button>\r\n                    </ListGroupItem>\r\n                    <ListGroupItemHeading><span>{t(\"allLast.escapeHeader\")}</span></ListGroupItemHeading>\r\n                    <ListGroupItem>\r\n                        <Row>{t(\"allLast.info\")}</Row>\r\n                        {scores}\r\n                    </ListGroupItem>\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={true} ronTarget={0} placementTarget={1} index={0} riichis={[0, 0, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={1} placementTarget={1} index={1} riichis={[0, 0, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={2} placementTarget={1} index={2} riichis={[0, 0, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={3} placementTarget={1} index={3} riichis={[0, 0, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <ListGroupItemHeading><span>{t(\"allLast.riichiHeader\")}</span></ListGroupItemHeading>\r\n                    <ListGroupItem>\r\n                        <Row>{t(\"allLast.info\")}</Row>\r\n                        {scores}\r\n                    </ListGroupItem>\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={true} ronTarget={0} placementTarget={1} index={4} riichis={[0, 0, 0, 1]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={1} placementTarget={1} index={5} riichis={[0, 0, 0, 1]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={3} placementTarget={1} index={6} riichis={[0, 0, 0, 1]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={true} ronTarget={0} placementTarget={1} index={7} riichis={[0, 1, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={1} placementTarget={1} index={8} riichis={[0, 1, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={3} placementTarget={1} index={9} riichis={[0, 1, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <ListGroupItemHeading><span>{t(\"allLast.higherHeader\")}</span></ListGroupItemHeading>\r\n                    <ListGroupItem>\r\n                        <Row>{t(\"allLast.info\")}</Row>\r\n                        {scores}\r\n                    </ListGroupItem>\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={true} ronTarget={0} placementTarget={2} index={10} riichis={[0, 0, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={1} placementTarget={2} index={11} riichis={[0, 0, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={2} placementTarget={2} index={12} riichis={[0, 0, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={true} ronTarget={0} placementTarget={3} index={13} riichis={[0, 0, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                    <GyakutenQuestion onScoreSubmit={this.onSubmit} tsumo={false} ronTarget={3} placementTarget={3} index={14} riichis={[0, 0, 0, 0]} messages={this.state.messages} showDifferences={this.state.showDifferences} maxFu={this.state.maxFu} />\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nfunction findMinimumTsumoValue(players, scores, placementTarget, maxFu, canBeEqual) {\r\n    for (let i = 0; i < TSUMO_SCORES.length; i++) {\r\n        if (TSUMO_SCORES[i].fu > maxFu) continue;\r\n\r\n        let newScores = scores.slice();\r\n\r\n        if (players[0].seat === 0) {\r\n            newScores[0] += TSUMO_SCORES[i].dealer * 3;\r\n            newScores[1] -= TSUMO_SCORES[i].dealer;\r\n            newScores[2] -= TSUMO_SCORES[i].dealer;\r\n            newScores[3] -= TSUMO_SCORES[i].dealer;\r\n        } else {\r\n            newScores[0] += TSUMO_SCORES[i].nondealer * 2 + TSUMO_SCORES[i].dealer;\r\n            newScores[1] -= players[1].seat === 0 ? TSUMO_SCORES[i].dealer : TSUMO_SCORES[i].nondealer;\r\n            newScores[2] -= players[2].seat === 0 ? TSUMO_SCORES[i].dealer : TSUMO_SCORES[i].nondealer;\r\n            newScores[3] -= players[3].seat === 0 ? TSUMO_SCORES[i].dealer : TSUMO_SCORES[i].nondealer;\r\n        }\r\n\r\n        let sortedScores = newScores.slice().sort((a, b) => a - b);\r\n\r\n        if (canBeEqual) {\r\n            if (sortedScores.lastIndexOf(newScores[0]) >= placementTarget) {\r\n                return TSUMO_SCORES[i];\r\n            }\r\n        } else {\r\n            if (sortedScores.indexOf(newScores[0]) >= placementTarget) {\r\n                return TSUMO_SCORES[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    return TSUMO_SCORES[0];\r\n}\r\n\r\nfunction findMinimumRonValue(players, scores, ronTarget, placementTarget, maxFu, canBeEqual) {\r\n    for (let i = 0; i < RON_SCORES.length; i++) {\r\n        if (RON_SCORES[i].fu > maxFu) continue;\r\n\r\n        let newScores = scores.slice();\r\n\r\n        let points = players[0].seat === 0 ? RON_SCORES[i].dealer : RON_SCORES[i].nondealer;\r\n        newScores[0] += points;\r\n        newScores[ronTarget] -= points;\r\n\r\n        let sortedScores = newScores.slice().sort((a, b) => a - b);\r\n\r\n        if (canBeEqual) {\r\n            if (sortedScores.lastIndexOf(newScores[0]) >= placementTarget) {\r\n                return RON_SCORES[i];\r\n            }\r\n        } else {\r\n            if (sortedScores.indexOf(newScores[0]) >= placementTarget) {\r\n                return RON_SCORES[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    return RON_SCORES[0];\r\n}\r\n\r\nexport default withTranslation()(SouthFourQuiz);","import { getTileAsText } from '../../scripts/TileConversions';\r\nimport { SAFETY_RATING_EXPLANATIONS } from '../../Constants';\r\nimport HistoryData from '../../models/HistoryData';\r\n\r\nexport default class SafetyHistoryData extends HistoryData {\r\n    /** A history object for the defense trainer, which tells the safety of a given discard. */\r\n    constructor(chosenTile = -1, chosenSafety = -1, bestTile = -1, bestSafety = -1, drawnTile = -1, message = undefined) {\r\n        super(message);\r\n        this.chosenTile = chosenTile;\r\n        this.chosenSafety = chosenSafety;\r\n        this.bestTile = bestTile;\r\n        this.bestSafety = bestSafety;\r\n        this.drawnTile = drawnTile;\r\n    }\r\n\r\n    getMessage(t, concise, verbose, spoilers) {\r\n        let result = t(`history.concise.discard`, { tile: getTileAsText(t, this.chosenTile, verbose) });\r\n\r\n        result += \". \";\r\n\r\n        result += t(\"analyzer.chosenSafety\", {\r\n            tile: getTileAsText(t, this.chosenTile, verbose),\r\n            rating: Math.floor(this.chosenSafety * 10) / 10,\r\n            explanation: t(SAFETY_RATING_EXPLANATIONS[Math.floor(this.chosenSafety)])\r\n        });\r\n\r\n        if (this.chosenSafety === this.bestSafety) {\r\n            result += t(\"analyzer.correctSafety\");\r\n        } else {\r\n            result += t(\"analyzer.bestSafety\", {\r\n                tile: getTileAsText(t, this.bestTile, verbose),\r\n                rating: Math.floor(this.bestSafety * 10) / 10,\r\n                explanation: t(SAFETY_RATING_EXPLANATIONS[Math.floor(this.bestSafety)])\r\n            });\r\n        }\r\n\r\n        if (this.drawnTile >= 0) {\r\n            result += t(\"history.verbose.draw\", { tile: getTileAsText(t, this.drawnTile, verbose) });\r\n        }\r\n\r\n        result += super.getMessage(t);\r\n        return result;\r\n    }\r\n\r\n    getClassName() {\r\n        let className = \"\";\r\n\r\n        if (this.chosenSafety === this.bestSafety) {\r\n            className = \"bg-success text-white\";\r\n        }\r\n        else if (this.chosenSafety >= this.bestSafety - 3) {\r\n            className = \"bg-warning\";\r\n        }\r\n        else {\r\n            className = \"bg-danger text-white\";\r\n        }\r\n\r\n        return className;\r\n    }\r\n}","import React from 'react';\r\nimport { Container, Collapse, Card, CardBody, Button, Row, Col, Input, Label } from 'reactstrap';\r\nimport NumericInput from 'react-numeric-input';\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nclass Settings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            collapsed: true,\r\n            settings: {\r\n                verbose: true,\r\n                numberOfRiichis: 1,\r\n                minimumTurnsBeforeRiichi: 5,\r\n                tilesInHand: 14,\r\n            }\r\n        };\r\n\r\n        this.onSettingChanged = this.onSettingChanged.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ collapsed: !this.state.collapsed });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            let savedSettings = window.localStorage.getItem(\"defenseSettings\");\r\n            if (savedSettings) {\r\n                savedSettings = JSON.parse(savedSettings);\r\n\r\n                let settings = {\r\n                    verbose: savedSettings.verbose,\r\n                    numberOfRiichis: savedSettings.numberOfRiichis || 1,\r\n                    minimumTurnsBeforeRiichi: savedSettings.minimumTurnsBeforeRiichi || 4,\r\n                    tilesInHand: savedSettings.tilesInHand || 14\r\n                }\r\n\r\n                this.setState({\r\n                    settings: settings\r\n                });\r\n\r\n                this.props.onChange(settings);\r\n            } else {\r\n                this.props.onChange(this.state.settings);\r\n            }\r\n        } else {\r\n            this.props.onChange(this.state.settings);\r\n        }\r\n    }\r\n\r\n    onSettingChanged(event, numberString, numberInput) {\r\n        if (!event) return;\r\n\r\n        let settings = this.state.settings;\r\n\r\n        if (typeof event === \"number\") {\r\n            settings[numberInput.id] = event;\r\n        }\r\n        else {\r\n            settings[event.target.id] = !settings[event.target.id];\r\n        }\r\n\r\n        this.setState({\r\n            settings: settings\r\n        });\r\n\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            window.localStorage.setItem(\"defenseSettings\", JSON.stringify(settings));\r\n        }\r\n\r\n        this.props.onChange(settings);\r\n    }\r\n\r\n    render() {\r\n        const { t } = this.props;\r\n        return (\r\n            <Container>\r\n                <Button color=\"primary\" onClick={this.toggle}>{t(\"settings.buttonLabel\")}</Button>\r\n                <Collapse isOpen={!this.state.collapsed}>\r\n                    <Card><CardBody>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Input className=\"form-check-input\" type=\"checkbox\" id=\"verbose\"\r\n                                    checked={this.state.settings.verbose} onChange={this.onSettingChanged} />\r\n                                <Label className=\"form-check-label\" for=\"verbose\">{t(\"settings.verbose\")}</Label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Label className=\"form-check-label\" for=\"numberOfRiichis\">{t(\"defense.riichiCount\")}&nbsp;</Label>\r\n                                <NumericInput className=\"form-check-input\" type=\"number\" id=\"numberOfRiichis\"\r\n                                    min={1} max={3} step={1}\r\n                                    value={this.state.settings.numberOfRiichis} onChange={this.onSettingChanged} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Label className=\"form-check-label\" for=\"minimumTurnsBeforeRiichi\">{t(\"defense.minTurns\")}&nbsp;</Label>\r\n                                <NumericInput className=\"form-check-input\" type=\"number\" id=\"minimumTurnsBeforeRiichi\"\r\n                                    min={1} max={8} step={1}\r\n                                    value={this.state.settings.minimumTurnsBeforeRiichi} onChange={this.onSettingChanged} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"form-check form-check-inline\">\r\n                                <Label className=\"form-check-label\" for=\"tilesInHand\">{t(\"defense.tilesInHand\")}&nbsp;</Label>\r\n                                <NumericInput className=\"form-check-input\" type=\"number\" id=\"tilesInHand\"\r\n                                    min={2} max={14} step={3}\r\n                                    value={this.state.settings.tilesInHand} onChange={this.onSettingChanged} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody></Card>\r\n                </Collapse>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Settings);","import React from 'react';\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Container, Row, Col, Button, Collapse, Card, CardBody } from 'reactstrap';\r\nimport DiscardPool from '../components/DiscardPool';\r\nimport Hand from '../components/Hand';\r\nimport History from '../components/History';\r\nimport Player from \"../models/Player\";\r\nimport { ALL_TILES_REMAINING, PLAYER_NAMES, SAFETY_RATING_EXPLANATIONS } from \"../Constants\";\r\nimport { generateHand } from \"../scripts/GenerateHand\";\r\nimport { shuffleArray, randomInt, removeRandomItem, getRandomItem } from \"../scripts/Utils\";\r\nimport calculateMinimumShanten from \"../scripts/ShantenCalculator\";\r\nimport { calculateDiscardUkeire } from \"../scripts/UkeireCalculator\";\r\nimport { evaluateBestDiscard, evaluateDiscardSafety } from \"../scripts/Evaluations\";\r\nimport { convertHandToTileIndexArray, convertHandToTenhouString } from \"../scripts/HandConversions\";\r\nimport SafetyHistoryData from '../components/defense-trainer/SafetyHistoryData';\r\nimport HistoryData from '../models/HistoryData';\r\nimport LocalizedMessage from '../models/LocalizedMessage';\r\nimport LocalizedMessageChain from '../models/LocalizedMessageChain';\r\nimport DefenseSettings from '../components/defense-trainer/DefenseSettings';\r\n\r\nclass DefenseState extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onTileClicked = this.onTileClicked.bind(this);\r\n        this.onSettingsChanged = this.onSettingsChanged.bind(this);\r\n        this.state = {\r\n            lastDraw: 0,\r\n            isComplete: false,\r\n            /** @type Player[] */\r\n            players: [],\r\n            history: [],\r\n            tilePool: [],\r\n            discardCount: 0,\r\n            dora: 0,\r\n            chartCollapsed: true,\r\n            settings: {\r\n                verbose: true,\r\n                numberOfRiichis: 1,\r\n                minimumTurnsBeforeRiichi: 4,\r\n                tilesInHand: 14,\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Ensure settings are loaded before starting a new hand.\r\n        this.setState({}, () => this.onNewHand());\r\n    }\r\n\r\n    onSettingsChanged(settings) {\r\n        this.setState({\r\n            settings: settings\r\n        });\r\n    }\r\n\r\n    /** Generates a fresh game state. */\r\n    onNewHand() {\r\n        /** @type {Player[]} */\r\n        let players = [];\r\n        let tilePool = [];\r\n\r\n        let remainingTiles = ALL_TILES_REMAINING.slice();\r\n        let dora = randomInt(10, 1) + randomInt(3) * 10;\r\n        remainingTiles[dora]--;\r\n\r\n        // Pick numberOfRiichis random players to be in riichi.\r\n        let riichiPlayers = shuffleArray([1, 2, 3]).slice(0, this.state.settings.numberOfRiichis);\r\n        let playerSeat = randomInt(4);\r\n\r\n        // Generate players with random hands\r\n        for (let i = 0; i < 4; i++) {\r\n            let player = new Player();\r\n            let shanten = 0;\r\n\r\n            do {\r\n                let generationResult = generateHand(remainingTiles);\r\n                remainingTiles = generationResult.availableTiles;\r\n                player.hand = generationResult.hand;\r\n                tilePool = generationResult.tilePool;\r\n                shanten = calculateMinimumShanten(player.hand);\r\n            } while (shanten < 1);\r\n\r\n            player.name = PLAYER_NAMES[i];\r\n            player.seat = (playerSeat + i) % 4;\r\n\r\n            // If this is one of the players who calls riichi, bring their hand to tenpai\r\n            if (riichiPlayers.indexOf(i) > -1) {\r\n                let finishResult = this.finishHand(player, tilePool, remainingTiles);\r\n                tilePool = finishResult.tilePool;\r\n                remainingTiles = finishResult.remainingTiles;\r\n            }\r\n\r\n            players.push(player);\r\n        }\r\n\r\n        let minDiscards = Math.min(...riichiPlayers.map(player => players[player].discards.length));\r\n        let maxDiscards = Math.max(...riichiPlayers.map(player => players[player].discards.length));\r\n\r\n        // Bring all the riichi players to the same number of discards\r\n        for (let i = 0; i < riichiPlayers.length; i++) {\r\n            let currentPlayer = players[riichiPlayers[i]];\r\n            let riichiIndex = currentPlayer.riichiIndex;\r\n\r\n            for (let j = riichiIndex; j < maxDiscards; j++) {\r\n                for (let k = 0; k < riichiPlayers.length; k++) {\r\n                    if (k === i) continue;\r\n\r\n                    let otherPlayer = players[riichiPlayers[k]];\r\n\r\n                    if (otherPlayer.discards.length <= j) continue;\r\n\r\n                    if (j > riichiIndex ||\r\n                        (j === riichiIndex && currentPlayer.takesTurnBefore(otherPlayer))) {\r\n                        currentPlayer.discardsAfterRiichi.push(otherPlayer.discards[j]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Fill the discards of each player.\r\n        players.forEach((player) => {\r\n            // Discards made before any riichi\r\n            while (player.discards.length < minDiscards - 1) {\r\n                let tile = removeRandomItem(tilePool);\r\n                player.discards.push(tile);\r\n            }\r\n\r\n            // Discard made on the same turn as the first riichi\r\n            if (!player.isInRiichi() && player.discards.length < minDiscards) {\r\n                if (riichiPlayers.some((index => players[index].takesTurnBefore(player)))) {\r\n                    // Someone declared riichi before this player discarded\r\n                    this.drawTilesToFourteen(player, tilePool);\r\n                    let discard = this.discardSafestTile(player, players, tilePool);\r\n\r\n                    for (let j = 0; j < riichiPlayers.length; j++) {\r\n                        if (players[riichiPlayers[j]].takesTurnBefore(player)) {\r\n                            players[riichiPlayers[j]].discardsAfterRiichi.push(discard);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // This player discarded before any riichis happened\r\n                    this.drawTilesToFourteen(player, tilePool);\r\n                    this.discardMostEfficientTile(player, players, tilePool);\r\n                }\r\n            }\r\n\r\n            // Discards made after the first riichi\r\n            while (player.discards.length < maxDiscards) {\r\n                let discard;\r\n\r\n                if (player.isInRiichi()) {\r\n                    // This player can't change their hand\r\n                    discard = removeRandomItem(tilePool);\r\n                    player.discards.push(discard);\r\n\r\n                } else {\r\n                    // Fold vs the first (and maybe second) riichi\r\n                    this.drawTilesToFourteen(player, tilePool);\r\n                    discard = this.discardSafestTile(player, players, tilePool);\r\n                }\r\n\r\n                for (let j = 0; j < riichiPlayers.length; j++) {\r\n                    let otherPlayer = players[riichiPlayers[j]];\r\n                    if (player.discards.length - 1 > otherPlayer.riichiIndex ||\r\n                        (player.discards.length - 1 === otherPlayer.riichiIndex && otherPlayer.takesTurnBefore(player))) {\r\n                        otherPlayer.discardsAfterRiichi.push(discard);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // playerSeat -> dealerIndex: 0 -> 0, 1 -> 3, 2 -> 2, 3 -> 1\r\n        let dealerIndex = (4 - playerSeat) % 4;\r\n\r\n        // Discard a tile for the players whose turn comes before the user's\r\n        for (let i = dealerIndex; i > 0; i = (i + 1) % 4) {\r\n            let discard = -1;\r\n\r\n            if (players[i].isInRiichi()) {\r\n                discard = removeRandomItem(tilePool);\r\n                players[i].discards.push(discard);\r\n            } else {\r\n                this.drawTilesToFourteen(players[i], tilePool);\r\n                discard = this.discardSafestTile(players[i], players, tilePool);\r\n            }\r\n\r\n            this.tileDiscardedAfterRiichi(discard, players);\r\n        }\r\n\r\n        // Remove safe tiles from the player's hand without adding them to the discards\r\n        let tileCount = convertHandToTileIndexArray(players[0].hand).length;\r\n        while (tileCount > this.state.settings.tilesInHand) {\r\n            let averageSafety = this.getAverageSafety(players[0], players);\r\n            let bestSafety = Math.max(...averageSafety);\r\n            let bestChoice = averageSafety.indexOf(bestSafety);\r\n            players[0].hand[bestChoice]--;\r\n            tileCount--;\r\n        }\r\n\r\n        // Dead wall\r\n        for (let i = 0; i < 13; i++) {\r\n            removeRandomItem(tilePool);\r\n        }\r\n\r\n        this.setState({\r\n            players: players,\r\n            tilePool: tilePool,\r\n            history: [new HistoryData(new LocalizedMessage(\"trainer.start\", { hand: convertHandToTenhouString(players[0].hand) }))],\r\n            discardCount: 0,\r\n            dora: dora,\r\n            lastDraw: -1,\r\n            isComplete: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Player} player The player who is discarding.\r\n     * @param {Player[]} players The players in the game.\r\n     * @returns {TileIndex} The tile the player discarded.\r\n     */\r\n    discardMostEfficientTile(player, players) {\r\n        let ukeire = calculateDiscardUkeire(player.hand, this.getTilesHiddenFromPlayer(player, players), calculateMinimumShanten);\r\n        let bestTile = evaluateBestDiscard(ukeire);\r\n        player.discardTile(bestTile);\r\n        return bestTile;\r\n    }\r\n\r\n    /**\r\n     * Discards the safest tile from the player's hand and returns it.\r\n     * @param {Player} player The player who is discarding.\r\n     * @param {Player[]} players The players in the game.\r\n     * @returns {TileIndex} The tile the player discarded.\r\n     */\r\n    discardSafestTile(player, players) {\r\n        let averageSafety = this.getAverageSafety(player, players);\r\n        let bestSafety = Math.max(...averageSafety);\r\n        let bestChoice = averageSafety.indexOf(bestSafety);\r\n\r\n        player.discardTile(bestChoice);\r\n        return bestChoice;\r\n    }\r\n\r\n    /**\r\n     * Draws tiles until the player's hand has 14 tiles.\r\n     * @param {Player} player The player to draw tiles.\r\n     * @param {TileIndex[]} tilePool The tiles in the wall.\r\n     */\r\n    drawTilesToFourteen(player, tilePool) {\r\n        let tilesInHand = player.hand.reduce((a, b) => a + b, 0);\r\n        for (let i = tilesInHand; i <= 14; i++) {\r\n            player.hand[removeRandomItem(tilePool)]++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Counts how many of each tile a player can't see.\r\n     * @param {Player} player The player to view from.\r\n     * @param {Player[]} players The players in the game.\r\n     * @returns {TileCounts} The number of each tile that can't be seen by the player.\r\n     */\r\n    getTilesHiddenFromPlayer(player, players) {\r\n        let visibleTiles = ALL_TILES_REMAINING.slice();\r\n\r\n        for (let i = 0; i < player.hand.length; i++) {\r\n            visibleTiles[i] -= player.hand[i];\r\n        }\r\n\r\n        for (let p = 0; p < players.length; p++) {\r\n            for (let i = 0; i < players[p].discards.length; i++) {\r\n                visibleTiles[players[p].discards[i]]--;\r\n            }\r\n        }\r\n\r\n        return visibleTiles;\r\n    }\r\n\r\n    /**\r\n     * Calculates the average safety for each tile in the given player's hand.\r\n     * @param {Player} player The player with the hand to check.\r\n     * @param {Player[]} players The players in the game.\r\n     * @returns {number[]} The average safety for each tile in the hand.\r\n     */\r\n    getAverageSafety(player, players) {\r\n        let totalSafety = Array(38).fill(0);\r\n        let riichis = 0;\r\n\r\n        for (let i = 0; i < players.length; i++) {\r\n            if (players[i].isInRiichi()) {\r\n                riichis++;\r\n\r\n                let safety = evaluateDiscardSafety(\r\n                    player.hand,\r\n                    players[i].discards,\r\n                    this.getTilesHiddenFromPlayer(player, players),\r\n                    players[i].discardsAfterRiichi,\r\n                    players[i].riichiTile\r\n                );\r\n\r\n                for (let j = 0; j < totalSafety.length; j++) {\r\n                    totalSafety[j] += safety[j];\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalSafety.map((x) => x / riichis);\r\n    }\r\n\r\n    /**\r\n     * Brings the player's hand to tenpai after some useless turns.\r\n     * @param {Player} player \r\n     * @param {TileIndex[]} tilePool \r\n     * @param {TileCounts} remainingTiles \r\n     */\r\n    finishHand(player, tilePool, remainingTiles) {\r\n        let shanten = calculateMinimumShanten(player.hand);\r\n        // We do this manually instead of using the function because we care about the ukeire counts.\r\n        let ukeire = calculateDiscardUkeire(player.hand, remainingTiles, calculateMinimumShanten, shanten);\r\n        let bestTile = evaluateBestDiscard(ukeire);\r\n        let uselessTurns = this.state.settings.minimumTurnsBeforeRiichi + randomInt(5);\r\n        let drawnTile = 0;\r\n        player.discardTile(bestTile);\r\n\r\n        for (let i = 0; i <= uselessTurns - shanten; i++) {\r\n            // Draw a useless tile.\r\n            while (true) {\r\n                drawnTile = removeRandomItem(tilePool);\r\n\r\n                if (ukeire[bestTile].tiles.includes(drawnTile)) {\r\n                    tilePool.push(drawnTile);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            remainingTiles[drawnTile]--;\r\n            player.hand[drawnTile]++;\r\n\r\n            ukeire = calculateDiscardUkeire(player.hand, remainingTiles, calculateMinimumShanten, shanten);\r\n            bestTile = evaluateBestDiscard(ukeire);\r\n            player.discardTile(bestTile);\r\n        }\r\n\r\n        while (shanten > 0) {\r\n            while (true) {\r\n                drawnTile = getRandomItem(ukeire[bestTile].tiles);\r\n\r\n                if (tilePool.includes(drawnTile)) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            remainingTiles[drawnTile]--;\r\n            player.hand[drawnTile]++;\r\n\r\n            shanten = calculateMinimumShanten(player.hand);\r\n\r\n            if (shanten === 0) player.riichiTile = -2;\r\n\r\n            ukeire = calculateDiscardUkeire(player.hand, remainingTiles, calculateMinimumShanten, shanten);\r\n            bestTile = evaluateBestDiscard(ukeire);\r\n            player.discardTile(bestTile);\r\n        }\r\n\r\n        return {\r\n            player: player,\r\n            tilePool: convertHandToTileIndexArray(remainingTiles),\r\n            remainingTiles: remainingTiles\r\n        }\r\n    }\r\n\r\n    onTileClicked(event) {\r\n        let { t } = this.props;\r\n        let isComplete = this.state.isComplete;\r\n        if (isComplete) return;\r\n\r\n        let chosenTile = parseInt(event.target.name);\r\n        let players = this.state.players.slice();\r\n        let averageSafety = this.getAverageSafety(players[0], players);\r\n        players[0].discardTile(chosenTile);\r\n        this.tileDiscardedAfterRiichi(chosenTile, players);\r\n\r\n        let tilePool = this.state.tilePool.slice();\r\n\r\n        for (let i = 1; i < players.length; i++) {\r\n            if (tilePool.length === 0) break;\r\n\r\n            let discard = -1;\r\n\r\n            if (players[i].isInRiichi()) {\r\n                discard = removeRandomItem(tilePool);\r\n                players[i].discards.push(discard);\r\n            } else {\r\n                this.drawTilesToFourteen(players[i], tilePool);\r\n                discard = this.discardSafestTile(players[i], players, tilePool);\r\n            }\r\n\r\n            this.tileDiscardedAfterRiichi(discard, players);\r\n        }\r\n\r\n        let draw = -1;\r\n        let history = this.state.history.slice();\r\n\r\n        if (tilePool.length === 0) {\r\n            isComplete = true;\r\n            let hands = new LocalizedMessageChain();\r\n            hands.appendLocalizedMessage(\"defense.finalHands\");\r\n            for (let i = 0; i < players.length; i++) {\r\n                hands.appendLineBreak();\r\n                hands.appendLocalizedMessage(\"defense.hand\", {\r\n                    player: t(players[i].name),\r\n                    hand: convertHandToTenhouString(players[i].hand)\r\n                });\r\n            }\r\n            history.unshift(new HistoryData(hands));\r\n        } else {\r\n            draw = removeRandomItem(tilePool);\r\n            players[0].hand[draw]++;\r\n        }\r\n\r\n        let bestSafety = Math.max(...averageSafety);\r\n        let bestTile = averageSafety.indexOf(bestSafety);\r\n\r\n        history.unshift(new SafetyHistoryData(\r\n            chosenTile,\r\n            averageSafety[chosenTile],\r\n            bestTile,\r\n            bestSafety,\r\n            draw\r\n        ));\r\n\r\n        this.setState({\r\n            players: players,\r\n            tilePool: tilePool,\r\n            discardCount: this.state.discardCount + 1,\r\n            lastDraw: draw,\r\n            history: history,\r\n            isComplete: isComplete\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given tile to the \"discardsAfterRiichi\" of each riichi'd player.\r\n     * @param {TileIndex} tile The tile discarded.\r\n     * @param {Player[]} players The players in the game.\r\n     */\r\n    tileDiscardedAfterRiichi(tile, players) {\r\n        for (let i = 1; i < players.length; i++) {\r\n            if (players[i].isInRiichi()) {\r\n                players[i].discardsAfterRiichi.push(tile);\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleChart() {\r\n        this.setState({\r\n            chartCollapsed: !this.state.chartCollapsed\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { t } = this.props;\r\n\r\n        let safetyRatings = SAFETY_RATING_EXPLANATIONS.map((explanation, index) => {\r\n            if (index === 0) return <Row key={index}></Row>;\r\n            return <Row key={index}>{t(\"defense.safetyRating\", { rating: index, explanation: t(explanation) })}</Row>\r\n        }).reverse();\r\n\r\n        return (\r\n            <Container>\r\n                <DefenseSettings onChange={this.onSettingsChanged} />\r\n                <Container>\r\n                    <Button color=\"primary\" onClick={() => this.toggleChart()}>{t(\"defense.safetyRatings\")}</Button>\r\n                    <Collapse isOpen={!this.state.chartCollapsed}>\r\n                        <Card><CardBody>\r\n                            <Row>{t(\"defense.averagedSafetyRating\")}</Row>\r\n                            {safetyRatings}\r\n                        </CardBody></Card>\r\n                    </Collapse>\r\n                </Container>\r\n                {this.state.players.length &&\r\n                    <React.Fragment>\r\n                        <Row className=\"mb-2 mt-2\">\r\n                            <span>{t(\"defense.instructions\")}</span>\r\n                        </Row>\r\n                        <Hand tiles={this.state.players[0].hand}\r\n                            lastDraw={this.state.lastDraw}\r\n                            onTileClick={this.onTileClicked} />\r\n                        <Row className=\"mt-2\">\r\n                            <Col xs=\"6\" sm=\"3\" md=\"3\" lg=\"2\">\r\n                                <Button className=\"btn-block\" color={this.state.isComplete ? \"success\" : \"warning\"} onClick={() => this.onNewHand()}>{t(\"trainer.newHandButtonLabel\")}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-2 no-gutters\">\r\n                            <History history={this.state.history} concise={true} verbose={this.state.settings.verbose} spoilers={this.state.settings.spoilers} />\r\n                            <DiscardPool players={this.state.players} discardCount={this.state.discardCount} wallCount={this.state.tilePool && this.state.tilePool.length} />\r\n                        </Row>\r\n                    </React.Fragment>\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n}\r\nexport default withTranslation()(DefenseState);","import React from 'react';\r\nimport { Container, Row, Button, Col, Dropdown, DropdownItem, DropdownMenu, DropdownToggle } from 'reactstrap';\r\nimport UkeireQuiz from \"./UkeireQuiz\";\r\nimport ReplayAnalysis from \"./ReplayAnalysis\";\r\nimport UtilsState from \"./UtilsState\";\r\nimport HandExplorer from \"./HandExplorer\";\r\nimport SouthFourQuiz from './SouthFourQuiz';\r\nimport { withTranslation } from \"react-i18next\";\r\nimport DefenseState from './DefenseState';\r\n\r\nclass MainMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            active: 0,\r\n            dropdownOpen: false\r\n        }\r\n    }\r\n\r\n    onSetActivePage(index) {\r\n        this.setState({\r\n            active: index\r\n        });\r\n    }\r\n\r\n    toggleDropdown() {\r\n        this.setState({\r\n            dropdownOpen: !this.state.dropdownOpen\r\n        });\r\n    }\r\n\r\n    changeLanguage(newLanguage) {\r\n        let { i18n } = this.props;\r\n        i18n.changeLanguage(newLanguage);\r\n    }\r\n\r\n    render() {\r\n        let { t } = this.props;\r\n        let page = <Row />;\r\n        switch (this.state.active) {\r\n            case 0:\r\n                page = <UkeireQuiz />; break;\r\n            case 1:\r\n                page = <ReplayAnalysis />; break;\r\n            case 2:\r\n                page = <UtilsState />; break;\r\n            case 3:\r\n                page = <HandExplorer />; break;\r\n            case 4:\r\n                page = <SouthFourQuiz />; break;\r\n            case 5:\r\n                page = <DefenseState />; break;\r\n            default:\r\n                page = <UkeireQuiz />;\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Container className=\"mb-4\">\r\n                    <Row>\r\n                        <Button color=\"success\" xs=\"4\" disabled={this.state.active === 0} onClick={() => this.onSetActivePage(0)}>{t(\"menu.trainer\")}</Button>\r\n                        <Button xs=\"4\" disabled={this.state.active === 1} onClick={() => this.onSetActivePage(1)}>{t(\"menu.analyzer\")}</Button>\r\n                        <Button xs=\"4\" disabled={this.state.active === 4} onClick={() => this.onSetActivePage(4)}>{t(\"menu.allLast\")}</Button>\r\n                        <Button xs=\"4\" disabled={this.state.active === 5} onClick={() => this.onSetActivePage(5)}>{t(\"menu.defense\")}</Button>\r\n                        <Button xs=\"4\" disabled={this.state.active === 3} onClick={() => this.onSetActivePage(3)}>{t(\"menu.explorer\")}</Button>\r\n                        <Button xs=\"4\" disabled={this.state.active === 2} onClick={() => this.onSetActivePage(2)}>{t(\"menu.utils\")}</Button>\r\n                    </Row>\r\n                    <Row>\r\n                        <Dropdown isOpen={this.state.dropdownOpen} toggle={() => this.toggleDropdown()}>\r\n                            <DropdownToggle caret>\r\n                                🌐 {t(\"menu.language\")}\r\n                            </DropdownToggle>\r\n                            <DropdownMenu>\r\n                                <DropdownItem onClick={() => this.changeLanguage(\"en\")}>English</DropdownItem>\r\n                                <DropdownItem onClick={() => this.changeLanguage(\"ja\")}>日本語</DropdownItem>\r\n                                <DropdownItem onClick={() => this.changeLanguage(\"ru\")}>Русский</DropdownItem>\r\n                                <DropdownItem onClick={() => this.changeLanguage(\"fr\")}>Français</DropdownItem>\r\n                                <DropdownItem onClick={() => this.changeLanguage(\"pl\")}>polski</DropdownItem>\r\n                                <DropdownItem onClick={() => this.changeLanguage(\"chs\")}>简体中文</DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </Row>\r\n                </Container>\r\n                {page}\r\n                <Container className=\"mt-4\">\r\n                    <Row className=\"mt-4\">\r\n                        <Col xs=\"12\"><span>{t(\"credits.label\")}</span></Col>\r\n                        <Col xs=\"12\"><span>{t(\"credits.tilesPreLink\")} <a href=\"https://github.com/FluffyStuff/riichi-mahjong-tiles\">{t(\"credits.tilesLinkText\")}</a>{t(\"credits.tilesPostLink\")}<a href=\"https://creativecommons.org/licenses/by/4.0/\">{t(\"credits.ccLinkText\")}</a></span></Col>\r\n                        <Col xs=\"12\"><span>{t(\"credits.shantenPreLink\")}<a href=\"http://cmj3.web.fc2.com/#syanten\">{t(\"credits.shantenLinkText\")}</a>{t(\"credits.shantenPostLink\")}</span></Col>\r\n                    </Row>\r\n                </Container>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(MainMenu);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"./i18n\";\r\n\r\n//import UkeireQuiz from './states/UkeireQuiz';\r\n//import HandExplorer from './states/HandExplorer';\r\n//import ReplayAnalysis from './states/ReplayAnalysis';\r\nimport MainMenu from './states/MainMenu';\r\n\r\nReactDOM.render(<MainMenu />, document.getElementById('root'));\r\nserviceWorker.register();"],"sourceRoot":""}